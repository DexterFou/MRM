
mainboard v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005728  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  080058b8  080058b8  000068b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005944  08005944  00007014  2**0
                  CONTENTS
  4 .ARM          00000000  08005944  08005944  00007014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005944  08005944  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005944  08005944  00006944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005948  08005948  00006948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  0800594c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007014  2**0
                  CONTENTS
 10 .bss          00001134  20000014  20000014  00007014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001148  20001148  00007014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8a7  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028d7  00000000  00000000  000168eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ec8  00000000  00000000  000191c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b5b  00000000  00000000  0001a090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cbc8  00000000  00000000  0001abeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000114ff  00000000  00000000  000377b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac354  00000000  00000000  00048cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f5006  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c5c  00000000  00000000  000f504c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000f8ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058a0 	.word	0x080058a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	080058a0 	.word	0x080058a0

080001d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	60f8      	str	r0, [r7, #12]
 80001d8:	60b9      	str	r1, [r7, #8]
 80001da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	4a07      	ldr	r2, [pc, #28]	@ (80001fc <vApplicationGetIdleTaskMemory+0x2c>)
 80001e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80001e2:	68bb      	ldr	r3, [r7, #8]
 80001e4:	4a06      	ldr	r2, [pc, #24]	@ (8000200 <vApplicationGetIdleTaskMemory+0x30>)
 80001e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	2280      	movs	r2, #128	@ 0x80
 80001ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001ee:	bf00      	nop
 80001f0:	3714      	adds	r7, #20
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000030 	.word	0x20000030
 8000200:	20000084 	.word	0x20000084

08000204 <setPulse>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void setPulse(int pulse)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, pulse);
 800020c:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <setPulse+0x34>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	687a      	ldr	r2, [r7, #4]
 8000212:	641a      	str	r2, [r3, #64]	@ 0x40
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, pulse);
 8000214:	4b09      	ldr	r3, [pc, #36]	@ (800023c <setPulse+0x38>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	687a      	ldr	r2, [r7, #4]
 800021a:	639a      	str	r2, [r3, #56]	@ 0x38
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, pulse);
 800021c:	4b07      	ldr	r3, [pc, #28]	@ (800023c <setPulse+0x38>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	687a      	ldr	r2, [r7, #4]
 8000222:	635a      	str	r2, [r3, #52]	@ 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, pulse);
 8000224:	4b06      	ldr	r3, [pc, #24]	@ (8000240 <setPulse+0x3c>)
 8000226:	681b      	ldr	r3, [r3, #0]
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr
 8000238:	200002d0 	.word	0x200002d0
 800023c:	2000031c 	.word	0x2000031c
 8000240:	20000284 	.word	0x20000284

08000244 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 800024e:	88fb      	ldrh	r3, [r7, #6]
 8000250:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000254:	d034      	beq.n	80002c0 <HAL_GPIO_EXTI_Callback+0x7c>
 8000256:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800025a:	dc58      	bgt.n	800030e <HAL_GPIO_EXTI_Callback+0xca>
 800025c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000260:	d01b      	beq.n	800029a <HAL_GPIO_EXTI_Callback+0x56>
 8000262:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8000266:	dc52      	bgt.n	800030e <HAL_GPIO_EXTI_Callback+0xca>
 8000268:	2b01      	cmp	r3, #1
 800026a:	d03d      	beq.n	80002e8 <HAL_GPIO_EXTI_Callback+0xa4>
 800026c:	2b02      	cmp	r3, #2
 800026e:	d14e      	bne.n	800030e <HAL_GPIO_EXTI_Callback+0xca>
	{
		case(GPIO_PIN_1):
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == RESET)
 8000270:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000274:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000278:	f001 f8ea 	bl	8001450 <HAL_GPIO_ReadPin>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d105      	bne.n	800028e <HAL_GPIO_EXTI_Callback+0x4a>
					coder1--;
 8000282:	4b25      	ldr	r3, [pc, #148]	@ (8000318 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	3b01      	subs	r3, #1
 8000288:	4a23      	ldr	r2, [pc, #140]	@ (8000318 <HAL_GPIO_EXTI_Callback+0xd4>)
 800028a:	6013      	str	r3, [r2, #0]
				else
					coder1++;
			break;
 800028c:	e03f      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xca>
					coder1++;
 800028e:	4b22      	ldr	r3, [pc, #136]	@ (8000318 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	3301      	adds	r3, #1
 8000294:	4a20      	ldr	r2, [pc, #128]	@ (8000318 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000296:	6013      	str	r3, [r2, #0]
			break;
 8000298:	e039      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xca>

		case(GPIO_PIN_11):
				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5) == RESET)
 800029a:	2120      	movs	r1, #32
 800029c:	481f      	ldr	r0, [pc, #124]	@ (800031c <HAL_GPIO_EXTI_Callback+0xd8>)
 800029e:	f001 f8d7 	bl	8001450 <HAL_GPIO_ReadPin>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d105      	bne.n	80002b4 <HAL_GPIO_EXTI_Callback+0x70>
					coder2--;
 80002a8:	4b1d      	ldr	r3, [pc, #116]	@ (8000320 <HAL_GPIO_EXTI_Callback+0xdc>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	3b01      	subs	r3, #1
 80002ae:	4a1c      	ldr	r2, [pc, #112]	@ (8000320 <HAL_GPIO_EXTI_Callback+0xdc>)
 80002b0:	6013      	str	r3, [r2, #0]
				else
					coder2++;
			break;
 80002b2:	e02c      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xca>
					coder2++;
 80002b4:	4b1a      	ldr	r3, [pc, #104]	@ (8000320 <HAL_GPIO_EXTI_Callback+0xdc>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3301      	adds	r3, #1
 80002ba:	4a19      	ldr	r2, [pc, #100]	@ (8000320 <HAL_GPIO_EXTI_Callback+0xdc>)
 80002bc:	6013      	str	r3, [r2, #0]
			break;
 80002be:	e026      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xca>

		case(GPIO_PIN_12):
				if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2) == RESET)
 80002c0:	2104      	movs	r1, #4
 80002c2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80002c6:	f001 f8c3 	bl	8001450 <HAL_GPIO_ReadPin>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d105      	bne.n	80002dc <HAL_GPIO_EXTI_Callback+0x98>
					coder3--;
 80002d0:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <HAL_GPIO_EXTI_Callback+0xe0>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	3b01      	subs	r3, #1
 80002d6:	4a13      	ldr	r2, [pc, #76]	@ (8000324 <HAL_GPIO_EXTI_Callback+0xe0>)
 80002d8:	6013      	str	r3, [r2, #0]
				else
					coder3++;
			break;
 80002da:	e018      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xca>
					coder3++;
 80002dc:	4b11      	ldr	r3, [pc, #68]	@ (8000324 <HAL_GPIO_EXTI_Callback+0xe0>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	3301      	adds	r3, #1
 80002e2:	4a10      	ldr	r2, [pc, #64]	@ (8000324 <HAL_GPIO_EXTI_Callback+0xe0>)
 80002e4:	6013      	str	r3, [r2, #0]
			break;
 80002e6:	e012      	b.n	800030e <HAL_GPIO_EXTI_Callback+0xca>

		case(GPIO_PIN_0):
				if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == RESET)
 80002e8:	2102      	movs	r1, #2
 80002ea:	480c      	ldr	r0, [pc, #48]	@ (800031c <HAL_GPIO_EXTI_Callback+0xd8>)
 80002ec:	f001 f8b0 	bl	8001450 <HAL_GPIO_ReadPin>
 80002f0:	4603      	mov	r3, r0
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d105      	bne.n	8000302 <HAL_GPIO_EXTI_Callback+0xbe>
					coder4--;
 80002f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000328 <HAL_GPIO_EXTI_Callback+0xe4>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	3b01      	subs	r3, #1
 80002fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000328 <HAL_GPIO_EXTI_Callback+0xe4>)
 80002fe:	6013      	str	r3, [r2, #0]
				else
					coder4++;
			break;
 8000300:	e004      	b.n	800030c <HAL_GPIO_EXTI_Callback+0xc8>
					coder4++;
 8000302:	4b09      	ldr	r3, [pc, #36]	@ (8000328 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	3301      	adds	r3, #1
 8000308:	4a07      	ldr	r2, [pc, #28]	@ (8000328 <HAL_GPIO_EXTI_Callback+0xe4>)
 800030a:	6013      	str	r3, [r2, #0]
			break;
 800030c:	bf00      	nop

	}

}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	20000370 	.word	0x20000370
 800031c:	48000400 	.word	0x48000400
 8000320:	20000374 	.word	0x20000374
 8000324:	20000378 	.word	0x20000378
 8000328:	2000037c 	.word	0x2000037c

0800032c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800032c:	b5b0      	push	{r4, r5, r7, lr}
 800032e:	b08e      	sub	sp, #56	@ 0x38
 8000330:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000332:	f000 fe03 	bl	8000f3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000336:	f000 f857 	bl	80003e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800033a:	f000 fa89 	bl	8000850 <MX_GPIO_Init>
  MX_TIM1_Init();
 800033e:	f000 f8c9 	bl	80004d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000342:	f000 f975 	bl	8000630 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000346:	f000 f9e9 	bl	800071c <MX_TIM3_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800034a:	f000 f8a6 	bl	800049a <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800034e:	210c      	movs	r1, #12
 8000350:	481e      	ldr	r0, [pc, #120]	@ (80003cc <main+0xa0>)
 8000352:	f002 fd6f 	bl	8002e34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000356:	2104      	movs	r1, #4
 8000358:	481d      	ldr	r0, [pc, #116]	@ (80003d0 <main+0xa4>)
 800035a:	f002 fd6b 	bl	8002e34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800035e:	2100      	movs	r1, #0
 8000360:	481b      	ldr	r0, [pc, #108]	@ (80003d0 <main+0xa4>)
 8000362:	f002 fd67 	bl	8002e34 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start_IT (&htim1, TIM_CHANNEL_1);//M1
 8000366:	2100      	movs	r1, #0
 8000368:	481a      	ldr	r0, [pc, #104]	@ (80003d4 <main+0xa8>)
 800036a:	f003 fe15 	bl	8003f98 <HAL_TIMEx_PWMN_Start_IT>



  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, RESET);
 800036e:	2200      	movs	r2, #0
 8000370:	2120      	movs	r1, #32
 8000372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000376:	f001 f883 	bl	8001480 <HAL_GPIO_WritePin>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800037a:	4b17      	ldr	r3, [pc, #92]	@ (80003d8 <main+0xac>)
 800037c:	f107 041c 	add.w	r4, r7, #28
 8000380:	461d      	mov	r5, r3
 8000382:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000384:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000386:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800038a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800038e:	f107 031c 	add.w	r3, r7, #28
 8000392:	2100      	movs	r1, #0
 8000394:	4618      	mov	r0, r3
 8000396:	f004 f825 	bl	80043e4 <osThreadCreate>
 800039a:	4603      	mov	r3, r0
 800039c:	4a0f      	ldr	r2, [pc, #60]	@ (80003dc <main+0xb0>)
 800039e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Asserv */
  osThreadDef(Asserv, StartTask02, osPriorityIdle, 0, 128);
 80003a0:	4b0f      	ldr	r3, [pc, #60]	@ (80003e0 <main+0xb4>)
 80003a2:	463c      	mov	r4, r7
 80003a4:	461d      	mov	r5, r3
 80003a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80003a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80003aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80003ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AsservHandle = osThreadCreate(osThread(Asserv), NULL);
 80003b2:	463b      	mov	r3, r7
 80003b4:	2100      	movs	r1, #0
 80003b6:	4618      	mov	r0, r3
 80003b8:	f004 f814 	bl	80043e4 <osThreadCreate>
 80003bc:	4603      	mov	r3, r0
 80003be:	4a09      	ldr	r2, [pc, #36]	@ (80003e4 <main+0xb8>)
 80003c0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80003c2:	f004 f808 	bl	80043d6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003c6:	bf00      	nop
 80003c8:	e7fd      	b.n	80003c6 <main+0x9a>
 80003ca:	bf00      	nop
 80003cc:	200002d0 	.word	0x200002d0
 80003d0:	2000031c 	.word	0x2000031c
 80003d4:	20000284 	.word	0x20000284
 80003d8:	080058c4 	.word	0x080058c4
 80003dc:	20000368 	.word	0x20000368
 80003e0:	080058e8 	.word	0x080058e8
 80003e4:	2000036c 	.word	0x2000036c

080003e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b096      	sub	sp, #88	@ 0x58
 80003ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003ee:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80003f2:	2228      	movs	r2, #40	@ 0x28
 80003f4:	2100      	movs	r1, #0
 80003f6:	4618      	mov	r0, r3
 80003f8:	f005 fa26 	bl	8005848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003fc:	f107 031c 	add.w	r3, r7, #28
 8000400:	2200      	movs	r2, #0
 8000402:	601a      	str	r2, [r3, #0]
 8000404:	605a      	str	r2, [r3, #4]
 8000406:	609a      	str	r2, [r3, #8]
 8000408:	60da      	str	r2, [r3, #12]
 800040a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]
 8000418:	611a      	str	r2, [r3, #16]
 800041a:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800041c:	2302      	movs	r3, #2
 800041e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000420:	2301      	movs	r3, #1
 8000422:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000424:	2310      	movs	r3, #16
 8000426:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000428:	2302      	movs	r3, #2
 800042a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800042c:	2300      	movs	r3, #0
 800042e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000430:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000434:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000436:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800043a:	4618      	mov	r0, r3
 800043c:	f001 f850 	bl	80014e0 <HAL_RCC_OscConfig>
 8000440:	4603      	mov	r3, r0
 8000442:	2b00      	cmp	r3, #0
 8000444:	d001      	beq.n	800044a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000446:	f000 fb91 	bl	8000b6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044a:	230f      	movs	r3, #15
 800044c:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800044e:	2302      	movs	r3, #2
 8000450:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000452:	2300      	movs	r3, #0
 8000454:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000456:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800045a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800045c:	2300      	movs	r3, #0
 800045e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000460:	f107 031c 	add.w	r3, r7, #28
 8000464:	2102      	movs	r1, #2
 8000466:	4618      	mov	r0, r3
 8000468:	f002 f878 	bl	800255c <HAL_RCC_ClockConfig>
 800046c:	4603      	mov	r3, r0
 800046e:	2b00      	cmp	r3, #0
 8000470:	d001      	beq.n	8000476 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000472:	f000 fb7b 	bl	8000b6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000476:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800047a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000480:	1d3b      	adds	r3, r7, #4
 8000482:	4618      	mov	r0, r3
 8000484:	f002 fa9a 	bl	80029bc <HAL_RCCEx_PeriphCLKConfig>
 8000488:	4603      	mov	r3, r0
 800048a:	2b00      	cmp	r3, #0
 800048c:	d001      	beq.n	8000492 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800048e:	f000 fb6d 	bl	8000b6c <Error_Handler>
  }
}
 8000492:	bf00      	nop
 8000494:	3758      	adds	r7, #88	@ 0x58
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800049a:	b580      	push	{r7, lr}
 800049c:	af00      	add	r7, sp, #0
  /* EXTI0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800049e:	2200      	movs	r2, #0
 80004a0:	2105      	movs	r1, #5
 80004a2:	2006      	movs	r0, #6
 80004a4:	f000 fe38 	bl	8001118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80004a8:	2006      	movs	r0, #6
 80004aa:	f000 fe51 	bl	8001150 <HAL_NVIC_EnableIRQ>
  /* EXTI1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80004ae:	2200      	movs	r2, #0
 80004b0:	2105      	movs	r1, #5
 80004b2:	2007      	movs	r0, #7
 80004b4:	f000 fe30 	bl	8001118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80004b8:	2007      	movs	r0, #7
 80004ba:	f000 fe49 	bl	8001150 <HAL_NVIC_EnableIRQ>
  /* EXTI15_10_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80004be:	2200      	movs	r2, #0
 80004c0:	2105      	movs	r1, #5
 80004c2:	2028      	movs	r0, #40	@ 0x28
 80004c4:	f000 fe28 	bl	8001118 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80004c8:	2028      	movs	r0, #40	@ 0x28
 80004ca:	f000 fe41 	bl	8001150 <HAL_NVIC_EnableIRQ>
}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
	...

080004d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b09a      	sub	sp, #104	@ 0x68
 80004d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004da:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004e8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004f4:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80004f8:	2200      	movs	r2, #0
 80004fa:	601a      	str	r2, [r3, #0]
 80004fc:	605a      	str	r2, [r3, #4]
 80004fe:	609a      	str	r2, [r3, #8]
 8000500:	60da      	str	r2, [r3, #12]
 8000502:	611a      	str	r2, [r3, #16]
 8000504:	615a      	str	r2, [r3, #20]
 8000506:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	222c      	movs	r2, #44	@ 0x2c
 800050c:	2100      	movs	r1, #0
 800050e:	4618      	mov	r0, r3
 8000510:	f005 f99a 	bl	8005848 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000514:	4b44      	ldr	r3, [pc, #272]	@ (8000628 <MX_TIM1_Init+0x154>)
 8000516:	4a45      	ldr	r2, [pc, #276]	@ (800062c <MX_TIM1_Init+0x158>)
 8000518:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 5;
 800051a:	4b43      	ldr	r3, [pc, #268]	@ (8000628 <MX_TIM1_Init+0x154>)
 800051c:	2205      	movs	r2, #5
 800051e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000520:	4b41      	ldr	r3, [pc, #260]	@ (8000628 <MX_TIM1_Init+0x154>)
 8000522:	2200      	movs	r2, #0
 8000524:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3200;
 8000526:	4b40      	ldr	r3, [pc, #256]	@ (8000628 <MX_TIM1_Init+0x154>)
 8000528:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800052c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800052e:	4b3e      	ldr	r3, [pc, #248]	@ (8000628 <MX_TIM1_Init+0x154>)
 8000530:	2200      	movs	r2, #0
 8000532:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000534:	4b3c      	ldr	r3, [pc, #240]	@ (8000628 <MX_TIM1_Init+0x154>)
 8000536:	2200      	movs	r2, #0
 8000538:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053a:	4b3b      	ldr	r3, [pc, #236]	@ (8000628 <MX_TIM1_Init+0x154>)
 800053c:	2200      	movs	r2, #0
 800053e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000540:	4839      	ldr	r0, [pc, #228]	@ (8000628 <MX_TIM1_Init+0x154>)
 8000542:	f002 fb61 	bl	8002c08 <HAL_TIM_Base_Init>
 8000546:	4603      	mov	r3, r0
 8000548:	2b00      	cmp	r3, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800054c:	f000 fb0e 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000550:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000554:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000556:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800055a:	4619      	mov	r1, r3
 800055c:	4832      	ldr	r0, [pc, #200]	@ (8000628 <MX_TIM1_Init+0x154>)
 800055e:	f002 ff6b 	bl	8003438 <HAL_TIM_ConfigClockSource>
 8000562:	4603      	mov	r3, r0
 8000564:	2b00      	cmp	r3, #0
 8000566:	d001      	beq.n	800056c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000568:	f000 fb00 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800056c:	482e      	ldr	r0, [pc, #184]	@ (8000628 <MX_TIM1_Init+0x154>)
 800056e:	f002 fbff 	bl	8002d70 <HAL_TIM_PWM_Init>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000578:	f000 faf8 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC1REF;
 800057c:	2340      	movs	r3, #64	@ 0x40
 800057e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000580:	2300      	movs	r3, #0
 8000582:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000584:	2300      	movs	r3, #0
 8000586:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000588:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800058c:	4619      	mov	r1, r3
 800058e:	4826      	ldr	r0, [pc, #152]	@ (8000628 <MX_TIM1_Init+0x154>)
 8000590:	f003 fde0 	bl	8004154 <HAL_TIMEx_MasterConfigSynchronization>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800059a:	f000 fae7 	bl	8000b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800059e:	2360      	movs	r3, #96	@ 0x60
 80005a0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 2600;
 80005a2:	f640 2328 	movw	r3, #2600	@ 0xa28
 80005a6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005a8:	2300      	movs	r3, #0
 80005aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005b0:	2300      	movs	r3, #0
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005b4:	2300      	movs	r3, #0
 80005b6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005b8:	2300      	movs	r3, #0
 80005ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005bc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80005c0:	2200      	movs	r2, #0
 80005c2:	4619      	mov	r1, r3
 80005c4:	4818      	ldr	r0, [pc, #96]	@ (8000628 <MX_TIM1_Init+0x154>)
 80005c6:	f002 fe23 	bl	8003210 <HAL_TIM_PWM_ConfigChannel>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80005d0:	f000 facc 	bl	8000b6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005d4:	2300      	movs	r3, #0
 80005d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005dc:	2300      	movs	r3, #0
 80005de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005e0:	2300      	movs	r3, #0
 80005e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80005ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80005f2:	2300      	movs	r3, #0
 80005f4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80005f6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80005fa:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000600:	2300      	movs	r3, #0
 8000602:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4619      	mov	r1, r3
 8000608:	4807      	ldr	r0, [pc, #28]	@ (8000628 <MX_TIM1_Init+0x154>)
 800060a:	f003 fe11 	bl	8004230 <HAL_TIMEx_ConfigBreakDeadTime>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_TIM1_Init+0x144>
  {
    Error_Handler();
 8000614:	f000 faaa 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000618:	4803      	ldr	r0, [pc, #12]	@ (8000628 <MX_TIM1_Init+0x154>)
 800061a:	f000 fb1b 	bl	8000c54 <HAL_TIM_MspPostInit>

}
 800061e:	bf00      	nop
 8000620:	3768      	adds	r7, #104	@ 0x68
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000284 	.word	0x20000284
 800062c:	40012c00 	.word	0x40012c00

08000630 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b08e      	sub	sp, #56	@ 0x38
 8000634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000636:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800063a:	2200      	movs	r2, #0
 800063c:	601a      	str	r2, [r3, #0]
 800063e:	605a      	str	r2, [r3, #4]
 8000640:	609a      	str	r2, [r3, #8]
 8000642:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000644:	f107 031c 	add.w	r3, r7, #28
 8000648:	2200      	movs	r2, #0
 800064a:	601a      	str	r2, [r3, #0]
 800064c:	605a      	str	r2, [r3, #4]
 800064e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000650:	463b      	mov	r3, r7
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]
 800065e:	615a      	str	r2, [r3, #20]
 8000660:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000662:	4b2d      	ldr	r3, [pc, #180]	@ (8000718 <MX_TIM2_Init+0xe8>)
 8000664:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000668:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 5;
 800066a:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <MX_TIM2_Init+0xe8>)
 800066c:	2205      	movs	r2, #5
 800066e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000670:	4b29      	ldr	r3, [pc, #164]	@ (8000718 <MX_TIM2_Init+0xe8>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3200;
 8000676:	4b28      	ldr	r3, [pc, #160]	@ (8000718 <MX_TIM2_Init+0xe8>)
 8000678:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 800067c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800067e:	4b26      	ldr	r3, [pc, #152]	@ (8000718 <MX_TIM2_Init+0xe8>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000684:	4b24      	ldr	r3, [pc, #144]	@ (8000718 <MX_TIM2_Init+0xe8>)
 8000686:	2200      	movs	r2, #0
 8000688:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800068a:	4823      	ldr	r0, [pc, #140]	@ (8000718 <MX_TIM2_Init+0xe8>)
 800068c:	f002 fabc 	bl	8002c08 <HAL_TIM_Base_Init>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000696:	f000 fa69 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800069a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800069e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80006a4:	4619      	mov	r1, r3
 80006a6:	481c      	ldr	r0, [pc, #112]	@ (8000718 <MX_TIM2_Init+0xe8>)
 80006a8:	f002 fec6 	bl	8003438 <HAL_TIM_ConfigClockSource>
 80006ac:	4603      	mov	r3, r0
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d001      	beq.n	80006b6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006b2:	f000 fa5b 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006b6:	4818      	ldr	r0, [pc, #96]	@ (8000718 <MX_TIM2_Init+0xe8>)
 80006b8:	f002 fb5a 	bl	8002d70 <HAL_TIM_PWM_Init>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006c2:	f000 fa53 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c6:	2300      	movs	r3, #0
 80006c8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	4810      	ldr	r0, [pc, #64]	@ (8000718 <MX_TIM2_Init+0xe8>)
 80006d6:	f003 fd3d 	bl	8004154 <HAL_TIMEx_MasterConfigSynchronization>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80006e0:	f000 fa44 	bl	8000b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006e4:	2360      	movs	r3, #96	@ 0x60
 80006e6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80006e8:	2300      	movs	r3, #0
 80006ea:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	220c      	movs	r2, #12
 80006f8:	4619      	mov	r1, r3
 80006fa:	4807      	ldr	r0, [pc, #28]	@ (8000718 <MX_TIM2_Init+0xe8>)
 80006fc:	f002 fd88 	bl	8003210 <HAL_TIM_PWM_ConfigChannel>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000706:	f000 fa31 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800070a:	4803      	ldr	r0, [pc, #12]	@ (8000718 <MX_TIM2_Init+0xe8>)
 800070c:	f000 faa2 	bl	8000c54 <HAL_TIM_MspPostInit>

}
 8000710:	bf00      	nop
 8000712:	3738      	adds	r7, #56	@ 0x38
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	200002d0 	.word	0x200002d0

0800071c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	@ 0x50
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000730:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000740:	f107 0320 	add.w	r3, r7, #32
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800074c:	1d3b      	adds	r3, r7, #4
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
 800075a:	615a      	str	r2, [r3, #20]
 800075c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800075e:	4b3a      	ldr	r3, [pc, #232]	@ (8000848 <MX_TIM3_Init+0x12c>)
 8000760:	4a3a      	ldr	r2, [pc, #232]	@ (800084c <MX_TIM3_Init+0x130>)
 8000762:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 8000764:	4b38      	ldr	r3, [pc, #224]	@ (8000848 <MX_TIM3_Init+0x12c>)
 8000766:	2205      	movs	r2, #5
 8000768:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800076a:	4b37      	ldr	r3, [pc, #220]	@ (8000848 <MX_TIM3_Init+0x12c>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3200;
 8000770:	4b35      	ldr	r3, [pc, #212]	@ (8000848 <MX_TIM3_Init+0x12c>)
 8000772:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8000776:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000778:	4b33      	ldr	r3, [pc, #204]	@ (8000848 <MX_TIM3_Init+0x12c>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800077e:	4b32      	ldr	r3, [pc, #200]	@ (8000848 <MX_TIM3_Init+0x12c>)
 8000780:	2200      	movs	r2, #0
 8000782:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000784:	4830      	ldr	r0, [pc, #192]	@ (8000848 <MX_TIM3_Init+0x12c>)
 8000786:	f002 fa3f 	bl	8002c08 <HAL_TIM_Base_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000790:	f000 f9ec 	bl	8000b6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000794:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000798:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800079a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800079e:	4619      	mov	r1, r3
 80007a0:	4829      	ldr	r0, [pc, #164]	@ (8000848 <MX_TIM3_Init+0x12c>)
 80007a2:	f002 fe49 	bl	8003438 <HAL_TIM_ConfigClockSource>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80007ac:	f000 f9de 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80007b0:	4825      	ldr	r0, [pc, #148]	@ (8000848 <MX_TIM3_Init+0x12c>)
 80007b2:	f002 fadd 	bl	8002d70 <HAL_TIM_PWM_Init>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 80007bc:	f000 f9d6 	bl	8000b6c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80007c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007cc:	4619      	mov	r1, r3
 80007ce:	481e      	ldr	r0, [pc, #120]	@ (8000848 <MX_TIM3_Init+0x12c>)
 80007d0:	f002 fefb 	bl	80035ca <HAL_TIM_SlaveConfigSynchro>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 80007da:	f000 f9c7 	bl	8000b6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e2:	2300      	movs	r3, #0
 80007e4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007e6:	f107 0320 	add.w	r3, r7, #32
 80007ea:	4619      	mov	r1, r3
 80007ec:	4816      	ldr	r0, [pc, #88]	@ (8000848 <MX_TIM3_Init+0x12c>)
 80007ee:	f003 fcb1 	bl	8004154 <HAL_TIMEx_MasterConfigSynchronization>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80007f8:	f000 f9b8 	bl	8000b6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fc:	2360      	movs	r3, #96	@ 0x60
 80007fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800080c:	1d3b      	adds	r3, r7, #4
 800080e:	2200      	movs	r2, #0
 8000810:	4619      	mov	r1, r3
 8000812:	480d      	ldr	r0, [pc, #52]	@ (8000848 <MX_TIM3_Init+0x12c>)
 8000814:	f002 fcfc 	bl	8003210 <HAL_TIM_PWM_ConfigChannel>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM3_Init+0x106>
  {
    Error_Handler();
 800081e:	f000 f9a5 	bl	8000b6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	2204      	movs	r2, #4
 8000826:	4619      	mov	r1, r3
 8000828:	4807      	ldr	r0, [pc, #28]	@ (8000848 <MX_TIM3_Init+0x12c>)
 800082a:	f002 fcf1 	bl	8003210 <HAL_TIM_PWM_ConfigChannel>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x11c>
  {
    Error_Handler();
 8000834:	f000 f99a 	bl	8000b6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000838:	4803      	ldr	r0, [pc, #12]	@ (8000848 <MX_TIM3_Init+0x12c>)
 800083a:	f000 fa0b 	bl	8000c54 <HAL_TIM_MspPostInit>

}
 800083e:	bf00      	nop
 8000840:	3750      	adds	r7, #80	@ 0x50
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000031c 	.word	0x2000031c
 800084c:	40000400 	.word	0x40000400

08000850 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b088      	sub	sp, #32
 8000854:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	2200      	movs	r2, #0
 800085c:	601a      	str	r2, [r3, #0]
 800085e:	605a      	str	r2, [r3, #4]
 8000860:	609a      	str	r2, [r3, #8]
 8000862:	60da      	str	r2, [r3, #12]
 8000864:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000866:	4b39      	ldr	r3, [pc, #228]	@ (800094c <MX_GPIO_Init+0xfc>)
 8000868:	695b      	ldr	r3, [r3, #20]
 800086a:	4a38      	ldr	r2, [pc, #224]	@ (800094c <MX_GPIO_Init+0xfc>)
 800086c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000870:	6153      	str	r3, [r2, #20]
 8000872:	4b36      	ldr	r3, [pc, #216]	@ (800094c <MX_GPIO_Init+0xfc>)
 8000874:	695b      	ldr	r3, [r3, #20]
 8000876:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	4b33      	ldr	r3, [pc, #204]	@ (800094c <MX_GPIO_Init+0xfc>)
 8000880:	695b      	ldr	r3, [r3, #20]
 8000882:	4a32      	ldr	r2, [pc, #200]	@ (800094c <MX_GPIO_Init+0xfc>)
 8000884:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000888:	6153      	str	r3, [r2, #20]
 800088a:	4b30      	ldr	r3, [pc, #192]	@ (800094c <MX_GPIO_Init+0xfc>)
 800088c:	695b      	ldr	r3, [r3, #20]
 800088e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000892:	607b      	str	r3, [r7, #4]
 8000894:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000896:	4b2d      	ldr	r3, [pc, #180]	@ (800094c <MX_GPIO_Init+0xfc>)
 8000898:	695b      	ldr	r3, [r3, #20]
 800089a:	4a2c      	ldr	r2, [pc, #176]	@ (800094c <MX_GPIO_Init+0xfc>)
 800089c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008a0:	6153      	str	r3, [r2, #20]
 80008a2:	4b2a      	ldr	r3, [pc, #168]	@ (800094c <MX_GPIO_Init+0xfc>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80008aa:	603b      	str	r3, [r7, #0]
 80008ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80008ae:	2200      	movs	r2, #0
 80008b0:	2120      	movs	r1, #32
 80008b2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b6:	f000 fde3 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80008ba:	2302      	movs	r3, #2
 80008bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008c8:	f107 030c 	add.w	r3, r7, #12
 80008cc:	4619      	mov	r1, r3
 80008ce:	4820      	ldr	r0, [pc, #128]	@ (8000950 <MX_GPIO_Init+0x100>)
 80008d0:	f000 fc4c 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_12;
 80008d4:	f641 0301 	movw	r3, #6145	@ 0x1801
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008da:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4619      	mov	r1, r3
 80008ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008ee:	f000 fc3d 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008f2:	2320      	movs	r3, #32
 80008f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4619      	mov	r1, r3
 8000908:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800090c:	f000 fc2e 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 8000910:	2322      	movs	r3, #34	@ 0x22
 8000912:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000914:	2300      	movs	r3, #0
 8000916:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	f107 030c 	add.w	r3, r7, #12
 8000920:	4619      	mov	r1, r3
 8000922:	480c      	ldr	r0, [pc, #48]	@ (8000954 <MX_GPIO_Init+0x104>)
 8000924:	f000 fc22 	bl	800116c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000928:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800092c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092e:	2300      	movs	r3, #0
 8000930:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 030c 	add.w	r3, r7, #12
 800093a:	4619      	mov	r1, r3
 800093c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000940:	f000 fc14 	bl	800116c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000944:	bf00      	nop
 8000946:	3720      	adds	r7, #32
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40021000 	.word	0x40021000
 8000950:	48001400 	.word	0x48001400
 8000954:	48000400 	.word	0x48000400

08000958 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000960:	2001      	movs	r0, #1
 8000962:	f003 fd8b 	bl	800447c <osDelay>
 8000966:	e7fb      	b.n	8000960 <StartDefaultTask+0x8>

08000968 <StartTask02>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask02 */
void StartTask02(void const * argument)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask02 */
	setPulse(1600);
 8000970:	f44f 60c8 	mov.w	r0, #1600	@ 0x640
 8000974:	f7ff fc46 	bl	8000204 <setPulse>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, SET);
 8000978:	2201      	movs	r2, #1
 800097a:	2120      	movs	r1, #32
 800097c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000980:	f000 fd7e 	bl	8001480 <HAL_GPIO_WritePin>
  /* Infinite loop */
  while(1)
  {
	  val1M1 = val2M1;
 8000984:	4b5d      	ldr	r3, [pc, #372]	@ (8000afc <StartTask02+0x194>)
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a5d      	ldr	r2, [pc, #372]	@ (8000b00 <StartTask02+0x198>)
 800098a:	6013      	str	r3, [r2, #0]
	  val2M1 = coder1;
 800098c:	4b5d      	ldr	r3, [pc, #372]	@ (8000b04 <StartTask02+0x19c>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a5a      	ldr	r2, [pc, #360]	@ (8000afc <StartTask02+0x194>)
 8000992:	6013      	str	r3, [r2, #0]

	  errorM1 = setM1 - val2M1;
 8000994:	4b5c      	ldr	r3, [pc, #368]	@ (8000b08 <StartTask02+0x1a0>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	4b58      	ldr	r3, [pc, #352]	@ (8000afc <StartTask02+0x194>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	ee07 3a90 	vmov	s15, r3
 80009a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009a6:	4b59      	ldr	r3, [pc, #356]	@ (8000b0c <StartTask02+0x1a4>)
 80009a8:	edc3 7a00 	vstr	s15, [r3]

      //integration :
	  I_errorsM1 += errorM1;
 80009ac:	4b58      	ldr	r3, [pc, #352]	@ (8000b10 <StartTask02+0x1a8>)
 80009ae:	ed93 7a00 	vldr	s14, [r3]
 80009b2:	4b56      	ldr	r3, [pc, #344]	@ (8000b0c <StartTask02+0x1a4>)
 80009b4:	edd3 7a00 	vldr	s15, [r3]
 80009b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80009bc:	4b54      	ldr	r3, [pc, #336]	@ (8000b10 <StartTask02+0x1a8>)
 80009be:	edc3 7a00 	vstr	s15, [r3]

      if (I_errorsM1 > maxIntegral) I_errorsM1 = maxIntegral;
 80009c2:	4b53      	ldr	r3, [pc, #332]	@ (8000b10 <StartTask02+0x1a8>)
 80009c4:	edd3 7a00 	vldr	s15, [r3]
 80009c8:	ed9f 7a52 	vldr	s14, [pc, #328]	@ 8000b14 <StartTask02+0x1ac>
 80009cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009d4:	dd02      	ble.n	80009dc <StartTask02+0x74>
 80009d6:	4b4e      	ldr	r3, [pc, #312]	@ (8000b10 <StartTask02+0x1a8>)
 80009d8:	4a4f      	ldr	r2, [pc, #316]	@ (8000b18 <StartTask02+0x1b0>)
 80009da:	601a      	str	r2, [r3, #0]
      if (I_errorsM1 < -maxIntegral) I_errorsM1 = -maxIntegral;
 80009dc:	4b4c      	ldr	r3, [pc, #304]	@ (8000b10 <StartTask02+0x1a8>)
 80009de:	edd3 7a00 	vldr	s15, [r3]
 80009e2:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8000b1c <StartTask02+0x1b4>
 80009e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009ee:	d502      	bpl.n	80009f6 <StartTask02+0x8e>
 80009f0:	4b47      	ldr	r3, [pc, #284]	@ (8000b10 <StartTask02+0x1a8>)
 80009f2:	4a4b      	ldr	r2, [pc, #300]	@ (8000b20 <StartTask02+0x1b8>)
 80009f4:	601a      	str	r2, [r3, #0]

      //if (errorM1 == 0) I_errorsM1 = 0;

      //derivation :
      D_errorsM1 = olldErrorM1 - errorM1;
 80009f6:	4b4b      	ldr	r3, [pc, #300]	@ (8000b24 <StartTask02+0x1bc>)
 80009f8:	ed93 7a00 	vldr	s14, [r3]
 80009fc:	4b43      	ldr	r3, [pc, #268]	@ (8000b0c <StartTask02+0x1a4>)
 80009fe:	edd3 7a00 	vldr	s15, [r3]
 8000a02:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000a06:	4b48      	ldr	r3, [pc, #288]	@ (8000b28 <StartTask02+0x1c0>)
 8000a08:	edc3 7a00 	vstr	s15, [r3]
      olldErrorM1 = errorM1;
 8000a0c:	4b3f      	ldr	r3, [pc, #252]	@ (8000b0c <StartTask02+0x1a4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a44      	ldr	r2, [pc, #272]	@ (8000b24 <StartTask02+0x1bc>)
 8000a12:	6013      	str	r3, [r2, #0]

      outputM1 = kP * errorM1 + kI * I_errorsM1 + kD * D_errorsM1;
 8000a14:	4b45      	ldr	r3, [pc, #276]	@ (8000b2c <StartTask02+0x1c4>)
 8000a16:	ed93 7a00 	vldr	s14, [r3]
 8000a1a:	4b3c      	ldr	r3, [pc, #240]	@ (8000b0c <StartTask02+0x1a4>)
 8000a1c:	edd3 7a00 	vldr	s15, [r3]
 8000a20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a24:	4b42      	ldr	r3, [pc, #264]	@ (8000b30 <StartTask02+0x1c8>)
 8000a26:	edd3 6a00 	vldr	s13, [r3]
 8000a2a:	4b39      	ldr	r3, [pc, #228]	@ (8000b10 <StartTask02+0x1a8>)
 8000a2c:	edd3 7a00 	vldr	s15, [r3]
 8000a30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000a38:	4b3e      	ldr	r3, [pc, #248]	@ (8000b34 <StartTask02+0x1cc>)
 8000a3a:	edd3 6a00 	vldr	s13, [r3]
 8000a3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000b28 <StartTask02+0x1c0>)
 8000a40:	edd3 7a00 	vldr	s15, [r3]
 8000a44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000a48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000a4c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b38 <StartTask02+0x1d0>)
 8000a4e:	edc3 7a00 	vstr	s15, [r3]

      if(0 < outputM1)
 8000a52:	4b39      	ldr	r3, [pc, #228]	@ (8000b38 <StartTask02+0x1d0>)
 8000a54:	edd3 7a00 	vldr	s15, [r3]
 8000a58:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000a5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a60:	dd1b      	ble.n	8000a9a <StartTask02+0x132>
      {
    	  if(1600 <= outputM1)
 8000a62:	4b35      	ldr	r3, [pc, #212]	@ (8000b38 <StartTask02+0x1d0>)
 8000a64:	edd3 7a00 	vldr	s15, [r3]
 8000a68:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8000b3c <StartTask02+0x1d4>
 8000a6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a74:	db04      	blt.n	8000a80 <StartTask02+0x118>
    	  {
    		  realOutputM1 = 3200;
 8000a76:	4b32      	ldr	r3, [pc, #200]	@ (8000b40 <StartTask02+0x1d8>)
 8000a78:	f44f 6248 	mov.w	r2, #3200	@ 0xc80
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	e00c      	b.n	8000a9a <StartTask02+0x132>
    	  }
    	  else
    	  {
    		  realOutputM1 = outputM1 + 1600;
 8000a80:	4b2d      	ldr	r3, [pc, #180]	@ (8000b38 <StartTask02+0x1d0>)
 8000a82:	edd3 7a00 	vldr	s15, [r3]
 8000a86:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8000b3c <StartTask02+0x1d4>
 8000a8a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a92:	ee17 2a90 	vmov	r2, s15
 8000a96:	4b2a      	ldr	r3, [pc, #168]	@ (8000b40 <StartTask02+0x1d8>)
 8000a98:	601a      	str	r2, [r3, #0]
    	  }
      }
      if(0 > outputM1)
 8000a9a:	4b27      	ldr	r3, [pc, #156]	@ (8000b38 <StartTask02+0x1d0>)
 8000a9c:	edd3 7a00 	vldr	s15, [r3]
 8000aa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000aa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000aa8:	d51e      	bpl.n	8000ae8 <StartTask02+0x180>
      {
    	outputM1 += 1600;
 8000aaa:	4b23      	ldr	r3, [pc, #140]	@ (8000b38 <StartTask02+0x1d0>)
 8000aac:	edd3 7a00 	vldr	s15, [r3]
 8000ab0:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 8000b3c <StartTask02+0x1d4>
 8000ab4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8000b38 <StartTask02+0x1d0>)
 8000aba:	edc3 7a00 	vstr	s15, [r3]
		if(0 >= outputM1)
 8000abe:	4b1e      	ldr	r3, [pc, #120]	@ (8000b38 <StartTask02+0x1d0>)
 8000ac0:	edd3 7a00 	vldr	s15, [r3]
 8000ac4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000acc:	d803      	bhi.n	8000ad6 <StartTask02+0x16e>
		{
			realOutputM1 = 0;
 8000ace:	4b1c      	ldr	r3, [pc, #112]	@ (8000b40 <StartTask02+0x1d8>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	e008      	b.n	8000ae8 <StartTask02+0x180>
		}
		else
		{
			realOutputM1 = outputM1;
 8000ad6:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <StartTask02+0x1d0>)
 8000ad8:	edd3 7a00 	vldr	s15, [r3]
 8000adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000ae0:	ee17 2a90 	vmov	r2, s15
 8000ae4:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <StartTask02+0x1d8>)
 8000ae6:	601a      	str	r2, [r3, #0]
		}
      }

  	__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, realOutputM1);
 8000ae8:	4b15      	ldr	r3, [pc, #84]	@ (8000b40 <StartTask02+0x1d8>)
 8000aea:	681a      	ldr	r2, [r3, #0]
 8000aec:	4b15      	ldr	r3, [pc, #84]	@ (8000b44 <StartTask02+0x1dc>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	641a      	str	r2, [r3, #64]	@ 0x40
    osDelay(1);
 8000af2:	2001      	movs	r0, #1
 8000af4:	f003 fcc2 	bl	800447c <osDelay>
	  val1M1 = val2M1;
 8000af8:	e744      	b.n	8000984 <StartTask02+0x1c>
 8000afa:	bf00      	nop
 8000afc:	20000384 	.word	0x20000384
 8000b00:	20000380 	.word	0x20000380
 8000b04:	20000370 	.word	0x20000370
 8000b08:	20000388 	.word	0x20000388
 8000b0c:	2000038c 	.word	0x2000038c
 8000b10:	200003a4 	.word	0x200003a4
 8000b14:	46480000 	.word	0x46480000
 8000b18:	46480000 	.word	0x46480000
 8000b1c:	c6480000 	.word	0xc6480000
 8000b20:	c6480000 	.word	0xc6480000
 8000b24:	20000390 	.word	0x20000390
 8000b28:	200003a8 	.word	0x200003a8
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000394 	.word	0x20000394
 8000b34:	20000398 	.word	0x20000398
 8000b38:	2000039c 	.word	0x2000039c
 8000b3c:	44c80000 	.word	0x44c80000
 8000b40:	200003a0 	.word	0x200003a0
 8000b44:	200002d0 	.word	0x200002d0

08000b48 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	@ (8000b68 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b5a:	f000 fa05 	bl	8000f68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40001000 	.word	0x40001000

08000b6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b74:	bf00      	nop
 8000b76:	e7fd      	b.n	8000b74 <Error_Handler+0x8>

08000b78 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b11      	ldr	r3, [pc, #68]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	4a10      	ldr	r2, [pc, #64]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6193      	str	r3, [r2, #24]
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b08      	ldr	r3, [pc, #32]	@ (8000bc4 <HAL_MspInit+0x4c>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	210f      	movs	r1, #15
 8000bb2:	f06f 0001 	mvn.w	r0, #1
 8000bb6:	f000 faaf 	bl	8001118 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	40021000 	.word	0x40021000

08000bc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b087      	sub	sp, #28
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8000c48 <HAL_TIM_Base_MspInit+0x80>)
 8000bd6:	4293      	cmp	r3, r2
 8000bd8:	d10c      	bne.n	8000bf4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000bda:	4b1c      	ldr	r3, [pc, #112]	@ (8000c4c <HAL_TIM_Base_MspInit+0x84>)
 8000bdc:	699b      	ldr	r3, [r3, #24]
 8000bde:	4a1b      	ldr	r2, [pc, #108]	@ (8000c4c <HAL_TIM_Base_MspInit+0x84>)
 8000be0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000be4:	6193      	str	r3, [r2, #24]
 8000be6:	4b19      	ldr	r3, [pc, #100]	@ (8000c4c <HAL_TIM_Base_MspInit+0x84>)
 8000be8:	699b      	ldr	r3, [r3, #24]
 8000bea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000bf2:	e022      	b.n	8000c3a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000bfc:	d10c      	bne.n	8000c18 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bfe:	4b13      	ldr	r3, [pc, #76]	@ (8000c4c <HAL_TIM_Base_MspInit+0x84>)
 8000c00:	69db      	ldr	r3, [r3, #28]
 8000c02:	4a12      	ldr	r2, [pc, #72]	@ (8000c4c <HAL_TIM_Base_MspInit+0x84>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	61d3      	str	r3, [r2, #28]
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <HAL_TIM_Base_MspInit+0x84>)
 8000c0c:	69db      	ldr	r3, [r3, #28]
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	693b      	ldr	r3, [r7, #16]
}
 8000c16:	e010      	b.n	8000c3a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c50 <HAL_TIM_Base_MspInit+0x88>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d10b      	bne.n	8000c3a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c22:	4b0a      	ldr	r3, [pc, #40]	@ (8000c4c <HAL_TIM_Base_MspInit+0x84>)
 8000c24:	69db      	ldr	r3, [r3, #28]
 8000c26:	4a09      	ldr	r2, [pc, #36]	@ (8000c4c <HAL_TIM_Base_MspInit+0x84>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	61d3      	str	r3, [r2, #28]
 8000c2e:	4b07      	ldr	r3, [pc, #28]	@ (8000c4c <HAL_TIM_Base_MspInit+0x84>)
 8000c30:	69db      	ldr	r3, [r3, #28]
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
}
 8000c3a:	bf00      	nop
 8000c3c:	371c      	adds	r7, #28
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop
 8000c48:	40012c00 	.word	0x40012c00
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40000400 	.word	0x40000400

08000c54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	@ 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a34      	ldr	r2, [pc, #208]	@ (8000d44 <HAL_TIM_MspPostInit+0xf0>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d11d      	bne.n	8000cb2 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c76:	4b34      	ldr	r3, [pc, #208]	@ (8000d48 <HAL_TIM_MspPostInit+0xf4>)
 8000c78:	695b      	ldr	r3, [r3, #20]
 8000c7a:	4a33      	ldr	r2, [pc, #204]	@ (8000d48 <HAL_TIM_MspPostInit+0xf4>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c80:	6153      	str	r3, [r2, #20]
 8000c82:	4b31      	ldr	r3, [pc, #196]	@ (8000d48 <HAL_TIM_MspPostInit+0xf4>)
 8000c84:	695b      	ldr	r3, [r3, #20]
 8000c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA7     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000c8e:	2380      	movs	r3, #128	@ 0x80
 8000c90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c92:	2302      	movs	r3, #2
 8000c94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000c9e:	2306      	movs	r3, #6
 8000ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cac:	f000 fa5e 	bl	800116c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000cb0:	e044      	b.n	8000d3c <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM2)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cba:	d11d      	bne.n	8000cf8 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cbc:	4b22      	ldr	r3, [pc, #136]	@ (8000d48 <HAL_TIM_MspPostInit+0xf4>)
 8000cbe:	695b      	ldr	r3, [r3, #20]
 8000cc0:	4a21      	ldr	r2, [pc, #132]	@ (8000d48 <HAL_TIM_MspPostInit+0xf4>)
 8000cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cc6:	6153      	str	r3, [r2, #20]
 8000cc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d48 <HAL_TIM_MspPostInit+0xf4>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000cd4:	2308      	movs	r3, #8
 8000cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ce4:	2301      	movs	r3, #1
 8000ce6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f107 0314 	add.w	r3, r7, #20
 8000cec:	4619      	mov	r1, r3
 8000cee:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cf2:	f000 fa3b 	bl	800116c <HAL_GPIO_Init>
}
 8000cf6:	e021      	b.n	8000d3c <HAL_TIM_MspPostInit+0xe8>
  else if(htim->Instance==TIM3)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	@ (8000d4c <HAL_TIM_MspPostInit+0xf8>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d11c      	bne.n	8000d3c <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d02:	4b11      	ldr	r3, [pc, #68]	@ (8000d48 <HAL_TIM_MspPostInit+0xf4>)
 8000d04:	695b      	ldr	r3, [r3, #20]
 8000d06:	4a10      	ldr	r2, [pc, #64]	@ (8000d48 <HAL_TIM_MspPostInit+0xf4>)
 8000d08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d0c:	6153      	str	r3, [r2, #20]
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d48 <HAL_TIM_MspPostInit+0xf4>)
 8000d10:	695b      	ldr	r3, [r3, #20]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d16:	60bb      	str	r3, [r7, #8]
 8000d18:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000d1a:	2350      	movs	r3, #80	@ 0x50
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d38:	f000 fa18 	bl	800116c <HAL_GPIO_Init>
}
 8000d3c:	bf00      	nop
 8000d3e:	3728      	adds	r7, #40	@ 0x28
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	40012c00 	.word	0x40012c00
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	40000400 	.word	0x40000400

08000d50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	@ 0x38
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d60:	4b33      	ldr	r3, [pc, #204]	@ (8000e30 <HAL_InitTick+0xe0>)
 8000d62:	69db      	ldr	r3, [r3, #28]
 8000d64:	4a32      	ldr	r2, [pc, #200]	@ (8000e30 <HAL_InitTick+0xe0>)
 8000d66:	f043 0310 	orr.w	r3, r3, #16
 8000d6a:	61d3      	str	r3, [r2, #28]
 8000d6c:	4b30      	ldr	r3, [pc, #192]	@ (8000e30 <HAL_InitTick+0xe0>)
 8000d6e:	69db      	ldr	r3, [r3, #28]
 8000d70:	f003 0310 	and.w	r3, r3, #16
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d78:	f107 0210 	add.w	r2, r7, #16
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f001 fde8 	bl	8002958 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d88:	6a3b      	ldr	r3, [r7, #32]
 8000d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d103      	bne.n	8000d9a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d92:	f001 fdbf 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8000d96:	6378      	str	r0, [r7, #52]	@ 0x34
 8000d98:	e004      	b.n	8000da4 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d9a:	f001 fdbb 	bl	8002914 <HAL_RCC_GetPCLK1Freq>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000da6:	4a23      	ldr	r2, [pc, #140]	@ (8000e34 <HAL_InitTick+0xe4>)
 8000da8:	fba2 2303 	umull	r2, r3, r2, r3
 8000dac:	0c9b      	lsrs	r3, r3, #18
 8000dae:	3b01      	subs	r3, #1
 8000db0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000db2:	4b21      	ldr	r3, [pc, #132]	@ (8000e38 <HAL_InitTick+0xe8>)
 8000db4:	4a21      	ldr	r2, [pc, #132]	@ (8000e3c <HAL_InitTick+0xec>)
 8000db6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000db8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e38 <HAL_InitTick+0xe8>)
 8000dba:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000dbe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e38 <HAL_InitTick+0xe8>)
 8000dc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000dc4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	@ (8000e38 <HAL_InitTick+0xe8>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e38 <HAL_InitTick+0xe8>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	@ (8000e38 <HAL_InitTick+0xe8>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000dd8:	4817      	ldr	r0, [pc, #92]	@ (8000e38 <HAL_InitTick+0xe8>)
 8000dda:	f001 ff15 	bl	8002c08 <HAL_TIM_Base_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000de4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d11b      	bne.n	8000e24 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000dec:	4812      	ldr	r0, [pc, #72]	@ (8000e38 <HAL_InitTick+0xe8>)
 8000dee:	f001 ff63 	bl	8002cb8 <HAL_TIM_Base_Start_IT>
 8000df2:	4603      	mov	r3, r0
 8000df4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000df8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d111      	bne.n	8000e24 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000e00:	2036      	movs	r0, #54	@ 0x36
 8000e02:	f000 f9a5 	bl	8001150 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2b0f      	cmp	r3, #15
 8000e0a:	d808      	bhi.n	8000e1e <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, TickPriority, 0U);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	6879      	ldr	r1, [r7, #4]
 8000e10:	2036      	movs	r0, #54	@ 0x36
 8000e12:	f000 f981 	bl	8001118 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <HAL_InitTick+0xf0>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6013      	str	r3, [r2, #0]
 8000e1c:	e002      	b.n	8000e24 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e24:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3738      	adds	r7, #56	@ 0x38
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	431bde83 	.word	0x431bde83
 8000e38:	200003ac 	.word	0x200003ac
 8000e3c:	40001000 	.word	0x40001000
 8000e40:	20000008 	.word	0x20000008

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e48:	bf00      	nop
 8000e4a:	e7fd      	b.n	8000e48 <NMI_Handler+0x4>

08000e4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e50:	bf00      	nop
 8000e52:	e7fd      	b.n	8000e50 <HardFault_Handler+0x4>

08000e54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e58:	bf00      	nop
 8000e5a:	e7fd      	b.n	8000e58 <MemManage_Handler+0x4>

08000e5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e60:	bf00      	nop
 8000e62:	e7fd      	b.n	8000e60 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	bf00      	nop
 8000e6a:	e7fd      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000e7e:	2001      	movs	r0, #1
 8000e80:	f000 fb16 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}

08000e88 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000e8c:	2002      	movs	r0, #2
 8000e8e:	f000 fb0f 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e92:	bf00      	nop
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000e9a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000e9e:	f000 fb07 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000ea2:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8000ea6:	f000 fb03 	bl	80014b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
	...

08000eb0 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000eb4:	4802      	ldr	r0, [pc, #8]	@ (8000ec0 <TIM6_DAC1_IRQHandler+0x10>)
 8000eb6:	f002 f8a9 	bl	800300c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200003ac 	.word	0x200003ac

08000ec4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ec8:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <SystemInit+0x20>)
 8000eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ece:	4a05      	ldr	r2, [pc, #20]	@ (8000ee4 <SystemInit+0x20>)
 8000ed0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ed4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ee8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f20 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eec:	f7ff ffea 	bl	8000ec4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ef0:	480c      	ldr	r0, [pc, #48]	@ (8000f24 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ef2:	490d      	ldr	r1, [pc, #52]	@ (8000f28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	@ (8000f2c <LoopForever+0xe>)
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ef8:	e002      	b.n	8000f00 <LoopCopyDataInit>

08000efa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000efa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000efc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000efe:	3304      	adds	r3, #4

08000f00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f04:	d3f9      	bcc.n	8000efa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f06:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f08:	4c0a      	ldr	r4, [pc, #40]	@ (8000f34 <LoopForever+0x16>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f0c:	e001      	b.n	8000f12 <LoopFillZerobss>

08000f0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f10:	3204      	adds	r2, #4

08000f12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f14:	d3fb      	bcc.n	8000f0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f16:	f004 fc9f 	bl	8005858 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f1a:	f7ff fa07 	bl	800032c <main>

08000f1e <LoopForever>:

LoopForever:
    b LoopForever
 8000f1e:	e7fe      	b.n	8000f1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000f20:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000f24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f28:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000f2c:	0800594c 	.word	0x0800594c
  ldr r2, =_sbss
 8000f30:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000f34:	20001148 	.word	0x20001148

08000f38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f38:	e7fe      	b.n	8000f38 <ADC1_2_IRQHandler>
	...

08000f3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f40:	4b08      	ldr	r3, [pc, #32]	@ (8000f64 <HAL_Init+0x28>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <HAL_Init+0x28>)
 8000f46:	f043 0310 	orr.w	r3, r3, #16
 8000f4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f4c:	2003      	movs	r0, #3
 8000f4e:	f000 f8d8 	bl	8001102 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f52:	200f      	movs	r0, #15
 8000f54:	f7ff fefc 	bl	8000d50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f58:	f7ff fe0e 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40022000 	.word	0x40022000

08000f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f6c:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <HAL_IncTick+0x20>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	4a04      	ldr	r2, [pc, #16]	@ (8000f8c <HAL_IncTick+0x24>)
 8000f7a:	6013      	str	r3, [r2, #0]
}
 8000f7c:	bf00      	nop
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop
 8000f88:	2000000c 	.word	0x2000000c
 8000f8c:	200003f8 	.word	0x200003f8

08000f90 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  return uwTick;  
 8000f94:	4b03      	ldr	r3, [pc, #12]	@ (8000fa4 <HAL_GetTick+0x14>)
 8000f96:	681b      	ldr	r3, [r3, #0]
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200003f8 	.word	0x200003f8

08000fa8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f003 0307 	and.w	r3, r3, #7
 8000fb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fba:	68db      	ldr	r3, [r3, #12]
 8000fbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fd0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fda:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <__NVIC_SetPriorityGrouping+0x44>)
 8000fdc:	68bb      	ldr	r3, [r7, #8]
 8000fde:	60d3      	str	r3, [r2, #12]
}
 8000fe0:	bf00      	nop
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	e000ed00 	.word	0xe000ed00

08000ff0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ff4:	4b04      	ldr	r3, [pc, #16]	@ (8001008 <__NVIC_GetPriorityGrouping+0x18>)
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	0a1b      	lsrs	r3, r3, #8
 8000ffa:	f003 0307 	and.w	r3, r3, #7
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101a:	2b00      	cmp	r3, #0
 800101c:	db0b      	blt.n	8001036 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	f003 021f 	and.w	r2, r3, #31
 8001024:	4907      	ldr	r1, [pc, #28]	@ (8001044 <__NVIC_EnableIRQ+0x38>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	2001      	movs	r0, #1
 800102e:	fa00 f202 	lsl.w	r2, r0, r2
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	e000e100 	.word	0xe000e100

08001048 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	6039      	str	r1, [r7, #0]
 8001052:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001054:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001058:	2b00      	cmp	r3, #0
 800105a:	db0a      	blt.n	8001072 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	b2da      	uxtb	r2, r3
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <__NVIC_SetPriority+0x4c>)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	0112      	lsls	r2, r2, #4
 8001068:	b2d2      	uxtb	r2, r2
 800106a:	440b      	add	r3, r1
 800106c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001070:	e00a      	b.n	8001088 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	b2da      	uxtb	r2, r3
 8001076:	4908      	ldr	r1, [pc, #32]	@ (8001098 <__NVIC_SetPriority+0x50>)
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	f003 030f 	and.w	r3, r3, #15
 800107e:	3b04      	subs	r3, #4
 8001080:	0112      	lsls	r2, r2, #4
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	440b      	add	r3, r1
 8001086:	761a      	strb	r2, [r3, #24]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr
 8001094:	e000e100 	.word	0xe000e100
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800109c:	b480      	push	{r7}
 800109e:	b089      	sub	sp, #36	@ 0x24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	60b9      	str	r1, [r7, #8]
 80010a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010b0:	69fb      	ldr	r3, [r7, #28]
 80010b2:	f1c3 0307 	rsb	r3, r3, #7
 80010b6:	2b04      	cmp	r3, #4
 80010b8:	bf28      	it	cs
 80010ba:	2304      	movcs	r3, #4
 80010bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	3304      	adds	r3, #4
 80010c2:	2b06      	cmp	r3, #6
 80010c4:	d902      	bls.n	80010cc <NVIC_EncodePriority+0x30>
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	3b03      	subs	r3, #3
 80010ca:	e000      	b.n	80010ce <NVIC_EncodePriority+0x32>
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010d0:	f04f 32ff 	mov.w	r2, #4294967295
 80010d4:	69bb      	ldr	r3, [r7, #24]
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43da      	mvns	r2, r3
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	401a      	ands	r2, r3
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010e4:	f04f 31ff 	mov.w	r1, #4294967295
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	fa01 f303 	lsl.w	r3, r1, r3
 80010ee:	43d9      	mvns	r1, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010f4:	4313      	orrs	r3, r2
         );
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	3724      	adds	r7, #36	@ 0x24
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ff4c 	bl	8000fa8 <__NVIC_SetPriorityGrouping>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b086      	sub	sp, #24
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800112a:	f7ff ff61 	bl	8000ff0 <__NVIC_GetPriorityGrouping>
 800112e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	68b9      	ldr	r1, [r7, #8]
 8001134:	6978      	ldr	r0, [r7, #20]
 8001136:	f7ff ffb1 	bl	800109c <NVIC_EncodePriority>
 800113a:	4602      	mov	r2, r0
 800113c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001140:	4611      	mov	r1, r2
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff80 	bl	8001048 <__NVIC_SetPriority>
}
 8001148:	bf00      	nop
 800114a:	3718      	adds	r7, #24
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800115a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ff54 	bl	800100c <__NVIC_EnableIRQ>
}
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}

0800116c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800116c:	b480      	push	{r7}
 800116e:	b087      	sub	sp, #28
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
 8001174:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001176:	2300      	movs	r3, #0
 8001178:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800117a:	e14e      	b.n	800141a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2101      	movs	r1, #1
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	fa01 f303 	lsl.w	r3, r1, r3
 8001188:	4013      	ands	r3, r2
 800118a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8140 	beq.w	8001414 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f003 0303 	and.w	r3, r3, #3
 800119c:	2b01      	cmp	r3, #1
 800119e:	d005      	beq.n	80011ac <HAL_GPIO_Init+0x40>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f003 0303 	and.w	r3, r3, #3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d130      	bne.n	800120e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	689b      	ldr	r3, [r3, #8]
 80011b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	2203      	movs	r2, #3
 80011b8:	fa02 f303 	lsl.w	r3, r2, r3
 80011bc:	43db      	mvns	r3, r3
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	4013      	ands	r3, r2
 80011c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	68da      	ldr	r2, [r3, #12]
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	693a      	ldr	r2, [r7, #16]
 80011d2:	4313      	orrs	r3, r2
 80011d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e2:	2201      	movs	r2, #1
 80011e4:	697b      	ldr	r3, [r7, #20]
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	693a      	ldr	r2, [r7, #16]
 80011ee:	4013      	ands	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	091b      	lsrs	r3, r3, #4
 80011f8:	f003 0201 	and.w	r2, r3, #1
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	4313      	orrs	r3, r2
 8001206:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f003 0303 	and.w	r3, r3, #3
 8001216:	2b03      	cmp	r3, #3
 8001218:	d017      	beq.n	800124a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	68db      	ldr	r3, [r3, #12]
 800121e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	2203      	movs	r2, #3
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	697b      	ldr	r3, [r7, #20]
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4313      	orrs	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 0303 	and.w	r3, r3, #3
 8001252:	2b02      	cmp	r3, #2
 8001254:	d123      	bne.n	800129e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001256:	697b      	ldr	r3, [r7, #20]
 8001258:	08da      	lsrs	r2, r3, #3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	3208      	adds	r2, #8
 800125e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001262:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	009b      	lsls	r3, r3, #2
 800126c:	220f      	movs	r2, #15
 800126e:	fa02 f303 	lsl.w	r3, r2, r3
 8001272:	43db      	mvns	r3, r3
 8001274:	693a      	ldr	r2, [r7, #16]
 8001276:	4013      	ands	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691a      	ldr	r2, [r3, #16]
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	f003 0307 	and.w	r3, r3, #7
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4313      	orrs	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	08da      	lsrs	r2, r3, #3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3208      	adds	r2, #8
 8001298:	6939      	ldr	r1, [r7, #16]
 800129a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	005b      	lsls	r3, r3, #1
 80012a8:	2203      	movs	r2, #3
 80012aa:	fa02 f303 	lsl.w	r3, r2, r3
 80012ae:	43db      	mvns	r3, r3
 80012b0:	693a      	ldr	r2, [r7, #16]
 80012b2:	4013      	ands	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	f003 0203 	and.w	r2, r3, #3
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	005b      	lsls	r3, r3, #1
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	4313      	orrs	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	f000 809a 	beq.w	8001414 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e0:	4b55      	ldr	r3, [pc, #340]	@ (8001438 <HAL_GPIO_Init+0x2cc>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a54      	ldr	r2, [pc, #336]	@ (8001438 <HAL_GPIO_Init+0x2cc>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b52      	ldr	r3, [pc, #328]	@ (8001438 <HAL_GPIO_Init+0x2cc>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f003 0301 	and.w	r3, r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012f8:	4a50      	ldr	r2, [pc, #320]	@ (800143c <HAL_GPIO_Init+0x2d0>)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	089b      	lsrs	r3, r3, #2
 80012fe:	3302      	adds	r3, #2
 8001300:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001304:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	220f      	movs	r2, #15
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43db      	mvns	r3, r3
 8001316:	693a      	ldr	r2, [r7, #16]
 8001318:	4013      	ands	r3, r2
 800131a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001322:	d013      	beq.n	800134c <HAL_GPIO_Init+0x1e0>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a46      	ldr	r2, [pc, #280]	@ (8001440 <HAL_GPIO_Init+0x2d4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d00d      	beq.n	8001348 <HAL_GPIO_Init+0x1dc>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a45      	ldr	r2, [pc, #276]	@ (8001444 <HAL_GPIO_Init+0x2d8>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d007      	beq.n	8001344 <HAL_GPIO_Init+0x1d8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a44      	ldr	r2, [pc, #272]	@ (8001448 <HAL_GPIO_Init+0x2dc>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d101      	bne.n	8001340 <HAL_GPIO_Init+0x1d4>
 800133c:	2303      	movs	r3, #3
 800133e:	e006      	b.n	800134e <HAL_GPIO_Init+0x1e2>
 8001340:	2305      	movs	r3, #5
 8001342:	e004      	b.n	800134e <HAL_GPIO_Init+0x1e2>
 8001344:	2302      	movs	r3, #2
 8001346:	e002      	b.n	800134e <HAL_GPIO_Init+0x1e2>
 8001348:	2301      	movs	r3, #1
 800134a:	e000      	b.n	800134e <HAL_GPIO_Init+0x1e2>
 800134c:	2300      	movs	r3, #0
 800134e:	697a      	ldr	r2, [r7, #20]
 8001350:	f002 0203 	and.w	r2, r2, #3
 8001354:	0092      	lsls	r2, r2, #2
 8001356:	4093      	lsls	r3, r2
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4313      	orrs	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800135e:	4937      	ldr	r1, [pc, #220]	@ (800143c <HAL_GPIO_Init+0x2d0>)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	089b      	lsrs	r3, r3, #2
 8001364:	3302      	adds	r3, #2
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800136c:	4b37      	ldr	r3, [pc, #220]	@ (800144c <HAL_GPIO_Init+0x2e0>)
 800136e:	689b      	ldr	r3, [r3, #8]
 8001370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	43db      	mvns	r3, r3
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	4013      	ands	r3, r2
 800137a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001384:	2b00      	cmp	r3, #0
 8001386:	d003      	beq.n	8001390 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001388:	693a      	ldr	r2, [r7, #16]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4313      	orrs	r3, r2
 800138e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001390:	4a2e      	ldr	r2, [pc, #184]	@ (800144c <HAL_GPIO_Init+0x2e0>)
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001396:	4b2d      	ldr	r3, [pc, #180]	@ (800144c <HAL_GPIO_Init+0x2e0>)
 8001398:	68db      	ldr	r3, [r3, #12]
 800139a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d003      	beq.n	80013ba <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80013ba:	4a24      	ldr	r2, [pc, #144]	@ (800144c <HAL_GPIO_Init+0x2e0>)
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013c0:	4b22      	ldr	r3, [pc, #136]	@ (800144c <HAL_GPIO_Init+0x2e0>)
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43db      	mvns	r3, r3
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4013      	ands	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4313      	orrs	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013e4:	4a19      	ldr	r2, [pc, #100]	@ (800144c <HAL_GPIO_Init+0x2e0>)
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ea:	4b18      	ldr	r3, [pc, #96]	@ (800144c <HAL_GPIO_Init+0x2e0>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	43db      	mvns	r3, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4013      	ands	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4313      	orrs	r3, r2
 800140c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800140e:	4a0f      	ldr	r2, [pc, #60]	@ (800144c <HAL_GPIO_Init+0x2e0>)
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	3301      	adds	r3, #1
 8001418:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa22 f303 	lsr.w	r3, r2, r3
 8001424:	2b00      	cmp	r3, #0
 8001426:	f47f aea9 	bne.w	800117c <HAL_GPIO_Init+0x10>
  }
}
 800142a:	bf00      	nop
 800142c:	bf00      	nop
 800142e:	371c      	adds	r7, #28
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr
 8001438:	40021000 	.word	0x40021000
 800143c:	40010000 	.word	0x40010000
 8001440:	48000400 	.word	0x48000400
 8001444:	48000800 	.word	0x48000800
 8001448:	48000c00 	.word	0x48000c00
 800144c:	40010400 	.word	0x40010400

08001450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001450:	b480      	push	{r7}
 8001452:	b085      	sub	sp, #20
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	460b      	mov	r3, r1
 800145a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	691a      	ldr	r2, [r3, #16]
 8001460:	887b      	ldrh	r3, [r7, #2]
 8001462:	4013      	ands	r3, r2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d002      	beq.n	800146e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001468:	2301      	movs	r3, #1
 800146a:	73fb      	strb	r3, [r7, #15]
 800146c:	e001      	b.n	8001472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001472:	7bfb      	ldrb	r3, [r7, #15]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80014ba:	4b08      	ldr	r3, [pc, #32]	@ (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014bc:	695a      	ldr	r2, [r3, #20]
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	4013      	ands	r3, r2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014c6:	4a05      	ldr	r2, [pc, #20]	@ (80014dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014cc:	88fb      	ldrh	r3, [r7, #6]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7fe feb8 	bl	8000244 <HAL_GPIO_EXTI_Callback>
  }
}
 80014d4:	bf00      	nop
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40010400 	.word	0x40010400

080014e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014f0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80014f6:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d102      	bne.n	8001506 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	f001 b823 	b.w	800254c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001506:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800150a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 817d 	beq.w	8001816 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800151c:	4bbc      	ldr	r3, [pc, #752]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b04      	cmp	r3, #4
 8001526:	d00c      	beq.n	8001542 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001528:	4bb9      	ldr	r3, [pc, #740]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 030c 	and.w	r3, r3, #12
 8001530:	2b08      	cmp	r3, #8
 8001532:	d15c      	bne.n	80015ee <HAL_RCC_OscConfig+0x10e>
 8001534:	4bb6      	ldr	r3, [pc, #728]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800153c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001540:	d155      	bne.n	80015ee <HAL_RCC_OscConfig+0x10e>
 8001542:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001546:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800154a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 800154e:	fa93 f3a3 	rbit	r3, r3
 8001552:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001556:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155a:	fab3 f383 	clz	r3, r3
 800155e:	b2db      	uxtb	r3, r3
 8001560:	095b      	lsrs	r3, r3, #5
 8001562:	b2db      	uxtb	r3, r3
 8001564:	f043 0301 	orr.w	r3, r3, #1
 8001568:	b2db      	uxtb	r3, r3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d102      	bne.n	8001574 <HAL_RCC_OscConfig+0x94>
 800156e:	4ba8      	ldr	r3, [pc, #672]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	e015      	b.n	80015a0 <HAL_RCC_OscConfig+0xc0>
 8001574:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001578:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 8001580:	fa93 f3a3 	rbit	r3, r3
 8001584:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001588:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800158c:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001590:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 800159c:	4b9c      	ldr	r3, [pc, #624]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80015a4:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80015a8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80015ac:	fa92 f2a2 	rbit	r2, r2
 80015b0:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80015b4:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80015b8:	fab2 f282 	clz	r2, r2
 80015bc:	b2d2      	uxtb	r2, r2
 80015be:	f042 0220 	orr.w	r2, r2, #32
 80015c2:	b2d2      	uxtb	r2, r2
 80015c4:	f002 021f 	and.w	r2, r2, #31
 80015c8:	2101      	movs	r1, #1
 80015ca:	fa01 f202 	lsl.w	r2, r1, r2
 80015ce:	4013      	ands	r3, r2
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	f000 811f 	beq.w	8001814 <HAL_RCC_OscConfig+0x334>
 80015d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015da:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	f040 8116 	bne.w	8001814 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80015e8:	2301      	movs	r3, #1
 80015ea:	f000 bfaf 	b.w	800254c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015ee:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80015f2:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015fe:	d106      	bne.n	800160e <HAL_RCC_OscConfig+0x12e>
 8001600:	4b83      	ldr	r3, [pc, #524]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a82      	ldr	r2, [pc, #520]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001606:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800160a:	6013      	str	r3, [r2, #0]
 800160c:	e036      	b.n	800167c <HAL_RCC_OscConfig+0x19c>
 800160e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001612:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d10c      	bne.n	8001638 <HAL_RCC_OscConfig+0x158>
 800161e:	4b7c      	ldr	r3, [pc, #496]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a7b      	ldr	r2, [pc, #492]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001624:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001628:	6013      	str	r3, [r2, #0]
 800162a:	4b79      	ldr	r3, [pc, #484]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a78      	ldr	r2, [pc, #480]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001630:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001634:	6013      	str	r3, [r2, #0]
 8001636:	e021      	b.n	800167c <HAL_RCC_OscConfig+0x19c>
 8001638:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800163c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x184>
 800164a:	4b71      	ldr	r3, [pc, #452]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a70      	ldr	r2, [pc, #448]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001650:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b6e      	ldr	r3, [pc, #440]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a6d      	ldr	r2, [pc, #436]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x19c>
 8001664:	4b6a      	ldr	r3, [pc, #424]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a69      	ldr	r2, [pc, #420]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 800166a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800166e:	6013      	str	r3, [r2, #0]
 8001670:	4b67      	ldr	r3, [pc, #412]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a66      	ldr	r2, [pc, #408]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001676:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800167a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800167c:	4b64      	ldr	r3, [pc, #400]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 800167e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001680:	f023 020f 	bic.w	r2, r3, #15
 8001684:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001688:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689b      	ldr	r3, [r3, #8]
 8001690:	495f      	ldr	r1, [pc, #380]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001692:	4313      	orrs	r3, r2
 8001694:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001696:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800169a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d059      	beq.n	800175a <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff fc73 	bl	8000f90 <HAL_GetTick>
 80016aa:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e00a      	b.n	80016c6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b0:	f7ff fc6e 	bl	8000f90 <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80016ba:	1ad3      	subs	r3, r2, r3
 80016bc:	2b64      	cmp	r3, #100	@ 0x64
 80016be:	d902      	bls.n	80016c6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80016c0:	2303      	movs	r3, #3
 80016c2:	f000 bf43 	b.w	800254c <HAL_RCC_OscConfig+0x106c>
 80016c6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016ca:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 80016d2:	fa93 f3a3 	rbit	r3, r3
 80016d6:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 80016da:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016de:	fab3 f383 	clz	r3, r3
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	095b      	lsrs	r3, r3, #5
 80016e6:	b2db      	uxtb	r3, r3
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b01      	cmp	r3, #1
 80016f0:	d102      	bne.n	80016f8 <HAL_RCC_OscConfig+0x218>
 80016f2:	4b47      	ldr	r3, [pc, #284]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	e015      	b.n	8001724 <HAL_RCC_OscConfig+0x244>
 80016f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80016fc:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001700:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8001704:	fa93 f3a3 	rbit	r3, r3
 8001708:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 800170c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001710:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001714:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8001718:	fa93 f3a3 	rbit	r3, r3
 800171c:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8001720:	4b3b      	ldr	r3, [pc, #236]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 8001722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001724:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001728:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 800172c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8001730:	fa92 f2a2 	rbit	r2, r2
 8001734:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8001738:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 800173c:	fab2 f282 	clz	r2, r2
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	f042 0220 	orr.w	r2, r2, #32
 8001746:	b2d2      	uxtb	r2, r2
 8001748:	f002 021f 	and.w	r2, r2, #31
 800174c:	2101      	movs	r1, #1
 800174e:	fa01 f202 	lsl.w	r2, r1, r2
 8001752:	4013      	ands	r3, r2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d0ab      	beq.n	80016b0 <HAL_RCC_OscConfig+0x1d0>
 8001758:	e05d      	b.n	8001816 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800175a:	f7ff fc19 	bl	8000f90 <HAL_GetTick>
 800175e:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	e00a      	b.n	800177a <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001764:	f7ff fc14 	bl	8000f90 <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b64      	cmp	r3, #100	@ 0x64
 8001772:	d902      	bls.n	800177a <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	f000 bee9 	b.w	800254c <HAL_RCC_OscConfig+0x106c>
 800177a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800177e:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001782:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 800178e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001792:	fab3 f383 	clz	r3, r3
 8001796:	b2db      	uxtb	r3, r3
 8001798:	095b      	lsrs	r3, r3, #5
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	b2db      	uxtb	r3, r3
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d102      	bne.n	80017ac <HAL_RCC_OscConfig+0x2cc>
 80017a6:	4b1a      	ldr	r3, [pc, #104]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	e015      	b.n	80017d8 <HAL_RCC_OscConfig+0x2f8>
 80017ac:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017b0:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80017b8:	fa93 f3a3 	rbit	r3, r3
 80017bc:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 80017c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80017c4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80017c8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 80017d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001810 <HAL_RCC_OscConfig+0x330>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017d8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80017dc:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 80017e0:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80017e4:	fa92 f2a2 	rbit	r2, r2
 80017e8:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 80017ec:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 80017f0:	fab2 f282 	clz	r2, r2
 80017f4:	b2d2      	uxtb	r2, r2
 80017f6:	f042 0220 	orr.w	r2, r2, #32
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d1ab      	bne.n	8001764 <HAL_RCC_OscConfig+0x284>
 800180c:	e003      	b.n	8001816 <HAL_RCC_OscConfig+0x336>
 800180e:	bf00      	nop
 8001810:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001814:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001816:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800181a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	f000 817d 	beq.w	8001b26 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800182c:	4ba6      	ldr	r3, [pc, #664]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 030c 	and.w	r3, r3, #12
 8001834:	2b00      	cmp	r3, #0
 8001836:	d00b      	beq.n	8001850 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001838:	4ba3      	ldr	r3, [pc, #652]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 030c 	and.w	r3, r3, #12
 8001840:	2b08      	cmp	r3, #8
 8001842:	d172      	bne.n	800192a <HAL_RCC_OscConfig+0x44a>
 8001844:	4ba0      	ldr	r3, [pc, #640]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d16c      	bne.n	800192a <HAL_RCC_OscConfig+0x44a>
 8001850:	2302      	movs	r3, #2
 8001852:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001856:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800185a:	fa93 f3a3 	rbit	r3, r3
 800185e:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8001862:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001866:	fab3 f383 	clz	r3, r3
 800186a:	b2db      	uxtb	r3, r3
 800186c:	095b      	lsrs	r3, r3, #5
 800186e:	b2db      	uxtb	r3, r3
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b01      	cmp	r3, #1
 8001878:	d102      	bne.n	8001880 <HAL_RCC_OscConfig+0x3a0>
 800187a:	4b93      	ldr	r3, [pc, #588]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	e013      	b.n	80018a8 <HAL_RCC_OscConfig+0x3c8>
 8001880:	2302      	movs	r3, #2
 8001882:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001886:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 800188a:	fa93 f3a3 	rbit	r3, r3
 800188e:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8001892:	2302      	movs	r3, #2
 8001894:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001898:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 800189c:	fa93 f3a3 	rbit	r3, r3
 80018a0:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 80018a4:	4b88      	ldr	r3, [pc, #544]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 80018a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018a8:	2202      	movs	r2, #2
 80018aa:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 80018ae:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 80018b2:	fa92 f2a2 	rbit	r2, r2
 80018b6:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 80018ba:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 80018be:	fab2 f282 	clz	r2, r2
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	f042 0220 	orr.w	r2, r2, #32
 80018c8:	b2d2      	uxtb	r2, r2
 80018ca:	f002 021f 	and.w	r2, r2, #31
 80018ce:	2101      	movs	r1, #1
 80018d0:	fa01 f202 	lsl.w	r2, r1, r2
 80018d4:	4013      	ands	r3, r2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00a      	beq.n	80018f0 <HAL_RCC_OscConfig+0x410>
 80018da:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018de:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d002      	beq.n	80018f0 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	f000 be2e 	b.w	800254c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018f0:	4b75      	ldr	r3, [pc, #468]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80018fc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	695b      	ldr	r3, [r3, #20]
 8001904:	21f8      	movs	r1, #248	@ 0xf8
 8001906:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800190e:	fa91 f1a1 	rbit	r1, r1
 8001912:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8001916:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 800191a:	fab1 f181 	clz	r1, r1
 800191e:	b2c9      	uxtb	r1, r1
 8001920:	408b      	lsls	r3, r1
 8001922:	4969      	ldr	r1, [pc, #420]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 8001924:	4313      	orrs	r3, r2
 8001926:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001928:	e0fd      	b.n	8001b26 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800192a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800192e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 8088 	beq.w	8001a4c <HAL_RCC_OscConfig+0x56c>
 800193c:	2301      	movs	r3, #1
 800193e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8001946:	fa93 f3a3 	rbit	r3, r3
 800194a:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 800194e:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001952:	fab3 f383 	clz	r3, r3
 8001956:	b2db      	uxtb	r3, r3
 8001958:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800195c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	461a      	mov	r2, r3
 8001964:	2301      	movs	r3, #1
 8001966:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001968:	f7ff fb12 	bl	8000f90 <HAL_GetTick>
 800196c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	e00a      	b.n	8001988 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001972:	f7ff fb0d 	bl	8000f90 <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	2b02      	cmp	r3, #2
 8001980:	d902      	bls.n	8001988 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	f000 bde2 	b.w	800254c <HAL_RCC_OscConfig+0x106c>
 8001988:	2302      	movs	r3, #2
 800198a:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198e:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8001992:	fa93 f3a3 	rbit	r3, r3
 8001996:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 800199a:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	095b      	lsrs	r3, r3, #5
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	f043 0301 	orr.w	r3, r3, #1
 80019ac:	b2db      	uxtb	r3, r3
 80019ae:	2b01      	cmp	r3, #1
 80019b0:	d102      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4d8>
 80019b2:	4b45      	ldr	r3, [pc, #276]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	e013      	b.n	80019e0 <HAL_RCC_OscConfig+0x500>
 80019b8:	2302      	movs	r3, #2
 80019ba:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80019c2:	fa93 f3a3 	rbit	r3, r3
 80019c6:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 80019ca:	2302      	movs	r3, #2
 80019cc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80019d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 80019d4:	fa93 f3a3 	rbit	r3, r3
 80019d8:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 80019dc:	4b3a      	ldr	r3, [pc, #232]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 80019de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019e0:	2202      	movs	r2, #2
 80019e2:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 80019e6:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80019ea:	fa92 f2a2 	rbit	r2, r2
 80019ee:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 80019f2:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 80019f6:	fab2 f282 	clz	r2, r2
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	f042 0220 	orr.w	r2, r2, #32
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	f002 021f 	and.w	r2, r2, #31
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0af      	beq.n	8001972 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a12:	4b2d      	ldr	r3, [pc, #180]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001a1e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	21f8      	movs	r1, #248	@ 0xf8
 8001a28:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2c:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8001a30:	fa91 f1a1 	rbit	r1, r1
 8001a34:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8001a38:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8001a3c:	fab1 f181 	clz	r1, r1
 8001a40:	b2c9      	uxtb	r1, r1
 8001a42:	408b      	lsls	r3, r1
 8001a44:	4920      	ldr	r1, [pc, #128]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 8001a46:	4313      	orrs	r3, r2
 8001a48:	600b      	str	r3, [r1, #0]
 8001a4a:	e06c      	b.n	8001b26 <HAL_RCC_OscConfig+0x646>
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001a56:	fa93 f3a3 	rbit	r3, r3
 8001a5a:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8001a5e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a62:	fab3 f383 	clz	r3, r3
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001a6c:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	461a      	mov	r2, r3
 8001a74:	2300      	movs	r3, #0
 8001a76:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a78:	f7ff fa8a 	bl	8000f90 <HAL_GetTick>
 8001a7c:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a80:	e00a      	b.n	8001a98 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a82:	f7ff fa85 	bl	8000f90 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d902      	bls.n	8001a98 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	f000 bd5a 	b.w	800254c <HAL_RCC_OscConfig+0x106c>
 8001a98:	2302      	movs	r3, #2
 8001a9a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001aa2:	fa93 f3a3 	rbit	r3, r3
 8001aa6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8001aaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aae:	fab3 f383 	clz	r3, r3
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	095b      	lsrs	r3, r3, #5
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	b2db      	uxtb	r3, r3
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d104      	bne.n	8001acc <HAL_RCC_OscConfig+0x5ec>
 8001ac2:	4b01      	ldr	r3, [pc, #4]	@ (8001ac8 <HAL_RCC_OscConfig+0x5e8>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	e015      	b.n	8001af4 <HAL_RCC_OscConfig+0x614>
 8001ac8:	40021000 	.word	0x40021000
 8001acc:	2302      	movs	r3, #2
 8001ace:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ad2:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001ad6:	fa93 f3a3 	rbit	r3, r3
 8001ada:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001ade:	2302      	movs	r3, #2
 8001ae0:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001ae4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001ae8:	fa93 f3a3 	rbit	r3, r3
 8001aec:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8001af0:	4bc8      	ldr	r3, [pc, #800]	@ (8001e14 <HAL_RCC_OscConfig+0x934>)
 8001af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001af4:	2202      	movs	r2, #2
 8001af6:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8001afa:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001afe:	fa92 f2a2 	rbit	r2, r2
 8001b02:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8001b06:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8001b0a:	fab2 f282 	clz	r2, r2
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f042 0220 	orr.w	r2, r2, #32
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	f002 021f 	and.w	r2, r2, #31
 8001b1a:	2101      	movs	r1, #1
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	4013      	ands	r3, r2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ad      	bne.n	8001a82 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b26:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b2a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	f000 8110 	beq.w	8001d5c <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b3c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001b40:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d079      	beq.n	8001c40 <HAL_RCC_OscConfig+0x760>
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b52:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001b56:	fa93 f3a3 	rbit	r3, r3
 8001b5a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8001b5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b62:	fab3 f383 	clz	r3, r3
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4bab      	ldr	r3, [pc, #684]	@ (8001e18 <HAL_RCC_OscConfig+0x938>)
 8001b6c:	4413      	add	r3, r2
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	461a      	mov	r2, r3
 8001b72:	2301      	movs	r3, #1
 8001b74:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b76:	f7ff fa0b 	bl	8000f90 <HAL_GetTick>
 8001b7a:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7e:	e00a      	b.n	8001b96 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fa06 	bl	8000f90 <HAL_GetTick>
 8001b84:	4602      	mov	r2, r0
 8001b86:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d902      	bls.n	8001b96 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	f000 bcdb 	b.w	800254c <HAL_RCC_OscConfig+0x106c>
 8001b96:	2302      	movs	r3, #2
 8001b98:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b9c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8001ba0:	fa93 f3a3 	rbit	r3, r3
 8001ba4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001ba8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bb0:	2202      	movs	r2, #2
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bb8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	fa93 f2a3 	rbit	r2, r3
 8001bc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bc6:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bd0:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bdc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	fa93 f2a3 	rbit	r2, r3
 8001be6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bf0:	4b88      	ldr	r3, [pc, #544]	@ (8001e14 <HAL_RCC_OscConfig+0x934>)
 8001bf2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bf4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001bf8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001bfc:	2102      	movs	r1, #2
 8001bfe:	6019      	str	r1, [r3, #0]
 8001c00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c04:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	fa93 f1a3 	rbit	r1, r3
 8001c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c12:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c16:	6019      	str	r1, [r3, #0]
  return result;
 8001c18:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c1c:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	fab3 f383 	clz	r3, r3
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001c2c:	b2db      	uxtb	r3, r3
 8001c2e:	f003 031f 	and.w	r3, r3, #31
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	4013      	ands	r3, r2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0a0      	beq.n	8001b80 <HAL_RCC_OscConfig+0x6a0>
 8001c3e:	e08d      	b.n	8001d5c <HAL_RCC_OscConfig+0x87c>
 8001c40:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c44:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c48:	2201      	movs	r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c50:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	fa93 f2a3 	rbit	r2, r3
 8001c5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c5e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c62:	601a      	str	r2, [r3, #0]
  return result;
 8001c64:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001c68:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001c6c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c6e:	fab3 f383 	clz	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b68      	ldr	r3, [pc, #416]	@ (8001e18 <HAL_RCC_OscConfig+0x938>)
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	2300      	movs	r3, #0
 8001c80:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c82:	f7ff f985 	bl	8000f90 <HAL_GetTick>
 8001c86:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001c8c:	f7ff f980 	bl	8000f90 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001c96:	1ad3      	subs	r3, r2, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d902      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	f000 bc55 	b.w	800254c <HAL_RCC_OscConfig+0x106c>
 8001ca2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ca6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001caa:	2202      	movs	r2, #2
 8001cac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cb2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	fa93 f2a3 	rbit	r2, r3
 8001cbc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cc0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cca:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cce:	2202      	movs	r2, #2
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cd6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	fa93 f2a3 	rbit	r2, r3
 8001ce0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ce4:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cee:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001cfa:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	fa93 f2a3 	rbit	r2, r3
 8001d04:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d08:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001d0c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d0e:	4b41      	ldr	r3, [pc, #260]	@ (8001e14 <HAL_RCC_OscConfig+0x934>)
 8001d10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001d12:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d1a:	2102      	movs	r1, #2
 8001d1c:	6019      	str	r1, [r3, #0]
 8001d1e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d22:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	fa93 f1a3 	rbit	r1, r3
 8001d2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d30:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d34:	6019      	str	r1, [r3, #0]
  return result;
 8001d36:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d3a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	fab3 f383 	clz	r3, r3
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2101      	movs	r1, #1
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	4013      	ands	r3, r2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d197      	bne.n	8001c8c <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d60:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0304 	and.w	r3, r3, #4
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f000 81a1 	beq.w	80020b4 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d72:	2300      	movs	r3, #0
 8001d74:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d78:	4b26      	ldr	r3, [pc, #152]	@ (8001e14 <HAL_RCC_OscConfig+0x934>)
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d116      	bne.n	8001db2 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	4b23      	ldr	r3, [pc, #140]	@ (8001e14 <HAL_RCC_OscConfig+0x934>)
 8001d86:	69db      	ldr	r3, [r3, #28]
 8001d88:	4a22      	ldr	r2, [pc, #136]	@ (8001e14 <HAL_RCC_OscConfig+0x934>)
 8001d8a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d8e:	61d3      	str	r3, [r2, #28]
 8001d90:	4b20      	ldr	r3, [pc, #128]	@ (8001e14 <HAL_RCC_OscConfig+0x934>)
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001d98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001d9c:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001da0:	601a      	str	r2, [r3, #0]
 8001da2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001da6:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 8001daa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001dac:	2301      	movs	r3, #1
 8001dae:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e1c <HAL_RCC_OscConfig+0x93c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d11a      	bne.n	8001df4 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dbe:	4b17      	ldr	r3, [pc, #92]	@ (8001e1c <HAL_RCC_OscConfig+0x93c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a16      	ldr	r2, [pc, #88]	@ (8001e1c <HAL_RCC_OscConfig+0x93c>)
 8001dc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dc8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dca:	f7ff f8e1 	bl	8000f90 <HAL_GetTick>
 8001dce:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd2:	e009      	b.n	8001de8 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dd4:	f7ff f8dc 	bl	8000f90 <HAL_GetTick>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b64      	cmp	r3, #100	@ 0x64
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e3b1      	b.n	800254c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de8:	4b0c      	ldr	r3, [pc, #48]	@ (8001e1c <HAL_RCC_OscConfig+0x93c>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d0ef      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001df8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	68db      	ldr	r3, [r3, #12]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d10d      	bne.n	8001e20 <HAL_RCC_OscConfig+0x940>
 8001e04:	4b03      	ldr	r3, [pc, #12]	@ (8001e14 <HAL_RCC_OscConfig+0x934>)
 8001e06:	6a1b      	ldr	r3, [r3, #32]
 8001e08:	4a02      	ldr	r2, [pc, #8]	@ (8001e14 <HAL_RCC_OscConfig+0x934>)
 8001e0a:	f043 0301 	orr.w	r3, r3, #1
 8001e0e:	6213      	str	r3, [r2, #32]
 8001e10:	e03c      	b.n	8001e8c <HAL_RCC_OscConfig+0x9ac>
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	10908120 	.word	0x10908120
 8001e1c:	40007000 	.word	0x40007000
 8001e20:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e24:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d10c      	bne.n	8001e4a <HAL_RCC_OscConfig+0x96a>
 8001e30:	4bc1      	ldr	r3, [pc, #772]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e32:	6a1b      	ldr	r3, [r3, #32]
 8001e34:	4ac0      	ldr	r2, [pc, #768]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e36:	f023 0301 	bic.w	r3, r3, #1
 8001e3a:	6213      	str	r3, [r2, #32]
 8001e3c:	4bbe      	ldr	r3, [pc, #760]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e3e:	6a1b      	ldr	r3, [r3, #32]
 8001e40:	4abd      	ldr	r2, [pc, #756]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e42:	f023 0304 	bic.w	r3, r3, #4
 8001e46:	6213      	str	r3, [r2, #32]
 8001e48:	e020      	b.n	8001e8c <HAL_RCC_OscConfig+0x9ac>
 8001e4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68db      	ldr	r3, [r3, #12]
 8001e56:	2b05      	cmp	r3, #5
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCC_OscConfig+0x994>
 8001e5a:	4bb7      	ldr	r3, [pc, #732]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	4ab6      	ldr	r2, [pc, #728]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	6213      	str	r3, [r2, #32]
 8001e66:	4bb4      	ldr	r3, [pc, #720]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e68:	6a1b      	ldr	r3, [r3, #32]
 8001e6a:	4ab3      	ldr	r2, [pc, #716]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e6c:	f043 0301 	orr.w	r3, r3, #1
 8001e70:	6213      	str	r3, [r2, #32]
 8001e72:	e00b      	b.n	8001e8c <HAL_RCC_OscConfig+0x9ac>
 8001e74:	4bb0      	ldr	r3, [pc, #704]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e76:	6a1b      	ldr	r3, [r3, #32]
 8001e78:	4aaf      	ldr	r2, [pc, #700]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	6213      	str	r3, [r2, #32]
 8001e80:	4bad      	ldr	r3, [pc, #692]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	4aac      	ldr	r2, [pc, #688]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001e86:	f023 0304 	bic.w	r3, r3, #4
 8001e8a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e8c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001e90:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	f000 8081 	beq.w	8001fa0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7ff f877 	bl	8000f90 <HAL_GetTick>
 8001ea2:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea6:	e00b      	b.n	8001ec0 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ea8:	f7ff f872 	bl	8000f90 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d901      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8001ebc:	2303      	movs	r3, #3
 8001ebe:	e345      	b.n	800254c <HAL_RCC_OscConfig+0x106c>
 8001ec0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ec4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ec8:	2202      	movs	r2, #2
 8001eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ed0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	fa93 f2a3 	rbit	r2, r3
 8001eda:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ede:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ee8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001eec:	2202      	movs	r2, #2
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ef4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	fa93 f2a3 	rbit	r2, r3
 8001efe:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f02:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f06:	601a      	str	r2, [r3, #0]
  return result;
 8001f08:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f0c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001f10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f12:	fab3 f383 	clz	r3, r3
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	095b      	lsrs	r3, r3, #5
 8001f1a:	b2db      	uxtb	r3, r3
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d102      	bne.n	8001f2c <HAL_RCC_OscConfig+0xa4c>
 8001f26:	4b84      	ldr	r3, [pc, #528]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	e013      	b.n	8001f54 <HAL_RCC_OscConfig+0xa74>
 8001f2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f30:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f34:	2202      	movs	r2, #2
 8001f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f3c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	fa93 f2a3 	rbit	r2, r3
 8001f46:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001f4a:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	4b79      	ldr	r3, [pc, #484]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8001f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f54:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f58:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	6011      	str	r1, [r2, #0]
 8001f60:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f64:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	fa92 f1a2 	rbit	r1, r2
 8001f6e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f72:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f76:	6011      	str	r1, [r2, #0]
  return result;
 8001f78:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8001f7c:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	fab2 f282 	clz	r2, r2
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f002 021f 	and.w	r2, r2, #31
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f202 	lsl.w	r2, r1, r2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d084      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x9c8>
 8001f9e:	e07f      	b.n	80020a0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fa0:	f7fe fff6 	bl	8000f90 <HAL_GetTick>
 8001fa4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fa8:	e00b      	b.n	8001fc2 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001faa:	f7fe fff1 	bl	8000f90 <HAL_GetTick>
 8001fae:	4602      	mov	r2, r0
 8001fb0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d901      	bls.n	8001fc2 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e2c4      	b.n	800254c <HAL_RCC_OscConfig+0x106c>
 8001fc2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fc6:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001fca:	2202      	movs	r2, #2
 8001fcc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fd2:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	fa93 f2a3 	rbit	r2, r3
 8001fdc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fe0:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001fe4:	601a      	str	r2, [r3, #0]
 8001fe6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001fea:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001fee:	2202      	movs	r2, #2
 8001ff0:	601a      	str	r2, [r3, #0]
 8001ff2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8001ff6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	fa93 f2a3 	rbit	r2, r3
 8002000:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002004:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002008:	601a      	str	r2, [r3, #0]
  return result;
 800200a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800200e:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8002012:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002014:	fab3 f383 	clz	r3, r3
 8002018:	b2db      	uxtb	r3, r3
 800201a:	095b      	lsrs	r3, r3, #5
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f043 0302 	orr.w	r3, r3, #2
 8002022:	b2db      	uxtb	r3, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d102      	bne.n	800202e <HAL_RCC_OscConfig+0xb4e>
 8002028:	4b43      	ldr	r3, [pc, #268]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 800202a:	6a1b      	ldr	r3, [r3, #32]
 800202c:	e013      	b.n	8002056 <HAL_RCC_OscConfig+0xb76>
 800202e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002032:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002036:	2202      	movs	r2, #2
 8002038:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800203e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	fa93 f2a3 	rbit	r2, r3
 8002048:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800204c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002050:	601a      	str	r2, [r3, #0]
 8002052:	4b39      	ldr	r3, [pc, #228]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 8002054:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002056:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800205a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800205e:	2102      	movs	r1, #2
 8002060:	6011      	str	r1, [r2, #0]
 8002062:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002066:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800206a:	6812      	ldr	r2, [r2, #0]
 800206c:	fa92 f1a2 	rbit	r1, r2
 8002070:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002074:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002078:	6011      	str	r1, [r2, #0]
  return result;
 800207a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800207e:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	fab2 f282 	clz	r2, r2
 8002088:	b2d2      	uxtb	r2, r2
 800208a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800208e:	b2d2      	uxtb	r2, r2
 8002090:	f002 021f 	and.w	r2, r2, #31
 8002094:	2101      	movs	r1, #1
 8002096:	fa01 f202 	lsl.w	r2, r1, r2
 800209a:	4013      	ands	r3, r2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d184      	bne.n	8001faa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80020a0:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a8:	4b23      	ldr	r3, [pc, #140]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 80020aa:	69db      	ldr	r3, [r3, #28]
 80020ac:	4a22      	ldr	r2, [pc, #136]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 80020ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80020b2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020b8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f000 8242 	beq.w	800254a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002138 <HAL_RCC_OscConfig+0xc58>)
 80020c8:	685b      	ldr	r3, [r3, #4]
 80020ca:	f003 030c 	and.w	r3, r3, #12
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	f000 8213 	beq.w	80024fa <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020d4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020d8:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	f040 8162 	bne.w	80023aa <HAL_RCC_OscConfig+0xeca>
 80020e6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020ea:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80020ee:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80020f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80020f8:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	fa93 f2a3 	rbit	r2, r3
 8002102:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002106:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800210a:	601a      	str	r2, [r3, #0]
  return result;
 800210c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002110:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8002114:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002116:	fab3 f383 	clz	r3, r3
 800211a:	b2db      	uxtb	r3, r3
 800211c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002120:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	461a      	mov	r2, r3
 8002128:	2300      	movs	r3, #0
 800212a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212c:	f7fe ff30 	bl	8000f90 <HAL_GetTick>
 8002130:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002134:	e00c      	b.n	8002150 <HAL_RCC_OscConfig+0xc70>
 8002136:	bf00      	nop
 8002138:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800213c:	f7fe ff28 	bl	8000f90 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002146:	1ad3      	subs	r3, r2, r3
 8002148:	2b02      	cmp	r3, #2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e1fd      	b.n	800254c <HAL_RCC_OscConfig+0x106c>
 8002150:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002154:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002158:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800215c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002162:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	fa93 f2a3 	rbit	r2, r3
 800216c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002170:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002174:	601a      	str	r2, [r3, #0]
  return result;
 8002176:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800217a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 800217e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002180:	fab3 f383 	clz	r3, r3
 8002184:	b2db      	uxtb	r3, r3
 8002186:	095b      	lsrs	r3, r3, #5
 8002188:	b2db      	uxtb	r3, r3
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	2b01      	cmp	r3, #1
 8002192:	d102      	bne.n	800219a <HAL_RCC_OscConfig+0xcba>
 8002194:	4bb0      	ldr	r3, [pc, #704]	@ (8002458 <HAL_RCC_OscConfig+0xf78>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	e027      	b.n	80021ea <HAL_RCC_OscConfig+0xd0a>
 800219a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800219e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80021a2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ac:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	fa93 f2a3 	rbit	r2, r3
 80021b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021ba:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80021be:	601a      	str	r2, [r3, #0]
 80021c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021c4:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021cc:	601a      	str	r2, [r3, #0]
 80021ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021d2:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	fa93 f2a3 	rbit	r2, r3
 80021dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80021e0:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 80021e4:	601a      	str	r2, [r3, #0]
 80021e6:	4b9c      	ldr	r3, [pc, #624]	@ (8002458 <HAL_RCC_OscConfig+0xf78>)
 80021e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ea:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021ee:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 80021f2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80021f6:	6011      	str	r1, [r2, #0]
 80021f8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80021fc:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8002200:	6812      	ldr	r2, [r2, #0]
 8002202:	fa92 f1a2 	rbit	r1, r2
 8002206:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800220a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800220e:	6011      	str	r1, [r2, #0]
  return result;
 8002210:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002214:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	fab2 f282 	clz	r2, r2
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	f042 0220 	orr.w	r2, r2, #32
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	f002 021f 	and.w	r2, r2, #31
 800222a:	2101      	movs	r1, #1
 800222c:	fa01 f202 	lsl.w	r2, r1, r2
 8002230:	4013      	ands	r3, r2
 8002232:	2b00      	cmp	r3, #0
 8002234:	d182      	bne.n	800213c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002236:	4b88      	ldr	r3, [pc, #544]	@ (8002458 <HAL_RCC_OscConfig+0xf78>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800223e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002242:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800224a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800224e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	6a1b      	ldr	r3, [r3, #32]
 8002256:	430b      	orrs	r3, r1
 8002258:	497f      	ldr	r1, [pc, #508]	@ (8002458 <HAL_RCC_OscConfig+0xf78>)
 800225a:	4313      	orrs	r3, r2
 800225c:	604b      	str	r3, [r1, #4]
 800225e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002262:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002266:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800226a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800226c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002270:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	fa93 f2a3 	rbit	r2, r3
 800227a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800227e:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002282:	601a      	str	r2, [r3, #0]
  return result;
 8002284:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002288:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 800228c:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002298:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	461a      	mov	r2, r3
 80022a0:	2301      	movs	r3, #1
 80022a2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a4:	f7fe fe74 	bl	8000f90 <HAL_GetTick>
 80022a8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022ac:	e009      	b.n	80022c2 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ae:	f7fe fe6f 	bl	8000f90 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d901      	bls.n	80022c2 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80022be:	2303      	movs	r3, #3
 80022c0:	e144      	b.n	800254c <HAL_RCC_OscConfig+0x106c>
 80022c2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022c6:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022ca:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80022ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022d4:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	fa93 f2a3 	rbit	r2, r3
 80022de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022e2:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80022e6:	601a      	str	r2, [r3, #0]
  return result;
 80022e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80022ec:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 80022f0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022f2:	fab3 f383 	clz	r3, r3
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b01      	cmp	r3, #1
 8002304:	d102      	bne.n	800230c <HAL_RCC_OscConfig+0xe2c>
 8002306:	4b54      	ldr	r3, [pc, #336]	@ (8002458 <HAL_RCC_OscConfig+0xf78>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	e027      	b.n	800235c <HAL_RCC_OscConfig+0xe7c>
 800230c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002310:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002314:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002318:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800231a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800231e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	fa93 f2a3 	rbit	r2, r3
 8002328:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800232c:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002336:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800233a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800233e:	601a      	str	r2, [r3, #0]
 8002340:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002344:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	fa93 f2a3 	rbit	r2, r3
 800234e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002352:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	4b3f      	ldr	r3, [pc, #252]	@ (8002458 <HAL_RCC_OscConfig+0xf78>)
 800235a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800235c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002360:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002364:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002368:	6011      	str	r1, [r2, #0]
 800236a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800236e:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8002372:	6812      	ldr	r2, [r2, #0]
 8002374:	fa92 f1a2 	rbit	r1, r2
 8002378:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800237c:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002380:	6011      	str	r1, [r2, #0]
  return result;
 8002382:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8002386:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	fab2 f282 	clz	r2, r2
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	f042 0220 	orr.w	r2, r2, #32
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	f002 021f 	and.w	r2, r2, #31
 800239c:	2101      	movs	r1, #1
 800239e:	fa01 f202 	lsl.w	r2, r1, r2
 80023a2:	4013      	ands	r3, r2
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d082      	beq.n	80022ae <HAL_RCC_OscConfig+0xdce>
 80023a8:	e0cf      	b.n	800254a <HAL_RCC_OscConfig+0x106a>
 80023aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ae:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80023b2:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80023b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023bc:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	fa93 f2a3 	rbit	r2, r3
 80023c6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023ca:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80023ce:	601a      	str	r2, [r3, #0]
  return result;
 80023d0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80023d4:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80023d8:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023da:	fab3 f383 	clz	r3, r3
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80023e4:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	461a      	mov	r2, r3
 80023ec:	2300      	movs	r3, #0
 80023ee:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f0:	f7fe fdce 	bl	8000f90 <HAL_GetTick>
 80023f4:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023f8:	e009      	b.n	800240e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80023fa:	f7fe fdc9 	bl	8000f90 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b02      	cmp	r3, #2
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e09e      	b.n	800254c <HAL_RCC_OscConfig+0x106c>
 800240e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002412:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002416:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800241a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002420:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	fa93 f2a3 	rbit	r2, r3
 800242a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800242e:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002432:	601a      	str	r2, [r3, #0]
  return result;
 8002434:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002438:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 800243c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800243e:	fab3 f383 	clz	r3, r3
 8002442:	b2db      	uxtb	r3, r3
 8002444:	095b      	lsrs	r3, r3, #5
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f043 0301 	orr.w	r3, r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b01      	cmp	r3, #1
 8002450:	d104      	bne.n	800245c <HAL_RCC_OscConfig+0xf7c>
 8002452:	4b01      	ldr	r3, [pc, #4]	@ (8002458 <HAL_RCC_OscConfig+0xf78>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	e029      	b.n	80024ac <HAL_RCC_OscConfig+0xfcc>
 8002458:	40021000 	.word	0x40021000
 800245c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002460:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002464:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800246e:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	fa93 f2a3 	rbit	r2, r3
 8002478:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800247c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002486:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800248a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002494:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	fa93 f2a3 	rbit	r2, r3
 800249e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024a2:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002558 <HAL_RCC_OscConfig+0x1078>)
 80024aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024b0:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80024b4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80024b8:	6011      	str	r1, [r2, #0]
 80024ba:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024be:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80024c2:	6812      	ldr	r2, [r2, #0]
 80024c4:	fa92 f1a2 	rbit	r1, r2
 80024c8:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024cc:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80024d0:	6011      	str	r1, [r2, #0]
  return result;
 80024d2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80024d6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 80024da:	6812      	ldr	r2, [r2, #0]
 80024dc:	fab2 f282 	clz	r2, r2
 80024e0:	b2d2      	uxtb	r2, r2
 80024e2:	f042 0220 	orr.w	r2, r2, #32
 80024e6:	b2d2      	uxtb	r2, r2
 80024e8:	f002 021f 	and.w	r2, r2, #31
 80024ec:	2101      	movs	r1, #1
 80024ee:	fa01 f202 	lsl.w	r2, r1, r2
 80024f2:	4013      	ands	r3, r2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d180      	bne.n	80023fa <HAL_RCC_OscConfig+0xf1a>
 80024f8:	e027      	b.n	800254a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80024fe:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d101      	bne.n	800250e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e01e      	b.n	800254c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800250e:	4b12      	ldr	r3, [pc, #72]	@ (8002558 <HAL_RCC_OscConfig+0x1078>)
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002516:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800251a:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800251e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002522:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	429a      	cmp	r2, r3
 800252c:	d10b      	bne.n	8002546 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 800252e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8002532:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002536:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800253a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002542:	429a      	cmp	r2, r3
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40021000 	.word	0x40021000

0800255c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b09e      	sub	sp, #120	@ 0x78
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
 8002564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002566:	2300      	movs	r3, #0
 8002568:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d101      	bne.n	8002574 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002570:	2301      	movs	r3, #1
 8002572:	e162      	b.n	800283a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002574:	4b90      	ldr	r3, [pc, #576]	@ (80027b8 <HAL_RCC_ClockConfig+0x25c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 0307 	and.w	r3, r3, #7
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	429a      	cmp	r2, r3
 8002580:	d910      	bls.n	80025a4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002582:	4b8d      	ldr	r3, [pc, #564]	@ (80027b8 <HAL_RCC_ClockConfig+0x25c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f023 0207 	bic.w	r2, r3, #7
 800258a:	498b      	ldr	r1, [pc, #556]	@ (80027b8 <HAL_RCC_ClockConfig+0x25c>)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	4313      	orrs	r3, r2
 8002590:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002592:	4b89      	ldr	r3, [pc, #548]	@ (80027b8 <HAL_RCC_ClockConfig+0x25c>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	429a      	cmp	r2, r3
 800259e:	d001      	beq.n	80025a4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e14a      	b.n	800283a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0302 	and.w	r3, r3, #2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d008      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025b0:	4b82      	ldr	r3, [pc, #520]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	497f      	ldr	r1, [pc, #508]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f003 0301 	and.w	r3, r3, #1
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	f000 80dc 	beq.w	8002788 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d13c      	bne.n	8002652 <HAL_RCC_ClockConfig+0xf6>
 80025d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80025dc:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80025e0:	fa93 f3a3 	rbit	r3, r3
 80025e4:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80025e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	095b      	lsrs	r3, r3, #5
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	f043 0301 	orr.w	r3, r3, #1
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d102      	bne.n	8002602 <HAL_RCC_ClockConfig+0xa6>
 80025fc:	4b6f      	ldr	r3, [pc, #444]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	e00f      	b.n	8002622 <HAL_RCC_ClockConfig+0xc6>
 8002602:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002606:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800260a:	fa93 f3a3 	rbit	r3, r3
 800260e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002610:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002614:	663b      	str	r3, [r7, #96]	@ 0x60
 8002616:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002618:	fa93 f3a3 	rbit	r3, r3
 800261c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800261e:	4b67      	ldr	r3, [pc, #412]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002626:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002628:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800262a:	fa92 f2a2 	rbit	r2, r2
 800262e:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002630:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002632:	fab2 f282 	clz	r2, r2
 8002636:	b2d2      	uxtb	r2, r2
 8002638:	f042 0220 	orr.w	r2, r2, #32
 800263c:	b2d2      	uxtb	r2, r2
 800263e:	f002 021f 	and.w	r2, r2, #31
 8002642:	2101      	movs	r1, #1
 8002644:	fa01 f202 	lsl.w	r2, r1, r2
 8002648:	4013      	ands	r3, r2
 800264a:	2b00      	cmp	r3, #0
 800264c:	d17b      	bne.n	8002746 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e0f3      	b.n	800283a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	2b02      	cmp	r3, #2
 8002658:	d13c      	bne.n	80026d4 <HAL_RCC_ClockConfig+0x178>
 800265a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800265e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002660:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002662:	fa93 f3a3 	rbit	r3, r3
 8002666:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002668:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	b2db      	uxtb	r3, r3
 8002670:	095b      	lsrs	r3, r3, #5
 8002672:	b2db      	uxtb	r3, r3
 8002674:	f043 0301 	orr.w	r3, r3, #1
 8002678:	b2db      	uxtb	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d102      	bne.n	8002684 <HAL_RCC_ClockConfig+0x128>
 800267e:	4b4f      	ldr	r3, [pc, #316]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	e00f      	b.n	80026a4 <HAL_RCC_ClockConfig+0x148>
 8002684:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002688:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800268a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	647b      	str	r3, [r7, #68]	@ 0x44
 8002692:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002696:	643b      	str	r3, [r7, #64]	@ 0x40
 8002698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800269a:	fa93 f3a3 	rbit	r3, r3
 800269e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80026a0:	4b46      	ldr	r3, [pc, #280]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026a4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80026a8:	63ba      	str	r2, [r7, #56]	@ 0x38
 80026aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026ac:	fa92 f2a2 	rbit	r2, r2
 80026b0:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80026b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026b4:	fab2 f282 	clz	r2, r2
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	f042 0220 	orr.w	r2, r2, #32
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f002 021f 	and.w	r2, r2, #31
 80026c4:	2101      	movs	r1, #1
 80026c6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d13a      	bne.n	8002746 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80026d0:	2301      	movs	r3, #1
 80026d2:	e0b2      	b.n	800283a <HAL_RCC_ClockConfig+0x2de>
 80026d4:	2302      	movs	r3, #2
 80026d6:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80026e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e2:	fab3 f383 	clz	r3, r3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	095b      	lsrs	r3, r3, #5
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	f043 0301 	orr.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d102      	bne.n	80026fc <HAL_RCC_ClockConfig+0x1a0>
 80026f6:	4b31      	ldr	r3, [pc, #196]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	e00d      	b.n	8002718 <HAL_RCC_ClockConfig+0x1bc>
 80026fc:	2302      	movs	r3, #2
 80026fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002702:	fa93 f3a3 	rbit	r3, r3
 8002706:	627b      	str	r3, [r7, #36]	@ 0x24
 8002708:	2302      	movs	r3, #2
 800270a:	623b      	str	r3, [r7, #32]
 800270c:	6a3b      	ldr	r3, [r7, #32]
 800270e:	fa93 f3a3 	rbit	r3, r3
 8002712:	61fb      	str	r3, [r7, #28]
 8002714:	4b29      	ldr	r3, [pc, #164]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	2202      	movs	r2, #2
 800271a:	61ba      	str	r2, [r7, #24]
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	fa92 f2a2 	rbit	r2, r2
 8002722:	617a      	str	r2, [r7, #20]
  return result;
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	fab2 f282 	clz	r2, r2
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	f042 0220 	orr.w	r2, r2, #32
 8002730:	b2d2      	uxtb	r2, r2
 8002732:	f002 021f 	and.w	r2, r2, #31
 8002736:	2101      	movs	r1, #1
 8002738:	fa01 f202 	lsl.w	r2, r1, r2
 800273c:	4013      	ands	r3, r2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d101      	bne.n	8002746 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e079      	b.n	800283a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002746:	4b1d      	ldr	r3, [pc, #116]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f023 0203 	bic.w	r2, r3, #3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	491a      	ldr	r1, [pc, #104]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002754:	4313      	orrs	r3, r2
 8002756:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002758:	f7fe fc1a 	bl	8000f90 <HAL_GetTick>
 800275c:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	e00a      	b.n	8002776 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002760:	f7fe fc16 	bl	8000f90 <HAL_GetTick>
 8002764:	4602      	mov	r2, r0
 8002766:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002768:	1ad3      	subs	r3, r2, r3
 800276a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800276e:	4293      	cmp	r3, r2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e061      	b.n	800283a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002776:	4b11      	ldr	r3, [pc, #68]	@ (80027bc <HAL_RCC_ClockConfig+0x260>)
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f003 020c 	and.w	r2, r3, #12
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	429a      	cmp	r2, r3
 8002786:	d1eb      	bne.n	8002760 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002788:	4b0b      	ldr	r3, [pc, #44]	@ (80027b8 <HAL_RCC_ClockConfig+0x25c>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	683a      	ldr	r2, [r7, #0]
 8002792:	429a      	cmp	r2, r3
 8002794:	d214      	bcs.n	80027c0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002796:	4b08      	ldr	r3, [pc, #32]	@ (80027b8 <HAL_RCC_ClockConfig+0x25c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 0207 	bic.w	r2, r3, #7
 800279e:	4906      	ldr	r1, [pc, #24]	@ (80027b8 <HAL_RCC_ClockConfig+0x25c>)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027a6:	4b04      	ldr	r3, [pc, #16]	@ (80027b8 <HAL_RCC_ClockConfig+0x25c>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	683a      	ldr	r2, [r7, #0]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d005      	beq.n	80027c0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e040      	b.n	800283a <HAL_RCC_ClockConfig+0x2de>
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 0304 	and.w	r3, r3, #4
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d008      	beq.n	80027de <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027cc:	4b1d      	ldr	r3, [pc, #116]	@ (8002844 <HAL_RCC_ClockConfig+0x2e8>)
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	491a      	ldr	r1, [pc, #104]	@ (8002844 <HAL_RCC_ClockConfig+0x2e8>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d009      	beq.n	80027fe <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027ea:	4b16      	ldr	r3, [pc, #88]	@ (8002844 <HAL_RCC_ClockConfig+0x2e8>)
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	00db      	lsls	r3, r3, #3
 80027f8:	4912      	ldr	r1, [pc, #72]	@ (8002844 <HAL_RCC_ClockConfig+0x2e8>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80027fe:	f000 f829 	bl	8002854 <HAL_RCC_GetSysClockFreq>
 8002802:	4601      	mov	r1, r0
 8002804:	4b0f      	ldr	r3, [pc, #60]	@ (8002844 <HAL_RCC_ClockConfig+0x2e8>)
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800280c:	22f0      	movs	r2, #240	@ 0xf0
 800280e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	693a      	ldr	r2, [r7, #16]
 8002812:	fa92 f2a2 	rbit	r2, r2
 8002816:	60fa      	str	r2, [r7, #12]
  return result;
 8002818:	68fa      	ldr	r2, [r7, #12]
 800281a:	fab2 f282 	clz	r2, r2
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	40d3      	lsrs	r3, r2
 8002822:	4a09      	ldr	r2, [pc, #36]	@ (8002848 <HAL_RCC_ClockConfig+0x2ec>)
 8002824:	5cd3      	ldrb	r3, [r2, r3]
 8002826:	fa21 f303 	lsr.w	r3, r1, r3
 800282a:	4a08      	ldr	r2, [pc, #32]	@ (800284c <HAL_RCC_ClockConfig+0x2f0>)
 800282c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800282e:	4b08      	ldr	r3, [pc, #32]	@ (8002850 <HAL_RCC_ClockConfig+0x2f4>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7fe fa8c 	bl	8000d50 <HAL_InitTick>
  
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3778      	adds	r7, #120	@ 0x78
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	40021000 	.word	0x40021000
 8002848:	0800590c 	.word	0x0800590c
 800284c:	20000004 	.word	0x20000004
 8002850:	20000008 	.word	0x20000008

08002854 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002854:	b480      	push	{r7}
 8002856:	b087      	sub	sp, #28
 8002858:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800285a:	2300      	movs	r3, #0
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	2300      	movs	r3, #0
 8002860:	60bb      	str	r3, [r7, #8]
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800286a:	2300      	movs	r3, #0
 800286c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800286e:	4b1e      	ldr	r3, [pc, #120]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f003 030c 	and.w	r3, r3, #12
 800287a:	2b04      	cmp	r3, #4
 800287c:	d002      	beq.n	8002884 <HAL_RCC_GetSysClockFreq+0x30>
 800287e:	2b08      	cmp	r3, #8
 8002880:	d003      	beq.n	800288a <HAL_RCC_GetSysClockFreq+0x36>
 8002882:	e026      	b.n	80028d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002884:	4b19      	ldr	r3, [pc, #100]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x98>)
 8002886:	613b      	str	r3, [r7, #16]
      break;
 8002888:	e026      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	0c9b      	lsrs	r3, r3, #18
 800288e:	f003 030f 	and.w	r3, r3, #15
 8002892:	4a17      	ldr	r2, [pc, #92]	@ (80028f0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002894:	5cd3      	ldrb	r3, [r2, r3]
 8002896:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8002898:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <HAL_RCC_GetSysClockFreq+0x94>)
 800289a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800289c:	f003 030f 	and.w	r3, r3, #15
 80028a0:	4a14      	ldr	r2, [pc, #80]	@ (80028f4 <HAL_RCC_GetSysClockFreq+0xa0>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
 80028a4:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d008      	beq.n	80028c2 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028b0:	4a0e      	ldr	r2, [pc, #56]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x98>)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	fb02 f303 	mul.w	r3, r2, r3
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e004      	b.n	80028cc <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	4a0c      	ldr	r2, [pc, #48]	@ (80028f8 <HAL_RCC_GetSysClockFreq+0xa4>)
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	613b      	str	r3, [r7, #16]
      break;
 80028d0:	e002      	b.n	80028d8 <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80028d2:	4b06      	ldr	r3, [pc, #24]	@ (80028ec <HAL_RCC_GetSysClockFreq+0x98>)
 80028d4:	613b      	str	r3, [r7, #16]
      break;
 80028d6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028d8:	693b      	ldr	r3, [r7, #16]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40021000 	.word	0x40021000
 80028ec:	007a1200 	.word	0x007a1200
 80028f0:	08005924 	.word	0x08005924
 80028f4:	08005934 	.word	0x08005934
 80028f8:	003d0900 	.word	0x003d0900

080028fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002900:	4b03      	ldr	r3, [pc, #12]	@ (8002910 <HAL_RCC_GetHCLKFreq+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	20000004 	.word	0x20000004

08002914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800291a:	f7ff ffef 	bl	80028fc <HAL_RCC_GetHCLKFreq>
 800291e:	4601      	mov	r1, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002928:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800292c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	fa92 f2a2 	rbit	r2, r2
 8002934:	603a      	str	r2, [r7, #0]
  return result;
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	b2d2      	uxtb	r2, r2
 800293e:	40d3      	lsrs	r3, r2
 8002940:	4a04      	ldr	r2, [pc, #16]	@ (8002954 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002948:	4618      	mov	r0, r3
 800294a:	3708      	adds	r7, #8
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	40021000 	.word	0x40021000
 8002954:	0800591c 	.word	0x0800591c

08002958 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	220f      	movs	r2, #15
 8002966:	601a      	str	r2, [r3, #0]
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002968:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f003 0203 	and.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	605a      	str	r2, [r3, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8002974:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	609a      	str	r2, [r3, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);   
 8002980:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	60da      	str	r2, [r3, #12]
  
  /* Get the APB2 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800298c:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_RCC_GetClockConfig+0x5c>)
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	08db      	lsrs	r3, r3, #3
 8002992:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	611a      	str	r2, [r3, #16]
  
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY); 
 800299a:	4b07      	ldr	r3, [pc, #28]	@ (80029b8 <HAL_RCC_GetClockConfig+0x60>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0207 	and.w	r2, r3, #7
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	601a      	str	r2, [r3, #0]
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	40022000 	.word	0x40022000

080029bc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b092      	sub	sp, #72	@ 0x48
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029c4:	2300      	movs	r3, #0
 80029c6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80029cc:	2300      	movs	r3, #0
 80029ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80cd 	beq.w	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e0:	4b86      	ldr	r3, [pc, #536]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d10e      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	4b83      	ldr	r3, [pc, #524]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029ee:	69db      	ldr	r3, [r3, #28]
 80029f0:	4a82      	ldr	r2, [pc, #520]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f6:	61d3      	str	r3, [r2, #28]
 80029f8:	4b80      	ldr	r3, [pc, #512]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80029fa:	69db      	ldr	r3, [r3, #28]
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a04:	2301      	movs	r3, #1
 8002a06:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a0a:	4b7d      	ldr	r3, [pc, #500]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d118      	bne.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a16:	4b7a      	ldr	r3, [pc, #488]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a79      	ldr	r2, [pc, #484]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a20:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a22:	f7fe fab5 	bl	8000f90 <HAL_GetTick>
 8002a26:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a28:	e008      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a2a:	f7fe fab1 	bl	8000f90 <HAL_GetTick>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002a32:	1ad3      	subs	r3, r2, r3
 8002a34:	2b64      	cmp	r3, #100	@ 0x64
 8002a36:	d901      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002a38:	2303      	movs	r3, #3
 8002a3a:	e0db      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a3c:	4b70      	ldr	r3, [pc, #448]	@ (8002c00 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0f0      	beq.n	8002a2a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a48:	4b6c      	ldr	r3, [pc, #432]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a4a:	6a1b      	ldr	r3, [r3, #32]
 8002a4c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d07d      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a60:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d076      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a66:	4b65      	ldr	r3, [pc, #404]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a70:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a74:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a78:	fa93 f3a3 	rbit	r3, r3
 8002a7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002a7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a80:	fab3 f383 	clz	r3, r3
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b5e      	ldr	r3, [pc, #376]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	461a      	mov	r2, r3
 8002a90:	2301      	movs	r3, #1
 8002a92:	6013      	str	r3, [r2, #0]
 8002a94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a9c:	fa93 f3a3 	rbit	r3, r3
 8002aa0:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002aa4:	fab3 f383 	clz	r3, r3
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4b55      	ldr	r3, [pc, #340]	@ (8002c04 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002aae:	4413      	add	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ab8:	4a50      	ldr	r2, [pc, #320]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002aba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002abc:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d045      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe fa62 	bl	8000f90 <HAL_GetTick>
 8002acc:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7fe fa5e 	bl	8000f90 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e086      	b.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8002ae6:	2302      	movs	r3, #2
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af2:	2302      	movs	r3, #2
 8002af4:	623b      	str	r3, [r7, #32]
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	fa93 f3a3 	rbit	r3, r3
 8002afc:	61fb      	str	r3, [r7, #28]
  return result;
 8002afe:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b00:	fab3 f383 	clz	r3, r3
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	095b      	lsrs	r3, r3, #5
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	f043 0302 	orr.w	r3, r3, #2
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d102      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b14:	4b39      	ldr	r3, [pc, #228]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	e007      	b.n	8002b2a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8002b1a:	2302      	movs	r3, #2
 8002b1c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	fa93 f3a3 	rbit	r3, r3
 8002b24:	617b      	str	r3, [r7, #20]
 8002b26:	4b35      	ldr	r3, [pc, #212]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	613a      	str	r2, [r7, #16]
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	fa92 f2a2 	rbit	r2, r2
 8002b34:	60fa      	str	r2, [r7, #12]
  return result;
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	fab2 f282 	clz	r2, r2
 8002b3c:	b2d2      	uxtb	r2, r2
 8002b3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b42:	b2d2      	uxtb	r2, r2
 8002b44:	f002 021f 	and.w	r2, r2, #31
 8002b48:	2101      	movs	r1, #1
 8002b4a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b4e:	4013      	ands	r3, r2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0bd      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b54:	4b29      	ldr	r3, [pc, #164]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b56:	6a1b      	ldr	r3, [r3, #32]
 8002b58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	4926      	ldr	r1, [pc, #152]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b66:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d105      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b6e:	4b23      	ldr	r3, [pc, #140]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	4a22      	ldr	r2, [pc, #136]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b78:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d008      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b86:	4b1d      	ldr	r3, [pc, #116]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b8a:	f023 0203 	bic.w	r2, r3, #3
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	491a      	ldr	r1, [pc, #104]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ba4:	4b15      	ldr	r3, [pc, #84]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	f023 0210 	bic.w	r2, r3, #16
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4912      	ldr	r1, [pc, #72]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d008      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002bc2:	4b0e      	ldr	r3, [pc, #56]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bc6:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	490b      	ldr	r1, [pc, #44]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d008      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002be0:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	4903      	ldr	r1, [pc, #12]	@ (8002bfc <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bf2:	2300      	movs	r3, #0
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3748      	adds	r7, #72	@ 0x48
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	40007000 	.word	0x40007000
 8002c04:	10908100 	.word	0x10908100

08002c08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e049      	b.n	8002cae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d106      	bne.n	8002c34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd ffca 	bl	8000bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3304      	adds	r3, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4610      	mov	r0, r2
 8002c48:	f000 fd2a 	bl	80036a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}
	...

08002cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cc6:	b2db      	uxtb	r3, r3
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d001      	beq.n	8002cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	e040      	b.n	8002d52 <HAL_TIM_Base_Start_IT+0x9a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a1c      	ldr	r2, [pc, #112]	@ (8002d60 <HAL_TIM_Base_Start_IT+0xa8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d00e      	beq.n	8002d10 <HAL_TIM_Base_Start_IT+0x58>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cfa:	d009      	beq.n	8002d10 <HAL_TIM_Base_Start_IT+0x58>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a18      	ldr	r2, [pc, #96]	@ (8002d64 <HAL_TIM_Base_Start_IT+0xac>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d004      	beq.n	8002d10 <HAL_TIM_Base_Start_IT+0x58>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a17      	ldr	r2, [pc, #92]	@ (8002d68 <HAL_TIM_Base_Start_IT+0xb0>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d115      	bne.n	8002d3c <HAL_TIM_Base_Start_IT+0x84>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	4b15      	ldr	r3, [pc, #84]	@ (8002d6c <HAL_TIM_Base_Start_IT+0xb4>)
 8002d18:	4013      	ands	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b06      	cmp	r3, #6
 8002d20:	d015      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x96>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d28:	d011      	beq.n	8002d4e <HAL_TIM_Base_Start_IT+0x96>
    {
      __HAL_TIM_ENABLE(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0201 	orr.w	r2, r2, #1
 8002d38:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d3a:	e008      	b.n	8002d4e <HAL_TIM_Base_Start_IT+0x96>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
 8002d4c:	e000      	b.n	8002d50 <HAL_TIM_Base_Start_IT+0x98>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	40000400 	.word	0x40000400
 8002d68:	40014000 	.word	0x40014000
 8002d6c:	00010007 	.word	0x00010007

08002d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d101      	bne.n	8002d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e049      	b.n	8002e16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d106      	bne.n	8002d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f841 	bl	8002e1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3304      	adds	r3, #4
 8002dac:	4619      	mov	r1, r3
 8002dae:	4610      	mov	r0, r2
 8002db0:	f000 fc76 	bl	80036a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e14:	2300      	movs	r3, #0
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3708      	adds	r7, #8
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002e1e:	b480      	push	{r7}
 8002e20:	b083      	sub	sp, #12
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
	...

08002e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d109      	bne.n	8002e58 <HAL_TIM_PWM_Start+0x24>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002e4a:	b2db      	uxtb	r3, r3
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	bf14      	ite	ne
 8002e50:	2301      	movne	r3, #1
 8002e52:	2300      	moveq	r3, #0
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	e03c      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x9e>
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d109      	bne.n	8002e72 <HAL_TIM_PWM_Start+0x3e>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	e02f      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x9e>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b08      	cmp	r3, #8
 8002e76:	d109      	bne.n	8002e8c <HAL_TIM_PWM_Start+0x58>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	bf14      	ite	ne
 8002e84:	2301      	movne	r3, #1
 8002e86:	2300      	moveq	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	e022      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x9e>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	2b0c      	cmp	r3, #12
 8002e90:	d109      	bne.n	8002ea6 <HAL_TIM_PWM_Start+0x72>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	bf14      	ite	ne
 8002e9e:	2301      	movne	r3, #1
 8002ea0:	2300      	moveq	r3, #0
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	e015      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x9e>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d109      	bne.n	8002ec0 <HAL_TIM_PWM_Start+0x8c>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	bf14      	ite	ne
 8002eb8:	2301      	movne	r3, #1
 8002eba:	2300      	moveq	r3, #0
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	e008      	b.n	8002ed2 <HAL_TIM_PWM_Start+0x9e>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e088      	b.n	8002fec <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d104      	bne.n	8002eea <HAL_TIM_PWM_Start+0xb6>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ee8:	e023      	b.n	8002f32 <HAL_TIM_PWM_Start+0xfe>
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b04      	cmp	r3, #4
 8002eee:	d104      	bne.n	8002efa <HAL_TIM_PWM_Start+0xc6>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2202      	movs	r2, #2
 8002ef4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ef8:	e01b      	b.n	8002f32 <HAL_TIM_PWM_Start+0xfe>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b08      	cmp	r3, #8
 8002efe:	d104      	bne.n	8002f0a <HAL_TIM_PWM_Start+0xd6>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2202      	movs	r2, #2
 8002f04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f08:	e013      	b.n	8002f32 <HAL_TIM_PWM_Start+0xfe>
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	2b0c      	cmp	r3, #12
 8002f0e:	d104      	bne.n	8002f1a <HAL_TIM_PWM_Start+0xe6>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2202      	movs	r2, #2
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f18:	e00b      	b.n	8002f32 <HAL_TIM_PWM_Start+0xfe>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	2b10      	cmp	r3, #16
 8002f1e:	d104      	bne.n	8002f2a <HAL_TIM_PWM_Start+0xf6>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2202      	movs	r2, #2
 8002f24:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f28:	e003      	b.n	8002f32 <HAL_TIM_PWM_Start+0xfe>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2202      	movs	r2, #2
 8002f2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2201      	movs	r2, #1
 8002f38:	6839      	ldr	r1, [r7, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f001 f807 	bl	8003f4e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a2b      	ldr	r2, [pc, #172]	@ (8002ff4 <HAL_TIM_PWM_Start+0x1c0>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00e      	beq.n	8002f68 <HAL_TIM_PWM_Start+0x134>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a2a      	ldr	r2, [pc, #168]	@ (8002ff8 <HAL_TIM_PWM_Start+0x1c4>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d009      	beq.n	8002f68 <HAL_TIM_PWM_Start+0x134>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a28      	ldr	r2, [pc, #160]	@ (8002ffc <HAL_TIM_PWM_Start+0x1c8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d004      	beq.n	8002f68 <HAL_TIM_PWM_Start+0x134>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a27      	ldr	r2, [pc, #156]	@ (8003000 <HAL_TIM_PWM_Start+0x1cc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d101      	bne.n	8002f6c <HAL_TIM_PWM_Start+0x138>
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e000      	b.n	8002f6e <HAL_TIM_PWM_Start+0x13a>
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d007      	beq.n	8002f82 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f80:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff4 <HAL_TIM_PWM_Start+0x1c0>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d00e      	beq.n	8002faa <HAL_TIM_PWM_Start+0x176>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f94:	d009      	beq.n	8002faa <HAL_TIM_PWM_Start+0x176>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003004 <HAL_TIM_PWM_Start+0x1d0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d004      	beq.n	8002faa <HAL_TIM_PWM_Start+0x176>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a14      	ldr	r2, [pc, #80]	@ (8002ff8 <HAL_TIM_PWM_Start+0x1c4>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d115      	bne.n	8002fd6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	4b15      	ldr	r3, [pc, #84]	@ (8003008 <HAL_TIM_PWM_Start+0x1d4>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2b06      	cmp	r3, #6
 8002fba:	d015      	beq.n	8002fe8 <HAL_TIM_PWM_Start+0x1b4>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fc2:	d011      	beq.n	8002fe8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0201 	orr.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd4:	e008      	b.n	8002fe8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f042 0201 	orr.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]
 8002fe6:	e000      	b.n	8002fea <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fea:	2300      	movs	r3, #0
}
 8002fec:	4618      	mov	r0, r3
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40014000 	.word	0x40014000
 8002ffc:	40014400 	.word	0x40014400
 8003000:	40014800 	.word	0x40014800
 8003004:	40000400 	.word	0x40000400
 8003008:	00010007 	.word	0x00010007

0800300c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b084      	sub	sp, #16
 8003010:	af00      	add	r7, sp, #0
 8003012:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d020      	beq.n	8003070 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01b      	beq.n	8003070 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f06f 0202 	mvn.w	r2, #2
 8003040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f003 0303 	and.w	r3, r3, #3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fb03 	bl	8003662 <HAL_TIM_IC_CaptureCallback>
 800305c:	e005      	b.n	800306a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 faf5 	bl	800364e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	f000 fb06 	bl	8003676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	d020      	beq.n	80030bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d01b      	beq.n	80030bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f06f 0204 	mvn.w	r2, #4
 800308c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2202      	movs	r2, #2
 8003092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d003      	beq.n	80030aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fadd 	bl	8003662 <HAL_TIM_IC_CaptureCallback>
 80030a8:	e005      	b.n	80030b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 facf 	bl	800364e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fae0 	bl	8003676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	f003 0308 	and.w	r3, r3, #8
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d020      	beq.n	8003108 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f003 0308 	and.w	r3, r3, #8
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d01b      	beq.n	8003108 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f06f 0208 	mvn.w	r2, #8
 80030d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2204      	movs	r2, #4
 80030de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fab7 	bl	8003662 <HAL_TIM_IC_CaptureCallback>
 80030f4:	e005      	b.n	8003102 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030f6:	6878      	ldr	r0, [r7, #4]
 80030f8:	f000 faa9 	bl	800364e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f000 faba 	bl	8003676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2200      	movs	r2, #0
 8003106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d020      	beq.n	8003154 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f003 0310 	and.w	r3, r3, #16
 8003118:	2b00      	cmp	r3, #0
 800311a:	d01b      	beq.n	8003154 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f06f 0210 	mvn.w	r2, #16
 8003124:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2208      	movs	r2, #8
 800312a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f000 fa91 	bl	8003662 <HAL_TIM_IC_CaptureCallback>
 8003140:	e005      	b.n	800314e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fa83 	bl	800364e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fa94 	bl	8003676 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2200      	movs	r2, #0
 8003152:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f003 0301 	and.w	r3, r3, #1
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00c      	beq.n	8003178 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f003 0301 	and.w	r3, r3, #1
 8003164:	2b00      	cmp	r3, #0
 8003166:	d007      	beq.n	8003178 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f06f 0201 	mvn.w	r2, #1
 8003170:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003172:	6878      	ldr	r0, [r7, #4]
 8003174:	f7fd fce8 	bl	8000b48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00c      	beq.n	800319c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003188:	2b00      	cmp	r3, #0
 800318a:	d007      	beq.n	800319c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f001 f8cc 	bl	8004334 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00c      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d007      	beq.n	80031c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f001 f8c4 	bl	8004348 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00c      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d007      	beq.n	80031e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80031dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fa53 	bl	800368a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	f003 0320 	and.w	r3, r3, #32
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00c      	beq.n	8003208 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0320 	and.w	r3, r3, #32
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d007      	beq.n	8003208 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f06f 0220 	mvn.w	r2, #32
 8003200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f001 f88c 	bl	8004320 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003208:	bf00      	nop
 800320a:	3710      	adds	r7, #16
 800320c:	46bd      	mov	sp, r7
 800320e:	bd80      	pop	{r7, pc}

08003210 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	60f8      	str	r0, [r7, #12]
 8003218:	60b9      	str	r1, [r7, #8]
 800321a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800321c:	2300      	movs	r3, #0
 800321e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003226:	2b01      	cmp	r3, #1
 8003228:	d101      	bne.n	800322e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800322a:	2302      	movs	r3, #2
 800322c:	e0ff      	b.n	800342e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2b14      	cmp	r3, #20
 800323a:	f200 80f0 	bhi.w	800341e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800323e:	a201      	add	r2, pc, #4	@ (adr r2, 8003244 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003244:	08003299 	.word	0x08003299
 8003248:	0800341f 	.word	0x0800341f
 800324c:	0800341f 	.word	0x0800341f
 8003250:	0800341f 	.word	0x0800341f
 8003254:	080032d9 	.word	0x080032d9
 8003258:	0800341f 	.word	0x0800341f
 800325c:	0800341f 	.word	0x0800341f
 8003260:	0800341f 	.word	0x0800341f
 8003264:	0800331b 	.word	0x0800331b
 8003268:	0800341f 	.word	0x0800341f
 800326c:	0800341f 	.word	0x0800341f
 8003270:	0800341f 	.word	0x0800341f
 8003274:	0800335b 	.word	0x0800335b
 8003278:	0800341f 	.word	0x0800341f
 800327c:	0800341f 	.word	0x0800341f
 8003280:	0800341f 	.word	0x0800341f
 8003284:	0800339d 	.word	0x0800339d
 8003288:	0800341f 	.word	0x0800341f
 800328c:	0800341f 	.word	0x0800341f
 8003290:	0800341f 	.word	0x0800341f
 8003294:	080033dd 	.word	0x080033dd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	68b9      	ldr	r1, [r7, #8]
 800329e:	4618      	mov	r0, r3
 80032a0:	f000 fa82 	bl	80037a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	699a      	ldr	r2, [r3, #24]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f042 0208 	orr.w	r2, r2, #8
 80032b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f022 0204 	bic.w	r2, r2, #4
 80032c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6999      	ldr	r1, [r3, #24]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	430a      	orrs	r2, r1
 80032d4:	619a      	str	r2, [r3, #24]
      break;
 80032d6:	e0a5      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68b9      	ldr	r1, [r7, #8]
 80032de:	4618      	mov	r0, r3
 80032e0:	f000 fae8 	bl	80038b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	699a      	ldr	r2, [r3, #24]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	699a      	ldr	r2, [r3, #24]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003302:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6999      	ldr	r1, [r3, #24]
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	021a      	lsls	r2, r3, #8
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	619a      	str	r2, [r3, #24]
      break;
 8003318:	e084      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fb47 	bl	80039b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	69da      	ldr	r2, [r3, #28]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f042 0208 	orr.w	r2, r2, #8
 8003334:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	69da      	ldr	r2, [r3, #28]
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 0204 	bic.w	r2, r2, #4
 8003344:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	69d9      	ldr	r1, [r3, #28]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	691a      	ldr	r2, [r3, #16]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	61da      	str	r2, [r3, #28]
      break;
 8003358:	e064      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	68b9      	ldr	r1, [r7, #8]
 8003360:	4618      	mov	r0, r3
 8003362:	f000 fba5 	bl	8003ab0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	69da      	ldr	r2, [r3, #28]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003374:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	69da      	ldr	r2, [r3, #28]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003384:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	69d9      	ldr	r1, [r3, #28]
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	021a      	lsls	r2, r3, #8
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	61da      	str	r2, [r3, #28]
      break;
 800339a:	e043      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68b9      	ldr	r1, [r7, #8]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 fbe8 	bl	8003b78 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0208 	orr.w	r2, r2, #8
 80033b6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f022 0204 	bic.w	r2, r2, #4
 80033c6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	691a      	ldr	r2, [r3, #16]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	430a      	orrs	r2, r1
 80033d8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80033da:	e023      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68b9      	ldr	r1, [r7, #8]
 80033e2:	4618      	mov	r0, r3
 80033e4:	f000 fc26 	bl	8003c34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80033f6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003406:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	021a      	lsls	r2, r3, #8
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	430a      	orrs	r2, r1
 800341a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800341c:	e002      	b.n	8003424 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	75fb      	strb	r3, [r7, #23]
      break;
 8003422:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800342c:	7dfb      	ldrb	r3, [r7, #23]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop

08003438 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b084      	sub	sp, #16
 800343c:	af00      	add	r7, sp, #0
 800343e:	6078      	str	r0, [r7, #4]
 8003440:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_TIM_ConfigClockSource+0x1c>
 8003450:	2302      	movs	r3, #2
 8003452:	e0b6      	b.n	80035c2 <HAL_TIM_ConfigClockSource+0x18a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	689b      	ldr	r3, [r3, #8]
 800346a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003472:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800347e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003490:	d03e      	beq.n	8003510 <HAL_TIM_ConfigClockSource+0xd8>
 8003492:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003496:	f200 8087 	bhi.w	80035a8 <HAL_TIM_ConfigClockSource+0x170>
 800349a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800349e:	f000 8086 	beq.w	80035ae <HAL_TIM_ConfigClockSource+0x176>
 80034a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034a6:	d87f      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x170>
 80034a8:	2b70      	cmp	r3, #112	@ 0x70
 80034aa:	d01a      	beq.n	80034e2 <HAL_TIM_ConfigClockSource+0xaa>
 80034ac:	2b70      	cmp	r3, #112	@ 0x70
 80034ae:	d87b      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x170>
 80034b0:	2b60      	cmp	r3, #96	@ 0x60
 80034b2:	d050      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0x11e>
 80034b4:	2b60      	cmp	r3, #96	@ 0x60
 80034b6:	d877      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x170>
 80034b8:	2b50      	cmp	r3, #80	@ 0x50
 80034ba:	d03c      	beq.n	8003536 <HAL_TIM_ConfigClockSource+0xfe>
 80034bc:	2b50      	cmp	r3, #80	@ 0x50
 80034be:	d873      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x170>
 80034c0:	2b40      	cmp	r3, #64	@ 0x40
 80034c2:	d058      	beq.n	8003576 <HAL_TIM_ConfigClockSource+0x13e>
 80034c4:	2b40      	cmp	r3, #64	@ 0x40
 80034c6:	d86f      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x170>
 80034c8:	2b30      	cmp	r3, #48	@ 0x30
 80034ca:	d064      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15e>
 80034cc:	2b30      	cmp	r3, #48	@ 0x30
 80034ce:	d86b      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x170>
 80034d0:	2b20      	cmp	r3, #32
 80034d2:	d060      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15e>
 80034d4:	2b20      	cmp	r3, #32
 80034d6:	d867      	bhi.n	80035a8 <HAL_TIM_ConfigClockSource+0x170>
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d05c      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15e>
 80034dc:	2b10      	cmp	r3, #16
 80034de:	d05a      	beq.n	8003596 <HAL_TIM_ConfigClockSource+0x15e>
 80034e0:	e062      	b.n	80035a8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034f2:	f000 fd0c 	bl	8003f0e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	68ba      	ldr	r2, [r7, #8]
 800350c:	609a      	str	r2, [r3, #8]
      break;
 800350e:	e04f      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003520:	f000 fcf5 	bl	8003f0e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	689a      	ldr	r2, [r3, #8]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003532:	609a      	str	r2, [r3, #8]
      break;
 8003534:	e03c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003542:	461a      	mov	r2, r3
 8003544:	f000 fc69 	bl	8003e1a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	2150      	movs	r1, #80	@ 0x50
 800354e:	4618      	mov	r0, r3
 8003550:	f000 fcc2 	bl	8003ed8 <TIM_ITRx_SetConfig>
      break;
 8003554:	e02c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003562:	461a      	mov	r2, r3
 8003564:	f000 fc88 	bl	8003e78 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	2160      	movs	r1, #96	@ 0x60
 800356e:	4618      	mov	r0, r3
 8003570:	f000 fcb2 	bl	8003ed8 <TIM_ITRx_SetConfig>
      break;
 8003574:	e01c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003582:	461a      	mov	r2, r3
 8003584:	f000 fc49 	bl	8003e1a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2140      	movs	r1, #64	@ 0x40
 800358e:	4618      	mov	r0, r3
 8003590:	f000 fca2 	bl	8003ed8 <TIM_ITRx_SetConfig>
      break;
 8003594:	e00c      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4619      	mov	r1, r3
 80035a0:	4610      	mov	r0, r2
 80035a2:	f000 fc99 	bl	8003ed8 <TIM_ITRx_SetConfig>
      break;
 80035a6:	e003      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	73fb      	strb	r3, [r7, #15]
      break;
 80035ac:	e000      	b.n	80035b0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80035ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d101      	bne.n	80035e2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80035de:	2302      	movs	r3, #2
 80035e0:	e031      	b.n	8003646 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2202      	movs	r2, #2
 80035ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80035f2:	6839      	ldr	r1, [r7, #0]
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f000 fb7d 	bl	8003cf4 <TIM_SlaveTimer_SetConfig>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d009      	beq.n	8003614 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e018      	b.n	8003646 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003622:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	68da      	ldr	r2, [r3, #12]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003632:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003644:	2300      	movs	r3, #0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3708      	adds	r7, #8
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800364e:	b480      	push	{r7}
 8003650:	b083      	sub	sp, #12
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003656:	bf00      	nop
 8003658:	370c      	adds	r7, #12
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr

08003662 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003662:	b480      	push	{r7}
 8003664:	b083      	sub	sp, #12
 8003666:	af00      	add	r7, sp, #0
 8003668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800366a:	bf00      	nop
 800366c:	370c      	adds	r7, #12
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003676:	b480      	push	{r7}
 8003678:	b083      	sub	sp, #12
 800367a:	af00      	add	r7, sp, #0
 800367c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800367e:	bf00      	nop
 8003680:	370c      	adds	r7, #12
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr

0800368a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
	...

080036a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b085      	sub	sp, #20
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a38      	ldr	r2, [pc, #224]	@ (8003794 <TIM_Base_SetConfig+0xf4>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d007      	beq.n	80036c8 <TIM_Base_SetConfig+0x28>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036be:	d003      	beq.n	80036c8 <TIM_Base_SetConfig+0x28>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a35      	ldr	r2, [pc, #212]	@ (8003798 <TIM_Base_SetConfig+0xf8>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d108      	bne.n	80036da <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	68fa      	ldr	r2, [r7, #12]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003794 <TIM_Base_SetConfig+0xf4>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <TIM_Base_SetConfig+0x6a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036e8:	d00f      	beq.n	800370a <TIM_Base_SetConfig+0x6a>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	4a2a      	ldr	r2, [pc, #168]	@ (8003798 <TIM_Base_SetConfig+0xf8>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d00b      	beq.n	800370a <TIM_Base_SetConfig+0x6a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a29      	ldr	r2, [pc, #164]	@ (800379c <TIM_Base_SetConfig+0xfc>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d007      	beq.n	800370a <TIM_Base_SetConfig+0x6a>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4a28      	ldr	r2, [pc, #160]	@ (80037a0 <TIM_Base_SetConfig+0x100>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d003      	beq.n	800370a <TIM_Base_SetConfig+0x6a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	4a27      	ldr	r2, [pc, #156]	@ (80037a4 <TIM_Base_SetConfig+0x104>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d108      	bne.n	800371c <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	695b      	ldr	r3, [r3, #20]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68fa      	ldr	r2, [r7, #12]
 800372e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a14      	ldr	r2, [pc, #80]	@ (8003794 <TIM_Base_SetConfig+0xf4>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d00b      	beq.n	8003760 <TIM_Base_SetConfig+0xc0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a14      	ldr	r2, [pc, #80]	@ (800379c <TIM_Base_SetConfig+0xfc>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d007      	beq.n	8003760 <TIM_Base_SetConfig+0xc0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a13      	ldr	r2, [pc, #76]	@ (80037a0 <TIM_Base_SetConfig+0x100>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d003      	beq.n	8003760 <TIM_Base_SetConfig+0xc0>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	4a12      	ldr	r2, [pc, #72]	@ (80037a4 <TIM_Base_SetConfig+0x104>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d103      	bne.n	8003768 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2201      	movs	r2, #1
 800376c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b01      	cmp	r3, #1
 8003778:	d105      	bne.n	8003786 <TIM_Base_SetConfig+0xe6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	f023 0201 	bic.w	r2, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	611a      	str	r2, [r3, #16]
  }
}
 8003786:	bf00      	nop
 8003788:	3714      	adds	r7, #20
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40012c00 	.word	0x40012c00
 8003798:	40000400 	.word	0x40000400
 800379c:	40014000 	.word	0x40014000
 80037a0:	40014400 	.word	0x40014400
 80037a4:	40014800 	.word	0x40014800

080037a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037a8:	b480      	push	{r7}
 80037aa:	b087      	sub	sp, #28
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f023 0201 	bic.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	699b      	ldr	r3, [r3, #24]
 80037ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80037da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0303 	bic.w	r3, r3, #3
 80037e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68fa      	ldr	r2, [r7, #12]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	f023 0302 	bic.w	r3, r3, #2
 80037f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	697a      	ldr	r2, [r7, #20]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	4a28      	ldr	r2, [pc, #160]	@ (80038a4 <TIM_OC1_SetConfig+0xfc>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00b      	beq.n	8003820 <TIM_OC1_SetConfig+0x78>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	4a27      	ldr	r2, [pc, #156]	@ (80038a8 <TIM_OC1_SetConfig+0x100>)
 800380c:	4293      	cmp	r3, r2
 800380e:	d007      	beq.n	8003820 <TIM_OC1_SetConfig+0x78>
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a26      	ldr	r2, [pc, #152]	@ (80038ac <TIM_OC1_SetConfig+0x104>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_OC1_SetConfig+0x78>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a25      	ldr	r2, [pc, #148]	@ (80038b0 <TIM_OC1_SetConfig+0x108>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10c      	bne.n	800383a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0308 	bic.w	r3, r3, #8
 8003826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f023 0304 	bic.w	r3, r3, #4
 8003838:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a19      	ldr	r2, [pc, #100]	@ (80038a4 <TIM_OC1_SetConfig+0xfc>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00b      	beq.n	800385a <TIM_OC1_SetConfig+0xb2>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a18      	ldr	r2, [pc, #96]	@ (80038a8 <TIM_OC1_SetConfig+0x100>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d007      	beq.n	800385a <TIM_OC1_SetConfig+0xb2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	4a17      	ldr	r2, [pc, #92]	@ (80038ac <TIM_OC1_SetConfig+0x104>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d003      	beq.n	800385a <TIM_OC1_SetConfig+0xb2>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	4a16      	ldr	r2, [pc, #88]	@ (80038b0 <TIM_OC1_SetConfig+0x108>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d111      	bne.n	800387e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003860:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003868:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	695b      	ldr	r3, [r3, #20]
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	4313      	orrs	r3, r2
 800387c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685a      	ldr	r2, [r3, #4]
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	621a      	str	r2, [r3, #32]
}
 8003898:	bf00      	nop
 800389a:	371c      	adds	r7, #28
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr
 80038a4:	40012c00 	.word	0x40012c00
 80038a8:	40014000 	.word	0x40014000
 80038ac:	40014400 	.word	0x40014400
 80038b0:	40014800 	.word	0x40014800

080038b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b087      	sub	sp, #28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a1b      	ldr	r3, [r3, #32]
 80038c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6a1b      	ldr	r3, [r3, #32]
 80038c8:	f023 0210 	bic.w	r2, r3, #16
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80038e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	68fa      	ldr	r2, [r7, #12]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f023 0320 	bic.w	r3, r3, #32
 8003902:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a24      	ldr	r2, [pc, #144]	@ (80039a4 <TIM_OC2_SetConfig+0xf0>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d10d      	bne.n	8003934 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800391e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003932:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a1b      	ldr	r2, [pc, #108]	@ (80039a4 <TIM_OC2_SetConfig+0xf0>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00b      	beq.n	8003954 <TIM_OC2_SetConfig+0xa0>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a1a      	ldr	r2, [pc, #104]	@ (80039a8 <TIM_OC2_SetConfig+0xf4>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d007      	beq.n	8003954 <TIM_OC2_SetConfig+0xa0>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a19      	ldr	r2, [pc, #100]	@ (80039ac <TIM_OC2_SetConfig+0xf8>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d003      	beq.n	8003954 <TIM_OC2_SetConfig+0xa0>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a18      	ldr	r2, [pc, #96]	@ (80039b0 <TIM_OC2_SetConfig+0xfc>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d113      	bne.n	800397c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800395a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003962:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	695b      	ldr	r3, [r3, #20]
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	4313      	orrs	r3, r2
 800396e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	693a      	ldr	r2, [r7, #16]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685a      	ldr	r2, [r3, #4]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	697a      	ldr	r2, [r7, #20]
 8003994:	621a      	str	r2, [r3, #32]
}
 8003996:	bf00      	nop
 8003998:	371c      	adds	r7, #28
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	40012c00 	.word	0x40012c00
 80039a8:	40014000 	.word	0x40014000
 80039ac:	40014400 	.word	0x40014400
 80039b0:	40014800 	.word	0x40014800

080039b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b087      	sub	sp, #28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a1b      	ldr	r3, [r3, #32]
 80039c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f023 0303 	bic.w	r3, r3, #3
 80039ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	68fa      	ldr	r2, [r7, #12]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	697a      	ldr	r2, [r7, #20]
 8003a0a:	4313      	orrs	r3, r2
 8003a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a23      	ldr	r2, [pc, #140]	@ (8003aa0 <TIM_OC3_SetConfig+0xec>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d10d      	bne.n	8003a32 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	021b      	lsls	r3, r3, #8
 8003a24:	697a      	ldr	r2, [r7, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a30:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <TIM_OC3_SetConfig+0xec>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <TIM_OC3_SetConfig+0x9e>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	4a19      	ldr	r2, [pc, #100]	@ (8003aa4 <TIM_OC3_SetConfig+0xf0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d007      	beq.n	8003a52 <TIM_OC3_SetConfig+0x9e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a18      	ldr	r2, [pc, #96]	@ (8003aa8 <TIM_OC3_SetConfig+0xf4>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d003      	beq.n	8003a52 <TIM_OC3_SetConfig+0x9e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a17      	ldr	r2, [pc, #92]	@ (8003aac <TIM_OC3_SetConfig+0xf8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d113      	bne.n	8003a7a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a62:	683b      	ldr	r3, [r7, #0]
 8003a64:	695b      	ldr	r3, [r3, #20]
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	699b      	ldr	r3, [r3, #24]
 8003a72:	011b      	lsls	r3, r3, #4
 8003a74:	693a      	ldr	r2, [r7, #16]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	68fa      	ldr	r2, [r7, #12]
 8003a84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685a      	ldr	r2, [r3, #4]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	697a      	ldr	r2, [r7, #20]
 8003a92:	621a      	str	r2, [r3, #32]
}
 8003a94:	bf00      	nop
 8003a96:	371c      	adds	r7, #28
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40012c00 	.word	0x40012c00
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40014400 	.word	0x40014400
 8003aac:	40014800 	.word	0x40014800

08003ab0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003ade:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	021b      	lsls	r3, r3, #8
 8003af2:	68fa      	ldr	r2, [r7, #12]
 8003af4:	4313      	orrs	r3, r2
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003afe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	031b      	lsls	r3, r3, #12
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a16      	ldr	r2, [pc, #88]	@ (8003b68 <TIM_OC4_SetConfig+0xb8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d00b      	beq.n	8003b2c <TIM_OC4_SetConfig+0x7c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a15      	ldr	r2, [pc, #84]	@ (8003b6c <TIM_OC4_SetConfig+0xbc>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d007      	beq.n	8003b2c <TIM_OC4_SetConfig+0x7c>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a14      	ldr	r2, [pc, #80]	@ (8003b70 <TIM_OC4_SetConfig+0xc0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d003      	beq.n	8003b2c <TIM_OC4_SetConfig+0x7c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a13      	ldr	r2, [pc, #76]	@ (8003b74 <TIM_OC4_SetConfig+0xc4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d109      	bne.n	8003b40 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	695b      	ldr	r3, [r3, #20]
 8003b38:	019b      	lsls	r3, r3, #6
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	697a      	ldr	r2, [r7, #20]
 8003b44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685a      	ldr	r2, [r3, #4]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	621a      	str	r2, [r3, #32]
}
 8003b5a:	bf00      	nop
 8003b5c:	371c      	adds	r7, #28
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40014400 	.word	0x40014400
 8003b74:	40014800 	.word	0x40014800

08003b78 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ba6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003bbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	041b      	lsls	r3, r3, #16
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a15      	ldr	r2, [pc, #84]	@ (8003c24 <TIM_OC5_SetConfig+0xac>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d00b      	beq.n	8003bea <TIM_OC5_SetConfig+0x72>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a14      	ldr	r2, [pc, #80]	@ (8003c28 <TIM_OC5_SetConfig+0xb0>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d007      	beq.n	8003bea <TIM_OC5_SetConfig+0x72>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a13      	ldr	r2, [pc, #76]	@ (8003c2c <TIM_OC5_SetConfig+0xb4>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d003      	beq.n	8003bea <TIM_OC5_SetConfig+0x72>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a12      	ldr	r2, [pc, #72]	@ (8003c30 <TIM_OC5_SetConfig+0xb8>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d109      	bne.n	8003bfe <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	021b      	lsls	r3, r3, #8
 8003bf8:	697a      	ldr	r2, [r7, #20]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68fa      	ldr	r2, [r7, #12]
 8003c08:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	621a      	str	r2, [r3, #32]
}
 8003c18:	bf00      	nop
 8003c1a:	371c      	adds	r7, #28
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40012c00 	.word	0x40012c00
 8003c28:	40014000 	.word	0x40014000
 8003c2c:	40014400 	.word	0x40014400
 8003c30:	40014800 	.word	0x40014800

08003c34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6a1b      	ldr	r3, [r3, #32]
 8003c42:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a1b      	ldr	r3, [r3, #32]
 8003c48:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003c62:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	051b      	lsls	r3, r3, #20
 8003c82:	693a      	ldr	r2, [r7, #16]
 8003c84:	4313      	orrs	r3, r2
 8003c86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a16      	ldr	r2, [pc, #88]	@ (8003ce4 <TIM_OC6_SetConfig+0xb0>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00b      	beq.n	8003ca8 <TIM_OC6_SetConfig+0x74>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a15      	ldr	r2, [pc, #84]	@ (8003ce8 <TIM_OC6_SetConfig+0xb4>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d007      	beq.n	8003ca8 <TIM_OC6_SetConfig+0x74>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a14      	ldr	r2, [pc, #80]	@ (8003cec <TIM_OC6_SetConfig+0xb8>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d003      	beq.n	8003ca8 <TIM_OC6_SetConfig+0x74>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a13      	ldr	r2, [pc, #76]	@ (8003cf0 <TIM_OC6_SetConfig+0xbc>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d109      	bne.n	8003cbc <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	695b      	ldr	r3, [r3, #20]
 8003cb4:	029b      	lsls	r3, r3, #10
 8003cb6:	697a      	ldr	r2, [r7, #20]
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	697a      	ldr	r2, [r7, #20]
 8003cc0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	68fa      	ldr	r2, [r7, #12]
 8003cc6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	621a      	str	r2, [r3, #32]
}
 8003cd6:	bf00      	nop
 8003cd8:	371c      	adds	r7, #28
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40014000 	.word	0x40014000
 8003cec:	40014400 	.word	0x40014400
 8003cf0:	40014800 	.word	0x40014800

08003cf4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d10:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d22:	f023 0307 	bic.w	r3, r3, #7
 8003d26:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	2b70      	cmp	r3, #112	@ 0x70
 8003d40:	d01a      	beq.n	8003d78 <TIM_SlaveTimer_SetConfig+0x84>
 8003d42:	2b70      	cmp	r3, #112	@ 0x70
 8003d44:	d860      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x114>
 8003d46:	2b60      	cmp	r3, #96	@ 0x60
 8003d48:	d054      	beq.n	8003df4 <TIM_SlaveTimer_SetConfig+0x100>
 8003d4a:	2b60      	cmp	r3, #96	@ 0x60
 8003d4c:	d85c      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x114>
 8003d4e:	2b50      	cmp	r3, #80	@ 0x50
 8003d50:	d046      	beq.n	8003de0 <TIM_SlaveTimer_SetConfig+0xec>
 8003d52:	2b50      	cmp	r3, #80	@ 0x50
 8003d54:	d858      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x114>
 8003d56:	2b40      	cmp	r3, #64	@ 0x40
 8003d58:	d019      	beq.n	8003d8e <TIM_SlaveTimer_SetConfig+0x9a>
 8003d5a:	2b40      	cmp	r3, #64	@ 0x40
 8003d5c:	d854      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x114>
 8003d5e:	2b30      	cmp	r3, #48	@ 0x30
 8003d60:	d055      	beq.n	8003e0e <TIM_SlaveTimer_SetConfig+0x11a>
 8003d62:	2b30      	cmp	r3, #48	@ 0x30
 8003d64:	d850      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x114>
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d051      	beq.n	8003e0e <TIM_SlaveTimer_SetConfig+0x11a>
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d84c      	bhi.n	8003e08 <TIM_SlaveTimer_SetConfig+0x114>
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d04d      	beq.n	8003e0e <TIM_SlaveTimer_SetConfig+0x11a>
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d04b      	beq.n	8003e0e <TIM_SlaveTimer_SetConfig+0x11a>
 8003d76:	e047      	b.n	8003e08 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003d88:	f000 f8c1 	bl	8003f0e <TIM_ETR_SetConfig>
      break;
 8003d8c:	e040      	b.n	8003e10 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	2b05      	cmp	r3, #5
 8003d94:	d101      	bne.n	8003d9a <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e03b      	b.n	8003e12 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6a1a      	ldr	r2, [r3, #32]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0201 	bic.w	r2, r2, #1
 8003db0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dc0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68fa      	ldr	r2, [r7, #12]
 8003ddc:	621a      	str	r2, [r3, #32]
      break;
 8003dde:	e017      	b.n	8003e10 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dec:	461a      	mov	r2, r3
 8003dee:	f000 f814 	bl	8003e1a <TIM_TI1_ConfigInputStage>
      break;
 8003df2:	e00d      	b.n	8003e10 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e00:	461a      	mov	r2, r3
 8003e02:	f000 f839 	bl	8003e78 <TIM_TI2_ConfigInputStage>
      break;
 8003e06:	e003      	b.n	8003e10 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0c:	e000      	b.n	8003e10 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 8003e0e:	bf00      	nop
  }

  return status;
 8003e10:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	3718      	adds	r7, #24
 8003e16:	46bd      	mov	sp, r7
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b087      	sub	sp, #28
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	60f8      	str	r0, [r7, #12]
 8003e22:	60b9      	str	r1, [r7, #8]
 8003e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	6a1b      	ldr	r3, [r3, #32]
 8003e30:	f023 0201 	bic.w	r2, r3, #1
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f023 030a 	bic.w	r3, r3, #10
 8003e56:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e58:	697a      	ldr	r2, [r7, #20]
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	693a      	ldr	r2, [r7, #16]
 8003e64:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	621a      	str	r2, [r3, #32]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a1b      	ldr	r3, [r3, #32]
 8003e88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	f023 0210 	bic.w	r2, r3, #16
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003ea2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	031b      	lsls	r3, r3, #12
 8003ea8:	693a      	ldr	r2, [r7, #16]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eb4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	693a      	ldr	r2, [r7, #16]
 8003ec4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	697a      	ldr	r2, [r7, #20]
 8003eca:	621a      	str	r2, [r3, #32]
}
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr

08003ed8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b085      	sub	sp, #20
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ef0:	683a      	ldr	r2, [r7, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	f043 0307 	orr.w	r3, r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	609a      	str	r2, [r3, #8]
}
 8003f02:	bf00      	nop
 8003f04:	3714      	adds	r7, #20
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr

08003f0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f0e:	b480      	push	{r7}
 8003f10:	b087      	sub	sp, #28
 8003f12:	af00      	add	r7, sp, #0
 8003f14:	60f8      	str	r0, [r7, #12]
 8003f16:	60b9      	str	r1, [r7, #8]
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	021a      	lsls	r2, r3, #8
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	609a      	str	r2, [r3, #8]
}
 8003f42:	bf00      	nop
 8003f44:	371c      	adds	r7, #28
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f4e:	b480      	push	{r7}
 8003f50:	b087      	sub	sp, #28
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	60f8      	str	r0, [r7, #12]
 8003f56:	60b9      	str	r1, [r7, #8]
 8003f58:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f5a:	68bb      	ldr	r3, [r7, #8]
 8003f5c:	f003 031f 	and.w	r3, r3, #31
 8003f60:	2201      	movs	r2, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	43db      	mvns	r3, r3
 8003f70:	401a      	ands	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a1a      	ldr	r2, [r3, #32]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f003 031f 	and.w	r3, r3, #31
 8003f80:	6879      	ldr	r1, [r7, #4]
 8003f82:	fa01 f303 	lsl.w	r3, r1, r3
 8003f86:	431a      	orrs	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIMEx_PWMN_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b084      	sub	sp, #16
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
 8003fa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_TIMEx_PWMN_Start_IT+0x28>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e022      	b.n	8004006 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d109      	bne.n	8003fda <HAL_TIMEx_PWMN_Start_IT+0x42>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e015      	b.n	8004006 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d109      	bne.n	8003ff4 <HAL_TIMEx_PWMN_Start_IT+0x5c>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e008      	b.n	8004006 <HAL_TIMEx_PWMN_Start_IT+0x6e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_TIMEx_PWMN_Start_IT+0x76>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e095      	b.n	800413a <HAL_TIMEx_PWMN_Start_IT+0x1a2>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_TIMEx_PWMN_Start_IT+0x86>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800401c:	e013      	b.n	8004046 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d104      	bne.n	800402e <HAL_TIMEx_PWMN_Start_IT+0x96>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800402c:	e00b      	b.n	8004046 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d104      	bne.n	800403e <HAL_TIMEx_PWMN_Start_IT+0xa6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800403c:	e003      	b.n	8004046 <HAL_TIMEx_PWMN_Start_IT+0xae>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	2b08      	cmp	r3, #8
 800404a:	d01b      	beq.n	8004084 <HAL_TIMEx_PWMN_Start_IT+0xec>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	2b08      	cmp	r3, #8
 8004050:	d821      	bhi.n	8004096 <HAL_TIMEx_PWMN_Start_IT+0xfe>
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d003      	beq.n	8004060 <HAL_TIMEx_PWMN_Start_IT+0xc8>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b04      	cmp	r3, #4
 800405c:	d009      	beq.n	8004072 <HAL_TIMEx_PWMN_Start_IT+0xda>
 800405e:	e01a      	b.n	8004096 <HAL_TIMEx_PWMN_Start_IT+0xfe>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f042 0202 	orr.w	r2, r2, #2
 800406e:	60da      	str	r2, [r3, #12]
      break;
 8004070:	e014      	b.n	800409c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	68da      	ldr	r2, [r3, #12]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0204 	orr.w	r2, r2, #4
 8004080:	60da      	str	r2, [r3, #12]
      break;
 8004082:	e00b      	b.n	800409c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68da      	ldr	r2, [r3, #12]
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f042 0208 	orr.w	r2, r2, #8
 8004092:	60da      	str	r2, [r3, #12]
      break;
 8004094:	e002      	b.n	800409c <HAL_TIMEx_PWMN_Start_IT+0x104>
    }

    default:
      status = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	73fb      	strb	r3, [r7, #15]
      break;
 800409a:	bf00      	nop
  }

  if (status == HAL_OK)
 800409c:	7bfb      	ldrb	r3, [r7, #15]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d14a      	bne.n	8004138 <HAL_TIMEx_PWMN_Start_IT+0x1a0>
  {
    /* Enable the TIM Break interrupt */
    __HAL_TIM_ENABLE_IT(htim, TIM_IT_BREAK);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80040b0:	60da      	str	r2, [r3, #12]

    /* Enable the complementary PWM output  */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	2204      	movs	r2, #4
 80040b8:	6839      	ldr	r1, [r7, #0]
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 f94e 	bl	800435c <TIM_CCxNChannelCmd>

    /* Enable the Main Output */
    __HAL_TIM_MOE_ENABLE(htim);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80040ce:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a1b      	ldr	r2, [pc, #108]	@ (8004144 <HAL_TIMEx_PWMN_Start_IT+0x1ac>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00e      	beq.n	80040f8 <HAL_TIMEx_PWMN_Start_IT+0x160>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040e2:	d009      	beq.n	80040f8 <HAL_TIMEx_PWMN_Start_IT+0x160>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a17      	ldr	r2, [pc, #92]	@ (8004148 <HAL_TIMEx_PWMN_Start_IT+0x1b0>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d004      	beq.n	80040f8 <HAL_TIMEx_PWMN_Start_IT+0x160>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a16      	ldr	r2, [pc, #88]	@ (800414c <HAL_TIMEx_PWMN_Start_IT+0x1b4>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d115      	bne.n	8004124 <HAL_TIMEx_PWMN_Start_IT+0x18c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	4b14      	ldr	r3, [pc, #80]	@ (8004150 <HAL_TIMEx_PWMN_Start_IT+0x1b8>)
 8004100:	4013      	ands	r3, r2
 8004102:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	2b06      	cmp	r3, #6
 8004108:	d015      	beq.n	8004136 <HAL_TIMEx_PWMN_Start_IT+0x19e>
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004110:	d011      	beq.n	8004136 <HAL_TIMEx_PWMN_Start_IT+0x19e>
      {
        __HAL_TIM_ENABLE(htim);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f042 0201 	orr.w	r2, r2, #1
 8004120:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004122:	e008      	b.n	8004136 <HAL_TIMEx_PWMN_Start_IT+0x19e>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681a      	ldr	r2, [r3, #0]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f042 0201 	orr.w	r2, r2, #1
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e000      	b.n	8004138 <HAL_TIMEx_PWMN_Start_IT+0x1a0>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004136:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40000400 	.word	0x40000400
 800414c:	40014000 	.word	0x40014000
 8004150:	00010007 	.word	0x00010007

08004154 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004164:	2b01      	cmp	r3, #1
 8004166:	d101      	bne.n	800416c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004168:	2302      	movs	r3, #2
 800416a:	e054      	b.n	8004216 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a24      	ldr	r2, [pc, #144]	@ (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d108      	bne.n	80041a8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800419c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a17      	ldr	r2, [pc, #92]	@ (8004224 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d00e      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041d4:	d009      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a13      	ldr	r2, [pc, #76]	@ (8004228 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d004      	beq.n	80041ea <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a11      	ldr	r2, [pc, #68]	@ (800422c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d10c      	bne.n	8004204 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80041f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68ba      	ldr	r2, [r7, #8]
 8004202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	2201      	movs	r2, #1
 8004208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004214:	2300      	movs	r3, #0
}
 8004216:	4618      	mov	r0, r3
 8004218:	3714      	adds	r7, #20
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40012c00 	.word	0x40012c00
 8004228:	40000400 	.word	0x40000400
 800422c:	40014000 	.word	0x40014000

08004230 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004230:	b480      	push	{r7}
 8004232:	b085      	sub	sp, #20
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800423a:	2300      	movs	r3, #0
 800423c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004248:	2302      	movs	r3, #2
 800424a:	e060      	b.n	800430e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	4313      	orrs	r3, r2
 8004260:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	689b      	ldr	r3, [r3, #8]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4313      	orrs	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	4313      	orrs	r3, r2
 8004298:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	695b      	ldr	r3, [r3, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	699b      	ldr	r3, [r3, #24]
 80042c0:	041b      	lsls	r3, r3, #16
 80042c2:	4313      	orrs	r3, r2
 80042c4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a14      	ldr	r2, [pc, #80]	@ (800431c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d115      	bne.n	80042fc <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	051b      	lsls	r3, r3, #20
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4313      	orrs	r3, r2
 80042ec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	6a1b      	ldr	r3, [r3, #32]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40012c00 	.word	0x40012c00

08004320 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004350:	bf00      	nop
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	2204      	movs	r2, #4
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	43db      	mvns	r3, r3
 800437e:	401a      	ands	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1a      	ldr	r2, [r3, #32]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	431a      	orrs	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr

080043a6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80043a6:	b480      	push	{r7}
 80043a8:	b085      	sub	sp, #20
 80043aa:	af00      	add	r7, sp, #0
 80043ac:	4603      	mov	r3, r0
 80043ae:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80043b0:	2300      	movs	r3, #0
 80043b2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80043b4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80043b8:	2b84      	cmp	r3, #132	@ 0x84
 80043ba:	d005      	beq.n	80043c8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80043bc:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4413      	add	r3, r2
 80043c4:	3303      	adds	r3, #3
 80043c6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80043c8:	68fb      	ldr	r3, [r7, #12]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80043d6:	b580      	push	{r7, lr}
 80043d8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80043da:	f000 fadb 	bl	8004994 <vTaskStartScheduler>
  
  return osOK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80043e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043e6:	b089      	sub	sp, #36	@ 0x24
 80043e8:	af04      	add	r7, sp, #16
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	695b      	ldr	r3, [r3, #20]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d020      	beq.n	8004438 <osThreadCreate+0x54>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d01c      	beq.n	8004438 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685c      	ldr	r4, [r3, #4]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	691e      	ldr	r6, [r3, #16]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff ffc8 	bl	80043a6 <makeFreeRtosPriority>
 8004416:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	695b      	ldr	r3, [r3, #20]
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004420:	9202      	str	r2, [sp, #8]
 8004422:	9301      	str	r3, [sp, #4]
 8004424:	9100      	str	r1, [sp, #0]
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	4632      	mov	r2, r6
 800442a:	4629      	mov	r1, r5
 800442c:	4620      	mov	r0, r4
 800442e:	f000 f8ed 	bl	800460c <xTaskCreateStatic>
 8004432:	4603      	mov	r3, r0
 8004434:	60fb      	str	r3, [r7, #12]
 8004436:	e01c      	b.n	8004472 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685c      	ldr	r4, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004444:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ffaa 	bl	80043a6 <makeFreeRtosPriority>
 8004452:	4602      	mov	r2, r0
 8004454:	f107 030c 	add.w	r3, r7, #12
 8004458:	9301      	str	r3, [sp, #4]
 800445a:	9200      	str	r2, [sp, #0]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	4632      	mov	r2, r6
 8004460:	4629      	mov	r1, r5
 8004462:	4620      	mov	r0, r4
 8004464:	f000 f931 	bl	80046ca <xTaskCreate>
 8004468:	4603      	mov	r3, r0
 800446a:	2b01      	cmp	r3, #1
 800446c:	d001      	beq.n	8004472 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800446e:	2300      	movs	r3, #0
 8004470:	e000      	b.n	8004474 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004472:	68fb      	ldr	r3, [r7, #12]
}
 8004474:	4618      	mov	r0, r3
 8004476:	3714      	adds	r7, #20
 8004478:	46bd      	mov	sp, r7
 800447a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800447c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <osDelay+0x16>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	e000      	b.n	8004494 <osDelay+0x18>
 8004492:	2301      	movs	r3, #1
 8004494:	4618      	mov	r0, r3
 8004496:	f000 fa47 	bl	8004928 <vTaskDelay>
  
  return osOK;
 800449a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800449c:	4618      	mov	r0, r3
 800449e:	3710      	adds	r7, #16
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bd80      	pop	{r7, pc}

080044a4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f103 0208 	add.w	r2, r3, #8
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f04f 32ff 	mov.w	r2, #4294967295
 80044bc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f103 0208 	add.w	r2, r3, #8
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f103 0208 	add.w	r2, r3, #8
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2200      	movs	r2, #0
 80044d6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044fe:	b480      	push	{r7}
 8004500:	b085      	sub	sp, #20
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
 8004506:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	1c5a      	adds	r2, r3, #1
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	601a      	str	r2, [r3, #0]
}
 800453a:	bf00      	nop
 800453c:	3714      	adds	r7, #20
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004546:	b480      	push	{r7}
 8004548:	b085      	sub	sp, #20
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800455c:	d103      	bne.n	8004566 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	60fb      	str	r3, [r7, #12]
 8004564:	e00c      	b.n	8004580 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	3308      	adds	r3, #8
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	e002      	b.n	8004574 <vListInsert+0x2e>
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	429a      	cmp	r2, r3
 800457e:	d2f6      	bcs.n	800456e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	685a      	ldr	r2, [r3, #4]
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68fa      	ldr	r2, [r7, #12]
 8004594:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	1c5a      	adds	r2, r3, #1
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	601a      	str	r2, [r3, #0]
}
 80045ac:	bf00      	nop
 80045ae:	3714      	adds	r7, #20
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	691b      	ldr	r3, [r3, #16]
 80045c4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6892      	ldr	r2, [r2, #8]
 80045ce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	6852      	ldr	r2, [r2, #4]
 80045d8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	429a      	cmp	r2, r3
 80045e2:	d103      	bne.n	80045ec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	1e5a      	subs	r2, r3, #1
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08e      	sub	sp, #56	@ 0x38
 8004610:	af04      	add	r7, sp, #16
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
 8004618:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800461a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10b      	bne.n	8004638 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800463a:	2b00      	cmp	r3, #0
 800463c:	d10b      	bne.n	8004656 <xTaskCreateStatic+0x4a>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	61fb      	str	r3, [r7, #28]
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	e7fd      	b.n	8004652 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004656:	2354      	movs	r3, #84	@ 0x54
 8004658:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	2b54      	cmp	r3, #84	@ 0x54
 800465e:	d00b      	beq.n	8004678 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	61bb      	str	r3, [r7, #24]
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	e7fd      	b.n	8004674 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004678:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800467a:	2b00      	cmp	r3, #0
 800467c:	d01e      	beq.n	80046bc <xTaskCreateStatic+0xb0>
 800467e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01b      	beq.n	80046bc <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004684:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004686:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800468c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800468e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004690:	2202      	movs	r2, #2
 8004692:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004696:	2300      	movs	r3, #0
 8004698:	9303      	str	r3, [sp, #12]
 800469a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800469c:	9302      	str	r3, [sp, #8]
 800469e:	f107 0314 	add.w	r3, r7, #20
 80046a2:	9301      	str	r3, [sp, #4]
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	68b9      	ldr	r1, [r7, #8]
 80046ae:	68f8      	ldr	r0, [r7, #12]
 80046b0:	f000 f850 	bl	8004754 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80046b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80046b6:	f000 f8cd 	bl	8004854 <prvAddNewTaskToReadyList>
 80046ba:	e001      	b.n	80046c0 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80046c0:	697b      	ldr	r3, [r7, #20]
	}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3728      	adds	r7, #40	@ 0x28
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b08c      	sub	sp, #48	@ 0x30
 80046ce:	af04      	add	r7, sp, #16
 80046d0:	60f8      	str	r0, [r7, #12]
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	603b      	str	r3, [r7, #0]
 80046d6:	4613      	mov	r3, r2
 80046d8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046da:	88fb      	ldrh	r3, [r7, #6]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fed2 	bl	8005488 <pvPortMalloc>
 80046e4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d00e      	beq.n	800470a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80046ec:	2054      	movs	r0, #84	@ 0x54
 80046ee:	f000 fecb 	bl	8005488 <pvPortMalloc>
 80046f2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d003      	beq.n	8004702 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
 8004700:	e005      	b.n	800470e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004702:	6978      	ldr	r0, [r7, #20]
 8004704:	f000 ff88 	bl	8005618 <vPortFree>
 8004708:	e001      	b.n	800470e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800470a:	2300      	movs	r3, #0
 800470c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d017      	beq.n	8004744 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800471c:	88fa      	ldrh	r2, [r7, #6]
 800471e:	2300      	movs	r3, #0
 8004720:	9303      	str	r3, [sp, #12]
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	9302      	str	r3, [sp, #8]
 8004726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004728:	9301      	str	r3, [sp, #4]
 800472a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	68b9      	ldr	r1, [r7, #8]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	f000 f80e 	bl	8004754 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004738:	69f8      	ldr	r0, [r7, #28]
 800473a:	f000 f88b 	bl	8004854 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800473e:	2301      	movs	r3, #1
 8004740:	61bb      	str	r3, [r7, #24]
 8004742:	e002      	b.n	800474a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004744:	f04f 33ff 	mov.w	r3, #4294967295
 8004748:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800474a:	69bb      	ldr	r3, [r7, #24]
	}
 800474c:	4618      	mov	r0, r3
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}

08004754 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b088      	sub	sp, #32
 8004758:	af00      	add	r7, sp, #0
 800475a:	60f8      	str	r0, [r7, #12]
 800475c:	60b9      	str	r1, [r7, #8]
 800475e:	607a      	str	r2, [r7, #4]
 8004760:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800476c:	3b01      	subs	r3, #1
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f023 0307 	bic.w	r3, r3, #7
 800477a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800477c:	69bb      	ldr	r3, [r7, #24]
 800477e:	f003 0307 	and.w	r3, r3, #7
 8004782:	2b00      	cmp	r3, #0
 8004784:	d00b      	beq.n	800479e <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	617b      	str	r3, [r7, #20]
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	e7fd      	b.n	800479a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800479e:	2300      	movs	r3, #0
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	e012      	b.n	80047ca <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	4413      	add	r3, r2
 80047aa:	7819      	ldrb	r1, [r3, #0]
 80047ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	4413      	add	r3, r2
 80047b2:	3334      	adds	r3, #52	@ 0x34
 80047b4:	460a      	mov	r2, r1
 80047b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80047b8:	68ba      	ldr	r2, [r7, #8]
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	4413      	add	r3, r2
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d006      	beq.n	80047d2 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80047c4:	69fb      	ldr	r3, [r7, #28]
 80047c6:	3301      	adds	r3, #1
 80047c8:	61fb      	str	r3, [r7, #28]
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	2b0f      	cmp	r3, #15
 80047ce:	d9e9      	bls.n	80047a4 <prvInitialiseNewTask+0x50>
 80047d0:	e000      	b.n	80047d4 <prvInitialiseNewTask+0x80>
		{
			break;
 80047d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80047d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	2b06      	cmp	r3, #6
 80047e0:	d901      	bls.n	80047e6 <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80047e2:	2306      	movs	r3, #6
 80047e4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80047e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047ea:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80047ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047f0:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80047f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047f4:	2200      	movs	r2, #0
 80047f6:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80047f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fa:	3304      	adds	r3, #4
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff fe71 	bl	80044e4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004802:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004804:	3318      	adds	r3, #24
 8004806:	4618      	mov	r0, r3
 8004808:	f7ff fe6c 	bl	80044e4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800480c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800480e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004810:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004814:	f1c3 0207 	rsb	r2, r3, #7
 8004818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800481c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800481e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004820:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004824:	2200      	movs	r2, #0
 8004826:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004828:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	68f9      	ldr	r1, [r7, #12]
 8004834:	69b8      	ldr	r0, [r7, #24]
 8004836:	f000 fc17 	bl	8005068 <pxPortInitialiseStack>
 800483a:	4602      	mov	r2, r0
 800483c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800483e:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004840:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004846:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004848:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800484a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800484c:	bf00      	nop
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800485c:	f000 fd34 	bl	80052c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004860:	4b2a      	ldr	r3, [pc, #168]	@ (800490c <prvAddNewTaskToReadyList+0xb8>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	3301      	adds	r3, #1
 8004866:	4a29      	ldr	r2, [pc, #164]	@ (800490c <prvAddNewTaskToReadyList+0xb8>)
 8004868:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800486a:	4b29      	ldr	r3, [pc, #164]	@ (8004910 <prvAddNewTaskToReadyList+0xbc>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d109      	bne.n	8004886 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004872:	4a27      	ldr	r2, [pc, #156]	@ (8004910 <prvAddNewTaskToReadyList+0xbc>)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004878:	4b24      	ldr	r3, [pc, #144]	@ (800490c <prvAddNewTaskToReadyList+0xb8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	d110      	bne.n	80048a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004880:	f000 fac8 	bl	8004e14 <prvInitialiseTaskLists>
 8004884:	e00d      	b.n	80048a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004886:	4b23      	ldr	r3, [pc, #140]	@ (8004914 <prvAddNewTaskToReadyList+0xc0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d109      	bne.n	80048a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800488e:	4b20      	ldr	r3, [pc, #128]	@ (8004910 <prvAddNewTaskToReadyList+0xbc>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	429a      	cmp	r2, r3
 800489a:	d802      	bhi.n	80048a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800489c:	4a1c      	ldr	r2, [pc, #112]	@ (8004910 <prvAddNewTaskToReadyList+0xbc>)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80048a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004918 <prvAddNewTaskToReadyList+0xc4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	3301      	adds	r3, #1
 80048a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004918 <prvAddNewTaskToReadyList+0xc4>)
 80048aa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	2201      	movs	r2, #1
 80048b2:	409a      	lsls	r2, r3
 80048b4:	4b19      	ldr	r3, [pc, #100]	@ (800491c <prvAddNewTaskToReadyList+0xc8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	4a18      	ldr	r2, [pc, #96]	@ (800491c <prvAddNewTaskToReadyList+0xc8>)
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048c2:	4613      	mov	r3, r2
 80048c4:	009b      	lsls	r3, r3, #2
 80048c6:	4413      	add	r3, r2
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	4a15      	ldr	r2, [pc, #84]	@ (8004920 <prvAddNewTaskToReadyList+0xcc>)
 80048cc:	441a      	add	r2, r3
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	3304      	adds	r3, #4
 80048d2:	4619      	mov	r1, r3
 80048d4:	4610      	mov	r0, r2
 80048d6:	f7ff fe12 	bl	80044fe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80048da:	f000 fd27 	bl	800532c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80048de:	4b0d      	ldr	r3, [pc, #52]	@ (8004914 <prvAddNewTaskToReadyList+0xc0>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00e      	beq.n	8004904 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80048e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004910 <prvAddNewTaskToReadyList+0xbc>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d207      	bcs.n	8004904 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80048f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004924 <prvAddNewTaskToReadyList+0xd0>)
 80048f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004904:	bf00      	nop
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}
 800490c:	200004fc 	.word	0x200004fc
 8004910:	200003fc 	.word	0x200003fc
 8004914:	20000508 	.word	0x20000508
 8004918:	20000518 	.word	0x20000518
 800491c:	20000504 	.word	0x20000504
 8004920:	20000400 	.word	0x20000400
 8004924:	e000ed04 	.word	0xe000ed04

08004928 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004930:	2300      	movs	r3, #0
 8004932:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d018      	beq.n	800496c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800493a:	4b14      	ldr	r3, [pc, #80]	@ (800498c <vTaskDelay+0x64>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d00b      	beq.n	800495a <vTaskDelay+0x32>
	__asm volatile
 8004942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004946:	f383 8811 	msr	BASEPRI, r3
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	f3bf 8f4f 	dsb	sy
 8004952:	60bb      	str	r3, [r7, #8]
}
 8004954:	bf00      	nop
 8004956:	bf00      	nop
 8004958:	e7fd      	b.n	8004956 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800495a:	f000 f87d 	bl	8004a58 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800495e:	2100      	movs	r1, #0
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fb1b 	bl	8004f9c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004966:	f000 f885 	bl	8004a74 <xTaskResumeAll>
 800496a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d107      	bne.n	8004982 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004972:	4b07      	ldr	r3, [pc, #28]	@ (8004990 <vTaskDelay+0x68>)
 8004974:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004978:	601a      	str	r2, [r3, #0]
 800497a:	f3bf 8f4f 	dsb	sy
 800497e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004982:	bf00      	nop
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
 800498a:	bf00      	nop
 800498c:	20000524 	.word	0x20000524
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b08a      	sub	sp, #40	@ 0x28
 8004998:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800499a:	2300      	movs	r3, #0
 800499c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800499e:	2300      	movs	r3, #0
 80049a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80049a2:	463a      	mov	r2, r7
 80049a4:	1d39      	adds	r1, r7, #4
 80049a6:	f107 0308 	add.w	r3, r7, #8
 80049aa:	4618      	mov	r0, r3
 80049ac:	f7fb fc10 	bl	80001d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80049b0:	6839      	ldr	r1, [r7, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	9202      	str	r2, [sp, #8]
 80049b8:	9301      	str	r3, [sp, #4]
 80049ba:	2300      	movs	r3, #0
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	2300      	movs	r3, #0
 80049c0:	460a      	mov	r2, r1
 80049c2:	491f      	ldr	r1, [pc, #124]	@ (8004a40 <vTaskStartScheduler+0xac>)
 80049c4:	481f      	ldr	r0, [pc, #124]	@ (8004a44 <vTaskStartScheduler+0xb0>)
 80049c6:	f7ff fe21 	bl	800460c <xTaskCreateStatic>
 80049ca:	4603      	mov	r3, r0
 80049cc:	4a1e      	ldr	r2, [pc, #120]	@ (8004a48 <vTaskStartScheduler+0xb4>)
 80049ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80049d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004a48 <vTaskStartScheduler+0xb4>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d002      	beq.n	80049de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80049d8:	2301      	movs	r3, #1
 80049da:	617b      	str	r3, [r7, #20]
 80049dc:	e001      	b.n	80049e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80049de:	2300      	movs	r3, #0
 80049e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d116      	bne.n	8004a16 <vTaskStartScheduler+0x82>
	__asm volatile
 80049e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ec:	f383 8811 	msr	BASEPRI, r3
 80049f0:	f3bf 8f6f 	isb	sy
 80049f4:	f3bf 8f4f 	dsb	sy
 80049f8:	613b      	str	r3, [r7, #16]
}
 80049fa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049fc:	4b13      	ldr	r3, [pc, #76]	@ (8004a4c <vTaskStartScheduler+0xb8>)
 80049fe:	f04f 32ff 	mov.w	r2, #4294967295
 8004a02:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004a04:	4b12      	ldr	r3, [pc, #72]	@ (8004a50 <vTaskStartScheduler+0xbc>)
 8004a06:	2201      	movs	r2, #1
 8004a08:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004a0a:	4b12      	ldr	r3, [pc, #72]	@ (8004a54 <vTaskStartScheduler+0xc0>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004a10:	f000 fbb6 	bl	8005180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004a14:	e00f      	b.n	8004a36 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1c:	d10b      	bne.n	8004a36 <vTaskStartScheduler+0xa2>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	60fb      	str	r3, [r7, #12]
}
 8004a30:	bf00      	nop
 8004a32:	bf00      	nop
 8004a34:	e7fd      	b.n	8004a32 <vTaskStartScheduler+0x9e>
}
 8004a36:	bf00      	nop
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	08005904 	.word	0x08005904
 8004a44:	08004de5 	.word	0x08004de5
 8004a48:	20000520 	.word	0x20000520
 8004a4c:	2000051c 	.word	0x2000051c
 8004a50:	20000508 	.word	0x20000508
 8004a54:	20000500 	.word	0x20000500

08004a58 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004a5c:	4b04      	ldr	r3, [pc, #16]	@ (8004a70 <vTaskSuspendAll+0x18>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3301      	adds	r3, #1
 8004a62:	4a03      	ldr	r2, [pc, #12]	@ (8004a70 <vTaskSuspendAll+0x18>)
 8004a64:	6013      	str	r3, [r2, #0]
}
 8004a66:	bf00      	nop
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	20000524 	.word	0x20000524

08004a74 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a82:	4b42      	ldr	r3, [pc, #264]	@ (8004b8c <xTaskResumeAll+0x118>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d10b      	bne.n	8004aa2 <xTaskResumeAll+0x2e>
	__asm volatile
 8004a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a8e:	f383 8811 	msr	BASEPRI, r3
 8004a92:	f3bf 8f6f 	isb	sy
 8004a96:	f3bf 8f4f 	dsb	sy
 8004a9a:	603b      	str	r3, [r7, #0]
}
 8004a9c:	bf00      	nop
 8004a9e:	bf00      	nop
 8004aa0:	e7fd      	b.n	8004a9e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004aa2:	f000 fc11 	bl	80052c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004aa6:	4b39      	ldr	r3, [pc, #228]	@ (8004b8c <xTaskResumeAll+0x118>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3b01      	subs	r3, #1
 8004aac:	4a37      	ldr	r2, [pc, #220]	@ (8004b8c <xTaskResumeAll+0x118>)
 8004aae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab0:	4b36      	ldr	r3, [pc, #216]	@ (8004b8c <xTaskResumeAll+0x118>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d161      	bne.n	8004b7c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004ab8:	4b35      	ldr	r3, [pc, #212]	@ (8004b90 <xTaskResumeAll+0x11c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d05d      	beq.n	8004b7c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ac0:	e02e      	b.n	8004b20 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004ac2:	4b34      	ldr	r3, [pc, #208]	@ (8004b94 <xTaskResumeAll+0x120>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	3318      	adds	r3, #24
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f7ff fd72 	bl	80045b8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3304      	adds	r3, #4
 8004ad8:	4618      	mov	r0, r3
 8004ada:	f7ff fd6d 	bl	80045b8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ae2:	2201      	movs	r2, #1
 8004ae4:	409a      	lsls	r2, r3
 8004ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8004b98 <xTaskResumeAll+0x124>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	4a2a      	ldr	r2, [pc, #168]	@ (8004b98 <xTaskResumeAll+0x124>)
 8004aee:	6013      	str	r3, [r2, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004af4:	4613      	mov	r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	4413      	add	r3, r2
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	4a27      	ldr	r2, [pc, #156]	@ (8004b9c <xTaskResumeAll+0x128>)
 8004afe:	441a      	add	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	3304      	adds	r3, #4
 8004b04:	4619      	mov	r1, r3
 8004b06:	4610      	mov	r0, r2
 8004b08:	f7ff fcf9 	bl	80044fe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b10:	4b23      	ldr	r3, [pc, #140]	@ (8004ba0 <xTaskResumeAll+0x12c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d302      	bcc.n	8004b20 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004b1a:	4b22      	ldr	r3, [pc, #136]	@ (8004ba4 <xTaskResumeAll+0x130>)
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b20:	4b1c      	ldr	r3, [pc, #112]	@ (8004b94 <xTaskResumeAll+0x120>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1cc      	bne.n	8004ac2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d001      	beq.n	8004b32 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004b2e:	f000 fa0f 	bl	8004f50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004b32:	4b1d      	ldr	r3, [pc, #116]	@ (8004ba8 <xTaskResumeAll+0x134>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d010      	beq.n	8004b60 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004b3e:	f000 f837 	bl	8004bb0 <xTaskIncrementTick>
 8004b42:	4603      	mov	r3, r0
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d002      	beq.n	8004b4e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004b48:	4b16      	ldr	r3, [pc, #88]	@ (8004ba4 <xTaskResumeAll+0x130>)
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d1f1      	bne.n	8004b3e <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8004b5a:	4b13      	ldr	r3, [pc, #76]	@ (8004ba8 <xTaskResumeAll+0x134>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b60:	4b10      	ldr	r3, [pc, #64]	@ (8004ba4 <xTaskResumeAll+0x130>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d009      	beq.n	8004b7c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b6c:	4b0f      	ldr	r3, [pc, #60]	@ (8004bac <xTaskResumeAll+0x138>)
 8004b6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b7c:	f000 fbd6 	bl	800532c <vPortExitCritical>

	return xAlreadyYielded;
 8004b80:	68bb      	ldr	r3, [r7, #8]
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3710      	adds	r7, #16
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	20000524 	.word	0x20000524
 8004b90:	200004fc 	.word	0x200004fc
 8004b94:	200004bc 	.word	0x200004bc
 8004b98:	20000504 	.word	0x20000504
 8004b9c:	20000400 	.word	0x20000400
 8004ba0:	200003fc 	.word	0x200003fc
 8004ba4:	20000510 	.word	0x20000510
 8004ba8:	2000050c 	.word	0x2000050c
 8004bac:	e000ed04 	.word	0xe000ed04

08004bb0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bba:	4b51      	ldr	r3, [pc, #324]	@ (8004d00 <xTaskIncrementTick+0x150>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 808e 	bne.w	8004ce0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004bc4:	4b4f      	ldr	r3, [pc, #316]	@ (8004d04 <xTaskIncrementTick+0x154>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004bcc:	4a4d      	ldr	r2, [pc, #308]	@ (8004d04 <xTaskIncrementTick+0x154>)
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d121      	bne.n	8004c1c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bd8:	4b4b      	ldr	r3, [pc, #300]	@ (8004d08 <xTaskIncrementTick+0x158>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d00b      	beq.n	8004bfa <xTaskIncrementTick+0x4a>
	__asm volatile
 8004be2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be6:	f383 8811 	msr	BASEPRI, r3
 8004bea:	f3bf 8f6f 	isb	sy
 8004bee:	f3bf 8f4f 	dsb	sy
 8004bf2:	603b      	str	r3, [r7, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop
 8004bf8:	e7fd      	b.n	8004bf6 <xTaskIncrementTick+0x46>
 8004bfa:	4b43      	ldr	r3, [pc, #268]	@ (8004d08 <xTaskIncrementTick+0x158>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	4b42      	ldr	r3, [pc, #264]	@ (8004d0c <xTaskIncrementTick+0x15c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a40      	ldr	r2, [pc, #256]	@ (8004d08 <xTaskIncrementTick+0x158>)
 8004c06:	6013      	str	r3, [r2, #0]
 8004c08:	4a40      	ldr	r2, [pc, #256]	@ (8004d0c <xTaskIncrementTick+0x15c>)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6013      	str	r3, [r2, #0]
 8004c0e:	4b40      	ldr	r3, [pc, #256]	@ (8004d10 <xTaskIncrementTick+0x160>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3301      	adds	r3, #1
 8004c14:	4a3e      	ldr	r2, [pc, #248]	@ (8004d10 <xTaskIncrementTick+0x160>)
 8004c16:	6013      	str	r3, [r2, #0]
 8004c18:	f000 f99a 	bl	8004f50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004c1c:	4b3d      	ldr	r3, [pc, #244]	@ (8004d14 <xTaskIncrementTick+0x164>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	693a      	ldr	r2, [r7, #16]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d34d      	bcc.n	8004cc2 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c26:	4b38      	ldr	r3, [pc, #224]	@ (8004d08 <xTaskIncrementTick+0x158>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d101      	bne.n	8004c34 <xTaskIncrementTick+0x84>
 8004c30:	2301      	movs	r3, #1
 8004c32:	e000      	b.n	8004c36 <xTaskIncrementTick+0x86>
 8004c34:	2300      	movs	r3, #0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d004      	beq.n	8004c44 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c3a:	4b36      	ldr	r3, [pc, #216]	@ (8004d14 <xTaskIncrementTick+0x164>)
 8004c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c40:	601a      	str	r2, [r3, #0]
					break;
 8004c42:	e03e      	b.n	8004cc2 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004c44:	4b30      	ldr	r3, [pc, #192]	@ (8004d08 <xTaskIncrementTick+0x158>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d203      	bcs.n	8004c64 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c5c:	4a2d      	ldr	r2, [pc, #180]	@ (8004d14 <xTaskIncrementTick+0x164>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6013      	str	r3, [r2, #0]
						break;
 8004c62:	e02e      	b.n	8004cc2 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7ff fca5 	bl	80045b8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d004      	beq.n	8004c80 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	3318      	adds	r3, #24
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7ff fc9c 	bl	80045b8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c84:	2201      	movs	r2, #1
 8004c86:	409a      	lsls	r2, r3
 8004c88:	4b23      	ldr	r3, [pc, #140]	@ (8004d18 <xTaskIncrementTick+0x168>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	4a22      	ldr	r2, [pc, #136]	@ (8004d18 <xTaskIncrementTick+0x168>)
 8004c90:	6013      	str	r3, [r2, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4a1f      	ldr	r2, [pc, #124]	@ (8004d1c <xTaskIncrementTick+0x16c>)
 8004ca0:	441a      	add	r2, r3
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4610      	mov	r0, r2
 8004caa:	f7ff fc28 	bl	80044fe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8004d20 <xTaskIncrementTick+0x170>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d3b4      	bcc.n	8004c26 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cc0:	e7b1      	b.n	8004c26 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004cc2:	4b17      	ldr	r3, [pc, #92]	@ (8004d20 <xTaskIncrementTick+0x170>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cc8:	4914      	ldr	r1, [pc, #80]	@ (8004d1c <xTaskIncrementTick+0x16c>)
 8004cca:	4613      	mov	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	4413      	add	r3, r2
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	440b      	add	r3, r1
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d907      	bls.n	8004cea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004cda:	2301      	movs	r3, #1
 8004cdc:	617b      	str	r3, [r7, #20]
 8004cde:	e004      	b.n	8004cea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004ce0:	4b10      	ldr	r3, [pc, #64]	@ (8004d24 <xTaskIncrementTick+0x174>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3301      	adds	r3, #1
 8004ce6:	4a0f      	ldr	r2, [pc, #60]	@ (8004d24 <xTaskIncrementTick+0x174>)
 8004ce8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004cea:	4b0f      	ldr	r3, [pc, #60]	@ (8004d28 <xTaskIncrementTick+0x178>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d001      	beq.n	8004cf6 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004cf6:	697b      	ldr	r3, [r7, #20]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000524 	.word	0x20000524
 8004d04:	20000500 	.word	0x20000500
 8004d08:	200004b4 	.word	0x200004b4
 8004d0c:	200004b8 	.word	0x200004b8
 8004d10:	20000514 	.word	0x20000514
 8004d14:	2000051c 	.word	0x2000051c
 8004d18:	20000504 	.word	0x20000504
 8004d1c:	20000400 	.word	0x20000400
 8004d20:	200003fc 	.word	0x200003fc
 8004d24:	2000050c 	.word	0x2000050c
 8004d28:	20000510 	.word	0x20000510

08004d2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004d32:	4b27      	ldr	r3, [pc, #156]	@ (8004dd0 <vTaskSwitchContext+0xa4>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d3a:	4b26      	ldr	r3, [pc, #152]	@ (8004dd4 <vTaskSwitchContext+0xa8>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d40:	e040      	b.n	8004dc4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8004d42:	4b24      	ldr	r3, [pc, #144]	@ (8004dd4 <vTaskSwitchContext+0xa8>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004d48:	4b23      	ldr	r3, [pc, #140]	@ (8004dd8 <vTaskSwitchContext+0xac>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	fab3 f383 	clz	r3, r3
 8004d54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004d56:	7afb      	ldrb	r3, [r7, #11]
 8004d58:	f1c3 031f 	rsb	r3, r3, #31
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	491f      	ldr	r1, [pc, #124]	@ (8004ddc <vTaskSwitchContext+0xb0>)
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4613      	mov	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	4413      	add	r3, r2
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10b      	bne.n	8004d8a <vTaskSwitchContext+0x5e>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	607b      	str	r3, [r7, #4]
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
 8004d88:	e7fd      	b.n	8004d86 <vTaskSwitchContext+0x5a>
 8004d8a:	697a      	ldr	r2, [r7, #20]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	009b      	lsls	r3, r3, #2
 8004d94:	4a11      	ldr	r2, [pc, #68]	@ (8004ddc <vTaskSwitchContext+0xb0>)
 8004d96:	4413      	add	r3, r2
 8004d98:	613b      	str	r3, [r7, #16]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	605a      	str	r2, [r3, #4]
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	3308      	adds	r3, #8
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d104      	bne.n	8004dba <vTaskSwitchContext+0x8e>
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	605a      	str	r2, [r3, #4]
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	4a07      	ldr	r2, [pc, #28]	@ (8004de0 <vTaskSwitchContext+0xb4>)
 8004dc2:	6013      	str	r3, [r2, #0]
}
 8004dc4:	bf00      	nop
 8004dc6:	371c      	adds	r7, #28
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	20000524 	.word	0x20000524
 8004dd4:	20000510 	.word	0x20000510
 8004dd8:	20000504 	.word	0x20000504
 8004ddc:	20000400 	.word	0x20000400
 8004de0:	200003fc 	.word	0x200003fc

08004de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dec:	f000 f852 	bl	8004e94 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004df0:	4b06      	ldr	r3, [pc, #24]	@ (8004e0c <prvIdleTask+0x28>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d9f9      	bls.n	8004dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <prvIdleTask+0x2c>)
 8004dfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004dfe:	601a      	str	r2, [r3, #0]
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e08:	e7f0      	b.n	8004dec <prvIdleTask+0x8>
 8004e0a:	bf00      	nop
 8004e0c:	20000400 	.word	0x20000400
 8004e10:	e000ed04 	.word	0xe000ed04

08004e14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	607b      	str	r3, [r7, #4]
 8004e1e:	e00c      	b.n	8004e3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	4613      	mov	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	4a12      	ldr	r2, [pc, #72]	@ (8004e74 <prvInitialiseTaskLists+0x60>)
 8004e2c:	4413      	add	r3, r2
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fb38 	bl	80044a4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	3301      	adds	r3, #1
 8004e38:	607b      	str	r3, [r7, #4]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b06      	cmp	r3, #6
 8004e3e:	d9ef      	bls.n	8004e20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e40:	480d      	ldr	r0, [pc, #52]	@ (8004e78 <prvInitialiseTaskLists+0x64>)
 8004e42:	f7ff fb2f 	bl	80044a4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e46:	480d      	ldr	r0, [pc, #52]	@ (8004e7c <prvInitialiseTaskLists+0x68>)
 8004e48:	f7ff fb2c 	bl	80044a4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e4c:	480c      	ldr	r0, [pc, #48]	@ (8004e80 <prvInitialiseTaskLists+0x6c>)
 8004e4e:	f7ff fb29 	bl	80044a4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e52:	480c      	ldr	r0, [pc, #48]	@ (8004e84 <prvInitialiseTaskLists+0x70>)
 8004e54:	f7ff fb26 	bl	80044a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e58:	480b      	ldr	r0, [pc, #44]	@ (8004e88 <prvInitialiseTaskLists+0x74>)
 8004e5a:	f7ff fb23 	bl	80044a4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e5e:	4b0b      	ldr	r3, [pc, #44]	@ (8004e8c <prvInitialiseTaskLists+0x78>)
 8004e60:	4a05      	ldr	r2, [pc, #20]	@ (8004e78 <prvInitialiseTaskLists+0x64>)
 8004e62:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e64:	4b0a      	ldr	r3, [pc, #40]	@ (8004e90 <prvInitialiseTaskLists+0x7c>)
 8004e66:	4a05      	ldr	r2, [pc, #20]	@ (8004e7c <prvInitialiseTaskLists+0x68>)
 8004e68:	601a      	str	r2, [r3, #0]
}
 8004e6a:	bf00      	nop
 8004e6c:	3708      	adds	r7, #8
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000400 	.word	0x20000400
 8004e78:	2000048c 	.word	0x2000048c
 8004e7c:	200004a0 	.word	0x200004a0
 8004e80:	200004bc 	.word	0x200004bc
 8004e84:	200004d0 	.word	0x200004d0
 8004e88:	200004e8 	.word	0x200004e8
 8004e8c:	200004b4 	.word	0x200004b4
 8004e90:	200004b8 	.word	0x200004b8

08004e94 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b082      	sub	sp, #8
 8004e98:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e9a:	e019      	b.n	8004ed0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e9c:	f000 fa14 	bl	80052c8 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ea0:	4b10      	ldr	r3, [pc, #64]	@ (8004ee4 <prvCheckTasksWaitingTermination+0x50>)
 8004ea2:	68db      	ldr	r3, [r3, #12]
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7ff fb83 	bl	80045b8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee8 <prvCheckTasksWaitingTermination+0x54>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	4a0b      	ldr	r2, [pc, #44]	@ (8004ee8 <prvCheckTasksWaitingTermination+0x54>)
 8004eba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ebc:	4b0b      	ldr	r3, [pc, #44]	@ (8004eec <prvCheckTasksWaitingTermination+0x58>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	3b01      	subs	r3, #1
 8004ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8004eec <prvCheckTasksWaitingTermination+0x58>)
 8004ec4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004ec6:	f000 fa31 	bl	800532c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 f810 	bl	8004ef0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ed0:	4b06      	ldr	r3, [pc, #24]	@ (8004eec <prvCheckTasksWaitingTermination+0x58>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e1      	bne.n	8004e9c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ed8:	bf00      	nop
 8004eda:	bf00      	nop
 8004edc:	3708      	adds	r7, #8
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	200004d0 	.word	0x200004d0
 8004ee8:	200004fc 	.word	0x200004fc
 8004eec:	200004e4 	.word	0x200004e4

08004ef0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d108      	bne.n	8004f14 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f06:	4618      	mov	r0, r3
 8004f08:	f000 fb86 	bl	8005618 <vPortFree>
				vPortFree( pxTCB );
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f000 fb83 	bl	8005618 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f12:	e019      	b.n	8004f48 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d103      	bne.n	8004f26 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 fb7a 	bl	8005618 <vPortFree>
	}
 8004f24:	e010      	b.n	8004f48 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d00b      	beq.n	8004f48 <prvDeleteTCB+0x58>
	__asm volatile
 8004f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f34:	f383 8811 	msr	BASEPRI, r3
 8004f38:	f3bf 8f6f 	isb	sy
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	60fb      	str	r3, [r7, #12]
}
 8004f42:	bf00      	nop
 8004f44:	bf00      	nop
 8004f46:	e7fd      	b.n	8004f44 <prvDeleteTCB+0x54>
	}
 8004f48:	bf00      	nop
 8004f4a:	3710      	adds	r7, #16
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}

08004f50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f56:	4b0f      	ldr	r3, [pc, #60]	@ (8004f94 <prvResetNextTaskUnblockTime+0x44>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d101      	bne.n	8004f64 <prvResetNextTaskUnblockTime+0x14>
 8004f60:	2301      	movs	r3, #1
 8004f62:	e000      	b.n	8004f66 <prvResetNextTaskUnblockTime+0x16>
 8004f64:	2300      	movs	r3, #0
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d004      	beq.n	8004f74 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f6a:	4b0b      	ldr	r3, [pc, #44]	@ (8004f98 <prvResetNextTaskUnblockTime+0x48>)
 8004f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004f70:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f72:	e008      	b.n	8004f86 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f74:	4b07      	ldr	r3, [pc, #28]	@ (8004f94 <prvResetNextTaskUnblockTime+0x44>)
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	4a05      	ldr	r2, [pc, #20]	@ (8004f98 <prvResetNextTaskUnblockTime+0x48>)
 8004f84:	6013      	str	r3, [r2, #0]
}
 8004f86:	bf00      	nop
 8004f88:	370c      	adds	r7, #12
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	200004b4 	.word	0x200004b4
 8004f98:	2000051c 	.word	0x2000051c

08004f9c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fa6:	4b29      	ldr	r3, [pc, #164]	@ (800504c <prvAddCurrentTaskToDelayedList+0xb0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fac:	4b28      	ldr	r3, [pc, #160]	@ (8005050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	3304      	adds	r3, #4
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f7ff fb00 	bl	80045b8 <uxListRemove>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d10b      	bne.n	8004fd6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004fbe:	4b24      	ldr	r3, [pc, #144]	@ (8005050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fca:	43da      	mvns	r2, r3
 8004fcc:	4b21      	ldr	r3, [pc, #132]	@ (8005054 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	4a20      	ldr	r2, [pc, #128]	@ (8005054 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004fd4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fdc:	d10a      	bne.n	8004ff4 <prvAddCurrentTaskToDelayedList+0x58>
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d007      	beq.n	8004ff4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8005050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4619      	mov	r1, r3
 8004fec:	481a      	ldr	r0, [pc, #104]	@ (8005058 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004fee:	f7ff fa86 	bl	80044fe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004ff2:	e026      	b.n	8005042 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ffc:	4b14      	ldr	r3, [pc, #80]	@ (8005050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005004:	68ba      	ldr	r2, [r7, #8]
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	429a      	cmp	r2, r3
 800500a:	d209      	bcs.n	8005020 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800500c:	4b13      	ldr	r3, [pc, #76]	@ (800505c <prvAddCurrentTaskToDelayedList+0xc0>)
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	4b0f      	ldr	r3, [pc, #60]	@ (8005050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3304      	adds	r3, #4
 8005016:	4619      	mov	r1, r3
 8005018:	4610      	mov	r0, r2
 800501a:	f7ff fa94 	bl	8004546 <vListInsert>
}
 800501e:	e010      	b.n	8005042 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005020:	4b0f      	ldr	r3, [pc, #60]	@ (8005060 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	4b0a      	ldr	r3, [pc, #40]	@ (8005050 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	3304      	adds	r3, #4
 800502a:	4619      	mov	r1, r3
 800502c:	4610      	mov	r0, r2
 800502e:	f7ff fa8a 	bl	8004546 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005032:	4b0c      	ldr	r3, [pc, #48]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68ba      	ldr	r2, [r7, #8]
 8005038:	429a      	cmp	r2, r3
 800503a:	d202      	bcs.n	8005042 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800503c:	4a09      	ldr	r2, [pc, #36]	@ (8005064 <prvAddCurrentTaskToDelayedList+0xc8>)
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6013      	str	r3, [r2, #0]
}
 8005042:	bf00      	nop
 8005044:	3710      	adds	r7, #16
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	20000500 	.word	0x20000500
 8005050:	200003fc 	.word	0x200003fc
 8005054:	20000504 	.word	0x20000504
 8005058:	200004e8 	.word	0x200004e8
 800505c:	200004b8 	.word	0x200004b8
 8005060:	200004b4 	.word	0x200004b4
 8005064:	2000051c 	.word	0x2000051c

08005068 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	60f8      	str	r0, [r7, #12]
 8005070:	60b9      	str	r1, [r7, #8]
 8005072:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	3b04      	subs	r3, #4
 8005078:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005080:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	3b04      	subs	r3, #4
 8005086:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	f023 0201 	bic.w	r2, r3, #1
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	3b04      	subs	r3, #4
 8005096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005098:	4a0c      	ldr	r2, [pc, #48]	@ (80050cc <pxPortInitialiseStack+0x64>)
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3b14      	subs	r3, #20
 80050a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	3b04      	subs	r3, #4
 80050ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f06f 0202 	mvn.w	r2, #2
 80050b6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	3b20      	subs	r3, #32
 80050bc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050be:	68fb      	ldr	r3, [r7, #12]
}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr
 80050cc:	080050d1 	.word	0x080050d1

080050d0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80050d6:	2300      	movs	r3, #0
 80050d8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80050da:	4b13      	ldr	r3, [pc, #76]	@ (8005128 <prvTaskExitError+0x58>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d00b      	beq.n	80050fc <prvTaskExitError+0x2c>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	60fb      	str	r3, [r7, #12]
}
 80050f6:	bf00      	nop
 80050f8:	bf00      	nop
 80050fa:	e7fd      	b.n	80050f8 <prvTaskExitError+0x28>
	__asm volatile
 80050fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005100:	f383 8811 	msr	BASEPRI, r3
 8005104:	f3bf 8f6f 	isb	sy
 8005108:	f3bf 8f4f 	dsb	sy
 800510c:	60bb      	str	r3, [r7, #8]
}
 800510e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005110:	bf00      	nop
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d0fc      	beq.n	8005112 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005118:	bf00      	nop
 800511a:	bf00      	nop
 800511c:	3714      	adds	r7, #20
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000010 	.word	0x20000010
 800512c:	00000000 	.word	0x00000000

08005130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005130:	4b07      	ldr	r3, [pc, #28]	@ (8005150 <pxCurrentTCBConst2>)
 8005132:	6819      	ldr	r1, [r3, #0]
 8005134:	6808      	ldr	r0, [r1, #0]
 8005136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513a:	f380 8809 	msr	PSP, r0
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f04f 0000 	mov.w	r0, #0
 8005146:	f380 8811 	msr	BASEPRI, r0
 800514a:	4770      	bx	lr
 800514c:	f3af 8000 	nop.w

08005150 <pxCurrentTCBConst2>:
 8005150:	200003fc 	.word	0x200003fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005154:	bf00      	nop
 8005156:	bf00      	nop

08005158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005158:	4808      	ldr	r0, [pc, #32]	@ (800517c <prvPortStartFirstTask+0x24>)
 800515a:	6800      	ldr	r0, [r0, #0]
 800515c:	6800      	ldr	r0, [r0, #0]
 800515e:	f380 8808 	msr	MSP, r0
 8005162:	f04f 0000 	mov.w	r0, #0
 8005166:	f380 8814 	msr	CONTROL, r0
 800516a:	b662      	cpsie	i
 800516c:	b661      	cpsie	f
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	df00      	svc	0
 8005178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800517a:	bf00      	nop
 800517c:	e000ed08 	.word	0xe000ed08

08005180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005186:	4b47      	ldr	r3, [pc, #284]	@ (80052a4 <xPortStartScheduler+0x124>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a47      	ldr	r2, [pc, #284]	@ (80052a8 <xPortStartScheduler+0x128>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d10b      	bne.n	80051a8 <xPortStartScheduler+0x28>
	__asm volatile
 8005190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005194:	f383 8811 	msr	BASEPRI, r3
 8005198:	f3bf 8f6f 	isb	sy
 800519c:	f3bf 8f4f 	dsb	sy
 80051a0:	613b      	str	r3, [r7, #16]
}
 80051a2:	bf00      	nop
 80051a4:	bf00      	nop
 80051a6:	e7fd      	b.n	80051a4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051a8:	4b3e      	ldr	r3, [pc, #248]	@ (80052a4 <xPortStartScheduler+0x124>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a3f      	ldr	r2, [pc, #252]	@ (80052ac <xPortStartScheduler+0x12c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d10b      	bne.n	80051ca <xPortStartScheduler+0x4a>
	__asm volatile
 80051b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b6:	f383 8811 	msr	BASEPRI, r3
 80051ba:	f3bf 8f6f 	isb	sy
 80051be:	f3bf 8f4f 	dsb	sy
 80051c2:	60fb      	str	r3, [r7, #12]
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	e7fd      	b.n	80051c6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051ca:	4b39      	ldr	r3, [pc, #228]	@ (80052b0 <xPortStartScheduler+0x130>)
 80051cc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	22ff      	movs	r2, #255	@ 0xff
 80051da:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80051e4:	78fb      	ldrb	r3, [r7, #3]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80051ec:	b2da      	uxtb	r2, r3
 80051ee:	4b31      	ldr	r3, [pc, #196]	@ (80052b4 <xPortStartScheduler+0x134>)
 80051f0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80051f2:	4b31      	ldr	r3, [pc, #196]	@ (80052b8 <xPortStartScheduler+0x138>)
 80051f4:	2207      	movs	r2, #7
 80051f6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80051f8:	e009      	b.n	800520e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80051fa:	4b2f      	ldr	r3, [pc, #188]	@ (80052b8 <xPortStartScheduler+0x138>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	3b01      	subs	r3, #1
 8005200:	4a2d      	ldr	r2, [pc, #180]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005202:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005204:	78fb      	ldrb	r3, [r7, #3]
 8005206:	b2db      	uxtb	r3, r3
 8005208:	005b      	lsls	r3, r3, #1
 800520a:	b2db      	uxtb	r3, r3
 800520c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800520e:	78fb      	ldrb	r3, [r7, #3]
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005216:	2b80      	cmp	r3, #128	@ 0x80
 8005218:	d0ef      	beq.n	80051fa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800521a:	4b27      	ldr	r3, [pc, #156]	@ (80052b8 <xPortStartScheduler+0x138>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f1c3 0307 	rsb	r3, r3, #7
 8005222:	2b04      	cmp	r3, #4
 8005224:	d00b      	beq.n	800523e <xPortStartScheduler+0xbe>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	60bb      	str	r3, [r7, #8]
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800523e:	4b1e      	ldr	r3, [pc, #120]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	021b      	lsls	r3, r3, #8
 8005244:	4a1c      	ldr	r2, [pc, #112]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005246:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005248:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <xPortStartScheduler+0x138>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005250:	4a19      	ldr	r2, [pc, #100]	@ (80052b8 <xPortStartScheduler+0x138>)
 8005252:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	b2da      	uxtb	r2, r3
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800525c:	4b17      	ldr	r3, [pc, #92]	@ (80052bc <xPortStartScheduler+0x13c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a16      	ldr	r2, [pc, #88]	@ (80052bc <xPortStartScheduler+0x13c>)
 8005262:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005266:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005268:	4b14      	ldr	r3, [pc, #80]	@ (80052bc <xPortStartScheduler+0x13c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a13      	ldr	r2, [pc, #76]	@ (80052bc <xPortStartScheduler+0x13c>)
 800526e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005272:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005274:	f000 f8da 	bl	800542c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005278:	4b11      	ldr	r3, [pc, #68]	@ (80052c0 <xPortStartScheduler+0x140>)
 800527a:	2200      	movs	r2, #0
 800527c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800527e:	f000 f8f9 	bl	8005474 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005282:	4b10      	ldr	r3, [pc, #64]	@ (80052c4 <xPortStartScheduler+0x144>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a0f      	ldr	r2, [pc, #60]	@ (80052c4 <xPortStartScheduler+0x144>)
 8005288:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800528c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800528e:	f7ff ff63 	bl	8005158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005292:	f7ff fd4b 	bl	8004d2c <vTaskSwitchContext>
	prvTaskExitError();
 8005296:	f7ff ff1b 	bl	80050d0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800529a:	2300      	movs	r3, #0
}
 800529c:	4618      	mov	r0, r3
 800529e:	3718      	adds	r7, #24
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}
 80052a4:	e000ed00 	.word	0xe000ed00
 80052a8:	410fc271 	.word	0x410fc271
 80052ac:	410fc270 	.word	0x410fc270
 80052b0:	e000e400 	.word	0xe000e400
 80052b4:	20000528 	.word	0x20000528
 80052b8:	2000052c 	.word	0x2000052c
 80052bc:	e000ed20 	.word	0xe000ed20
 80052c0:	20000010 	.word	0x20000010
 80052c4:	e000ef34 	.word	0xe000ef34

080052c8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	607b      	str	r3, [r7, #4]
}
 80052e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80052e2:	4b10      	ldr	r3, [pc, #64]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3301      	adds	r3, #1
 80052e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052ea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80052ec:	4b0d      	ldr	r3, [pc, #52]	@ (8005324 <vPortEnterCritical+0x5c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d110      	bne.n	8005316 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80052f4:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <vPortEnterCritical+0x60>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	b2db      	uxtb	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00b      	beq.n	8005316 <vPortEnterCritical+0x4e>
	__asm volatile
 80052fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005302:	f383 8811 	msr	BASEPRI, r3
 8005306:	f3bf 8f6f 	isb	sy
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	603b      	str	r3, [r7, #0]
}
 8005310:	bf00      	nop
 8005312:	bf00      	nop
 8005314:	e7fd      	b.n	8005312 <vPortEnterCritical+0x4a>
	}
}
 8005316:	bf00      	nop
 8005318:	370c      	adds	r7, #12
 800531a:	46bd      	mov	sp, r7
 800531c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	20000010 	.word	0x20000010
 8005328:	e000ed04 	.word	0xe000ed04

0800532c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005332:	4b12      	ldr	r3, [pc, #72]	@ (800537c <vPortExitCritical+0x50>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d10b      	bne.n	8005352 <vPortExitCritical+0x26>
	__asm volatile
 800533a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800533e:	f383 8811 	msr	BASEPRI, r3
 8005342:	f3bf 8f6f 	isb	sy
 8005346:	f3bf 8f4f 	dsb	sy
 800534a:	607b      	str	r3, [r7, #4]
}
 800534c:	bf00      	nop
 800534e:	bf00      	nop
 8005350:	e7fd      	b.n	800534e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005352:	4b0a      	ldr	r3, [pc, #40]	@ (800537c <vPortExitCritical+0x50>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	3b01      	subs	r3, #1
 8005358:	4a08      	ldr	r2, [pc, #32]	@ (800537c <vPortExitCritical+0x50>)
 800535a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800535c:	4b07      	ldr	r3, [pc, #28]	@ (800537c <vPortExitCritical+0x50>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d105      	bne.n	8005370 <vPortExitCritical+0x44>
 8005364:	2300      	movs	r3, #0
 8005366:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800536e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005370:	bf00      	nop
 8005372:	370c      	adds	r7, #12
 8005374:	46bd      	mov	sp, r7
 8005376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537a:	4770      	bx	lr
 800537c:	20000010 	.word	0x20000010

08005380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005380:	f3ef 8009 	mrs	r0, PSP
 8005384:	f3bf 8f6f 	isb	sy
 8005388:	4b15      	ldr	r3, [pc, #84]	@ (80053e0 <pxCurrentTCBConst>)
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	f01e 0f10 	tst.w	lr, #16
 8005390:	bf08      	it	eq
 8005392:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005396:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800539a:	6010      	str	r0, [r2, #0]
 800539c:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053a0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80053a4:	f380 8811 	msr	BASEPRI, r0
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
 80053b0:	f7ff fcbc 	bl	8004d2c <vTaskSwitchContext>
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f380 8811 	msr	BASEPRI, r0
 80053bc:	bc09      	pop	{r0, r3}
 80053be:	6819      	ldr	r1, [r3, #0]
 80053c0:	6808      	ldr	r0, [r1, #0]
 80053c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053c6:	f01e 0f10 	tst.w	lr, #16
 80053ca:	bf08      	it	eq
 80053cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053d0:	f380 8809 	msr	PSP, r0
 80053d4:	f3bf 8f6f 	isb	sy
 80053d8:	4770      	bx	lr
 80053da:	bf00      	nop
 80053dc:	f3af 8000 	nop.w

080053e0 <pxCurrentTCBConst>:
 80053e0:	200003fc 	.word	0x200003fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop

080053e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	607b      	str	r3, [r7, #4]
}
 8005400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005402:	f7ff fbd5 	bl	8004bb0 <xTaskIncrementTick>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d003      	beq.n	8005414 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800540c:	4b06      	ldr	r3, [pc, #24]	@ (8005428 <SysTick_Handler+0x40>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	2300      	movs	r3, #0
 8005416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	f383 8811 	msr	BASEPRI, r3
}
 800541e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005420:	bf00      	nop
 8005422:	3708      	adds	r7, #8
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800542c:	b480      	push	{r7}
 800542e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005430:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005436:	4b0b      	ldr	r3, [pc, #44]	@ (8005464 <vPortSetupTimerInterrupt+0x38>)
 8005438:	2200      	movs	r2, #0
 800543a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800543c:	4b0a      	ldr	r3, [pc, #40]	@ (8005468 <vPortSetupTimerInterrupt+0x3c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a0a      	ldr	r2, [pc, #40]	@ (800546c <vPortSetupTimerInterrupt+0x40>)
 8005442:	fba2 2303 	umull	r2, r3, r2, r3
 8005446:	099b      	lsrs	r3, r3, #6
 8005448:	4a09      	ldr	r2, [pc, #36]	@ (8005470 <vPortSetupTimerInterrupt+0x44>)
 800544a:	3b01      	subs	r3, #1
 800544c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800544e:	4b04      	ldr	r3, [pc, #16]	@ (8005460 <vPortSetupTimerInterrupt+0x34>)
 8005450:	2207      	movs	r2, #7
 8005452:	601a      	str	r2, [r3, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	e000e010 	.word	0xe000e010
 8005464:	e000e018 	.word	0xe000e018
 8005468:	20000004 	.word	0x20000004
 800546c:	10624dd3 	.word	0x10624dd3
 8005470:	e000e014 	.word	0xe000e014

08005474 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005474:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005484 <vPortEnableVFP+0x10>
 8005478:	6801      	ldr	r1, [r0, #0]
 800547a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800547e:	6001      	str	r1, [r0, #0]
 8005480:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005482:	bf00      	nop
 8005484:	e000ed88 	.word	0xe000ed88

08005488 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08a      	sub	sp, #40	@ 0x28
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005490:	2300      	movs	r3, #0
 8005492:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005494:	f7ff fae0 	bl	8004a58 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005498:	4b5a      	ldr	r3, [pc, #360]	@ (8005604 <pvPortMalloc+0x17c>)
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80054a0:	f000 f916 	bl	80056d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80054a4:	4b58      	ldr	r3, [pc, #352]	@ (8005608 <pvPortMalloc+0x180>)
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	4013      	ands	r3, r2
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f040 8090 	bne.w	80055d2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d01e      	beq.n	80054f6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80054b8:	2208      	movs	r2, #8
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4413      	add	r3, r2
 80054be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f003 0307 	and.w	r3, r3, #7
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d015      	beq.n	80054f6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f023 0307 	bic.w	r3, r3, #7
 80054d0:	3308      	adds	r3, #8
 80054d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	f003 0307 	and.w	r3, r3, #7
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d00b      	beq.n	80054f6 <pvPortMalloc+0x6e>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	617b      	str	r3, [r7, #20]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d06a      	beq.n	80055d2 <pvPortMalloc+0x14a>
 80054fc:	4b43      	ldr	r3, [pc, #268]	@ (800560c <pvPortMalloc+0x184>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d865      	bhi.n	80055d2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005506:	4b42      	ldr	r3, [pc, #264]	@ (8005610 <pvPortMalloc+0x188>)
 8005508:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800550a:	4b41      	ldr	r3, [pc, #260]	@ (8005610 <pvPortMalloc+0x188>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005510:	e004      	b.n	800551c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800551c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d903      	bls.n	800552e <pvPortMalloc+0xa6>
 8005526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f1      	bne.n	8005512 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800552e:	4b35      	ldr	r3, [pc, #212]	@ (8005604 <pvPortMalloc+0x17c>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005534:	429a      	cmp	r2, r3
 8005536:	d04c      	beq.n	80055d2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	2208      	movs	r2, #8
 800553e:	4413      	add	r3, r2
 8005540:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005544:	681a      	ldr	r2, [r3, #0]
 8005546:	6a3b      	ldr	r3, [r7, #32]
 8005548:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800554a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800554c:	685a      	ldr	r2, [r3, #4]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	1ad2      	subs	r2, r2, r3
 8005552:	2308      	movs	r3, #8
 8005554:	005b      	lsls	r3, r3, #1
 8005556:	429a      	cmp	r2, r3
 8005558:	d920      	bls.n	800559c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800555a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4413      	add	r3, r2
 8005560:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	f003 0307 	and.w	r3, r3, #7
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00b      	beq.n	8005584 <pvPortMalloc+0xfc>
	__asm volatile
 800556c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005570:	f383 8811 	msr	BASEPRI, r3
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	f3bf 8f4f 	dsb	sy
 800557c:	613b      	str	r3, [r7, #16]
}
 800557e:	bf00      	nop
 8005580:	bf00      	nop
 8005582:	e7fd      	b.n	8005580 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005586:	685a      	ldr	r2, [r3, #4]
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	1ad2      	subs	r2, r2, r3
 800558c:	69bb      	ldr	r3, [r7, #24]
 800558e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005596:	69b8      	ldr	r0, [r7, #24]
 8005598:	f000 f8fc 	bl	8005794 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800559c:	4b1b      	ldr	r3, [pc, #108]	@ (800560c <pvPortMalloc+0x184>)
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	1ad3      	subs	r3, r2, r3
 80055a6:	4a19      	ldr	r2, [pc, #100]	@ (800560c <pvPortMalloc+0x184>)
 80055a8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80055aa:	4b18      	ldr	r3, [pc, #96]	@ (800560c <pvPortMalloc+0x184>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	4b19      	ldr	r3, [pc, #100]	@ (8005614 <pvPortMalloc+0x18c>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d203      	bcs.n	80055be <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80055b6:	4b15      	ldr	r3, [pc, #84]	@ (800560c <pvPortMalloc+0x184>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a16      	ldr	r2, [pc, #88]	@ (8005614 <pvPortMalloc+0x18c>)
 80055bc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80055be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c0:	685a      	ldr	r2, [r3, #4]
 80055c2:	4b11      	ldr	r3, [pc, #68]	@ (8005608 <pvPortMalloc+0x180>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	431a      	orrs	r2, r3
 80055c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ca:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80055cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ce:	2200      	movs	r2, #0
 80055d0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80055d2:	f7ff fa4f 	bl	8004a74 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	f003 0307 	and.w	r3, r3, #7
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00b      	beq.n	80055f8 <pvPortMalloc+0x170>
	__asm volatile
 80055e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e4:	f383 8811 	msr	BASEPRI, r3
 80055e8:	f3bf 8f6f 	isb	sy
 80055ec:	f3bf 8f4f 	dsb	sy
 80055f0:	60fb      	str	r3, [r7, #12]
}
 80055f2:	bf00      	nop
 80055f4:	bf00      	nop
 80055f6:	e7fd      	b.n	80055f4 <pvPortMalloc+0x16c>
	return pvReturn;
 80055f8:	69fb      	ldr	r3, [r7, #28]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3728      	adds	r7, #40	@ 0x28
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20001138 	.word	0x20001138
 8005608:	20001144 	.word	0x20001144
 800560c:	2000113c 	.word	0x2000113c
 8005610:	20001130 	.word	0x20001130
 8005614:	20001140 	.word	0x20001140

08005618 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d04a      	beq.n	80056c0 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800562a:	2308      	movs	r3, #8
 800562c:	425b      	negs	r3, r3
 800562e:	697a      	ldr	r2, [r7, #20]
 8005630:	4413      	add	r3, r2
 8005632:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	4b22      	ldr	r3, [pc, #136]	@ (80056c8 <vPortFree+0xb0>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4013      	ands	r3, r2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <vPortFree+0x46>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	60fb      	str	r3, [r7, #12]
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop
 800565c:	e7fd      	b.n	800565a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00b      	beq.n	800567e <vPortFree+0x66>
	__asm volatile
 8005666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800566a:	f383 8811 	msr	BASEPRI, r3
 800566e:	f3bf 8f6f 	isb	sy
 8005672:	f3bf 8f4f 	dsb	sy
 8005676:	60bb      	str	r3, [r7, #8]
}
 8005678:	bf00      	nop
 800567a:	bf00      	nop
 800567c:	e7fd      	b.n	800567a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	4b11      	ldr	r3, [pc, #68]	@ (80056c8 <vPortFree+0xb0>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4013      	ands	r3, r2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d019      	beq.n	80056c0 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d115      	bne.n	80056c0 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	685a      	ldr	r2, [r3, #4]
 8005698:	4b0b      	ldr	r3, [pc, #44]	@ (80056c8 <vPortFree+0xb0>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	43db      	mvns	r3, r3
 800569e:	401a      	ands	r2, r3
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80056a4:	f7ff f9d8 	bl	8004a58 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	4b07      	ldr	r3, [pc, #28]	@ (80056cc <vPortFree+0xb4>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	4413      	add	r3, r2
 80056b2:	4a06      	ldr	r2, [pc, #24]	@ (80056cc <vPortFree+0xb4>)
 80056b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80056b6:	6938      	ldr	r0, [r7, #16]
 80056b8:	f000 f86c 	bl	8005794 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80056bc:	f7ff f9da 	bl	8004a74 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80056c0:	bf00      	nop
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	20001144 	.word	0x20001144
 80056cc:	2000113c 	.word	0x2000113c

080056d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80056d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80056da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80056dc:	4b27      	ldr	r3, [pc, #156]	@ (800577c <prvHeapInit+0xac>)
 80056de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f003 0307 	and.w	r3, r3, #7
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00c      	beq.n	8005704 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3307      	adds	r3, #7
 80056ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f023 0307 	bic.w	r3, r3, #7
 80056f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	1ad3      	subs	r3, r2, r3
 80056fe:	4a1f      	ldr	r2, [pc, #124]	@ (800577c <prvHeapInit+0xac>)
 8005700:	4413      	add	r3, r2
 8005702:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005708:	4a1d      	ldr	r2, [pc, #116]	@ (8005780 <prvHeapInit+0xb0>)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800570e:	4b1c      	ldr	r3, [pc, #112]	@ (8005780 <prvHeapInit+0xb0>)
 8005710:	2200      	movs	r2, #0
 8005712:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68ba      	ldr	r2, [r7, #8]
 8005718:	4413      	add	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800571c:	2208      	movs	r2, #8
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	f023 0307 	bic.w	r3, r3, #7
 800572a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	4a15      	ldr	r2, [pc, #84]	@ (8005784 <prvHeapInit+0xb4>)
 8005730:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005732:	4b14      	ldr	r3, [pc, #80]	@ (8005784 <prvHeapInit+0xb4>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2200      	movs	r2, #0
 8005738:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800573a:	4b12      	ldr	r3, [pc, #72]	@ (8005784 <prvHeapInit+0xb4>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2200      	movs	r2, #0
 8005740:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	1ad2      	subs	r2, r2, r3
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005750:	4b0c      	ldr	r3, [pc, #48]	@ (8005784 <prvHeapInit+0xb4>)
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	4a0a      	ldr	r2, [pc, #40]	@ (8005788 <prvHeapInit+0xb8>)
 800575e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	4a09      	ldr	r2, [pc, #36]	@ (800578c <prvHeapInit+0xbc>)
 8005766:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005768:	4b09      	ldr	r3, [pc, #36]	@ (8005790 <prvHeapInit+0xc0>)
 800576a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800576e:	601a      	str	r2, [r3, #0]
}
 8005770:	bf00      	nop
 8005772:	3714      	adds	r7, #20
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	20000530 	.word	0x20000530
 8005780:	20001130 	.word	0x20001130
 8005784:	20001138 	.word	0x20001138
 8005788:	20001140 	.word	0x20001140
 800578c:	2000113c 	.word	0x2000113c
 8005790:	20001144 	.word	0x20001144

08005794 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005794:	b480      	push	{r7}
 8005796:	b085      	sub	sp, #20
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800579c:	4b28      	ldr	r3, [pc, #160]	@ (8005840 <prvInsertBlockIntoFreeList+0xac>)
 800579e:	60fb      	str	r3, [r7, #12]
 80057a0:	e002      	b.n	80057a8 <prvInsertBlockIntoFreeList+0x14>
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	60fb      	str	r3, [r7, #12]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d8f7      	bhi.n	80057a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	4413      	add	r3, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	429a      	cmp	r2, r3
 80057c2:	d108      	bne.n	80057d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	441a      	add	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	685b      	ldr	r3, [r3, #4]
 80057de:	68ba      	ldr	r2, [r7, #8]
 80057e0:	441a      	add	r2, r3
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	429a      	cmp	r2, r3
 80057e8:	d118      	bne.n	800581c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681a      	ldr	r2, [r3, #0]
 80057ee:	4b15      	ldr	r3, [pc, #84]	@ (8005844 <prvInsertBlockIntoFreeList+0xb0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d00d      	beq.n	8005812 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685a      	ldr	r2, [r3, #4]
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	441a      	add	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	601a      	str	r2, [r3, #0]
 8005810:	e008      	b.n	8005824 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005812:	4b0c      	ldr	r3, [pc, #48]	@ (8005844 <prvInsertBlockIntoFreeList+0xb0>)
 8005814:	681a      	ldr	r2, [r3, #0]
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e003      	b.n	8005824 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	429a      	cmp	r2, r3
 800582a:	d002      	beq.n	8005832 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005832:	bf00      	nop
 8005834:	3714      	adds	r7, #20
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr
 800583e:	bf00      	nop
 8005840:	20001130 	.word	0x20001130
 8005844:	20001138 	.word	0x20001138

08005848 <memset>:
 8005848:	4402      	add	r2, r0
 800584a:	4603      	mov	r3, r0
 800584c:	4293      	cmp	r3, r2
 800584e:	d100      	bne.n	8005852 <memset+0xa>
 8005850:	4770      	bx	lr
 8005852:	f803 1b01 	strb.w	r1, [r3], #1
 8005856:	e7f9      	b.n	800584c <memset+0x4>

08005858 <__libc_init_array>:
 8005858:	b570      	push	{r4, r5, r6, lr}
 800585a:	4d0d      	ldr	r5, [pc, #52]	@ (8005890 <__libc_init_array+0x38>)
 800585c:	4c0d      	ldr	r4, [pc, #52]	@ (8005894 <__libc_init_array+0x3c>)
 800585e:	1b64      	subs	r4, r4, r5
 8005860:	10a4      	asrs	r4, r4, #2
 8005862:	2600      	movs	r6, #0
 8005864:	42a6      	cmp	r6, r4
 8005866:	d109      	bne.n	800587c <__libc_init_array+0x24>
 8005868:	4d0b      	ldr	r5, [pc, #44]	@ (8005898 <__libc_init_array+0x40>)
 800586a:	4c0c      	ldr	r4, [pc, #48]	@ (800589c <__libc_init_array+0x44>)
 800586c:	f000 f818 	bl	80058a0 <_init>
 8005870:	1b64      	subs	r4, r4, r5
 8005872:	10a4      	asrs	r4, r4, #2
 8005874:	2600      	movs	r6, #0
 8005876:	42a6      	cmp	r6, r4
 8005878:	d105      	bne.n	8005886 <__libc_init_array+0x2e>
 800587a:	bd70      	pop	{r4, r5, r6, pc}
 800587c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005880:	4798      	blx	r3
 8005882:	3601      	adds	r6, #1
 8005884:	e7ee      	b.n	8005864 <__libc_init_array+0xc>
 8005886:	f855 3b04 	ldr.w	r3, [r5], #4
 800588a:	4798      	blx	r3
 800588c:	3601      	adds	r6, #1
 800588e:	e7f2      	b.n	8005876 <__libc_init_array+0x1e>
 8005890:	08005944 	.word	0x08005944
 8005894:	08005944 	.word	0x08005944
 8005898:	08005944 	.word	0x08005944
 800589c:	08005948 	.word	0x08005948

080058a0 <_init>:
 80058a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a2:	bf00      	nop
 80058a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058a6:	bc08      	pop	{r3}
 80058a8:	469e      	mov	lr, r3
 80058aa:	4770      	bx	lr

080058ac <_fini>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	bf00      	nop
 80058b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058b2:	bc08      	pop	{r3}
 80058b4:	469e      	mov	lr, r3
 80058b6:	4770      	bx	lr
